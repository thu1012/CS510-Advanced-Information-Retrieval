{"description":"Berland National Library has recently been built in the capital of Berland. In addition, in the library you can take any of the collected works of Berland leaders, the library has a reading room.Today was the pilot launch of an automated reading room visitors' accounting system! The scanner of the system is installed at the entrance to the reading room. It records the events of the form \"reader entered room\", \"reader left room\". Every reader is assigned a registration number during the registration procedure at the library \u2014 it's a unique integer from 1 to 106. Thus, the system logs events of two forms:  \"+ ri\" \u2014 the reader with registration number ri entered the room;  \"- ri\" \u2014 the reader with registration number ri left the room. The first launch of the system was a success, it functioned for some period of time, and, at the time of its launch and at the time of its shutdown, the reading room may already have visitors.Significant funds of the budget of Berland have been spent on the design and installation of the system. Therefore, some of the citizens of the capital now demand to explain the need for this system and the benefits that its implementation will bring. Now, the developers of the system need to urgently come up with reasons for its existence.Help the system developers to find the minimum possible capacity of the reading room (in visitors) using the log of the system available to you.","input_specification":"The first line contains a positive integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the number of records in the system log. Next follow n events from the system journal in the order in which the were made. Each event was written on a single line and looks as \"+ ri\" or \"- ri\", where ri is an integer from 1 to 106, the registration number of the visitor (that is, distinct visitors always have distinct registration numbers). It is guaranteed that the log is not contradictory, that is, for every visitor the types of any of his two consecutive events are distinct. Before starting the system, and after stopping the room may possibly contain visitors.","output_specification":"Print a single integer \u2014 the minimum possible capacity of the reading room.","notes":"NoteIn the first sample test, the system log will ensure that at some point in the reading room were visitors with registration numbers 1, 1200 and 12001. More people were not in the room at the same time based on the log. Therefore, the answer to the test is 3.","sample_inputs":["6\n+ 12001\n- 12001\n- 1\n- 1200\n+ 1\n+ 7","2\n- 1\n- 2","2\n+ 1\n- 1"],"sample_outputs":["3","2","1"],"src_uid":"6cfd3b0a403212ec68bac1667bce9ef1","lang_cluster":"Python","difficulty":1300,"human_solution":"d=set()\nm=0\nfor _ in range(int(input())):\n\tx,i=input().split()\n\tif x==\"-\":\n\t\tif i in d:d.remove(i)\n\t\telse:m+=1\n\telse:\n\t  d.add(i)\n\tm=max(m,len(d))\nprint(m)","testcases":"[{'input': '6\\r\\n+ 12001\\r\\n- 12001\\r\\n- 1\\r\\n- 1200\\r\\n+ 1\\r\\n+ 7\\r\\n', 'output': ['3']}, {'input': '2\\r\\n- 1\\r\\n- 2\\r\\n', 'output': ['2']}, {'input': '2\\r\\n+ 1\\r\\n- 1\\r\\n', 'output': ['1']}, {'input': '5\\r\\n+ 1\\r\\n- 1\\r\\n+ 2\\r\\n+ 3\\r\\n- 4\\r\\n', 'output': ['3']}, {'input': '3\\r\\n- 1\\r\\n- 2\\r\\n- 3\\r\\n', 'output': ['3']}, {'input': '4\\r\\n+ 1\\r\\n+ 2\\r\\n- 1\\r\\n+ 3\\r\\n', 'output': ['2']}, {'input': '6\\r\\n+ 1\\r\\n+ 2\\r\\n- 1\\r\\n+ 3\\r\\n- 2\\r\\n+ 4\\r\\n', 'output': ['2']}, {'input': '3\\r\\n+ 1\\r\\n+ 2\\r\\n- 3\\r\\n', 'output': ['3']}, {'input': '3\\r\\n- 1\\r\\n+ 2\\r\\n- 2\\r\\n', 'output': ['1']}, {'input': '4\\r\\n- 1\\r\\n- 2\\r\\n+ 3\\r\\n+ 4\\r\\n', 'output': ['2']}, {'input': '1\\r\\n+ 1\\r\\n', 'output': ['1']}, {'input': '1\\r\\n- 1\\r\\n', 'output': ['1']}, {'input': '3\\r\\n- 1\\r\\n+ 1\\r\\n- 1\\r\\n', 'output': ['1']}, {'input': '10\\r\\n+ 1\\r\\n+ 2\\r\\n+ 3\\r\\n+ 4\\r\\n+ 5\\r\\n+ 6\\r\\n+ 7\\r\\n+ 8\\r\\n+ 9\\r\\n+ 10\\r\\n', 'output': ['10']}, {'input': '5\\r\\n+ 5\\r\\n+ 4\\r\\n- 4\\r\\n- 5\\r\\n+ 5\\r\\n', 'output': ['2']}, {'input': '50\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n+ 100\\r\\n- 100\\r\\n', 'output': ['1']}, {'input': '10\\r\\n- 8\\r\\n- 4\\r\\n+ 8\\r\\n+ 10\\r\\n+ 6\\r\\n- 8\\r\\n+ 9\\r\\n- 2\\r\\n- 7\\r\\n+ 4\\r\\n', 'output': ['5']}, {'input': '20\\r\\n+ 3\\r\\n- 3\\r\\n- 2\\r\\n+ 2\\r\\n+ 3\\r\\n- 5\\r\\n- 1\\r\\n+ 1\\r\\n- 3\\r\\n+ 4\\r\\n- 1\\r\\n+ 1\\r\\n+ 3\\r\\n- 3\\r\\n+ 5\\r\\n- 2\\r\\n- 1\\r\\n+ 2\\r\\n+ 1\\r\\n- 5\\r\\n', 'output': ['4']}, {'input': '50\\r\\n+ 4\\r\\n+ 5\\r\\n+ 3\\r\\n+ 2\\r\\n- 2\\r\\n- 3\\r\\n- 4\\r\\n+ 3\\r\\n+ 2\\r\\n- 3\\r\\n+ 4\\r\\n- 2\\r\\n- 4\\r\\n+ 2\\r\\n+ 3\\r\\n- 3\\r\\n- 5\\r\\n- 1\\r\\n+ 4\\r\\n+ 5\\r\\n- 5\\r\\n+ 3\\r\\n- 4\\r\\n- 3\\r\\n- 2\\r\\n+ 4\\r\\n+ 3\\r\\n+ 2\\r\\n- 2\\r\\n- 4\\r\\n+ 5\\r\\n+ 1\\r\\n+ 4\\r\\n+ 2\\r\\n- 2\\r\\n+ 2\\r\\n- 3\\r\\n- 5\\r\\n- 4\\r\\n- 1\\r\\n+ 5\\r\\n- 2\\r\\n- 5\\r\\n+ 5\\r\\n+ 3\\r\\n- 3\\r\\n+ 1\\r\\n+ 3\\r\\n+ 2\\r\\n- 1\\r\\n', 'output': ['5']}, {'input': '10\\r\\n- 2\\r\\n+ 1\\r\\n- 1\\r\\n+ 2\\r\\n- 2\\r\\n+ 2\\r\\n+ 1\\r\\n- 1\\r\\n- 2\\r\\n+ 1\\r\\n', 'output': ['2']}, {'input': '50\\r\\n+ 1\\r\\n+ 2\\r\\n+ 3\\r\\n+ 4\\r\\n+ 5\\r\\n+ 6\\r\\n+ 7\\r\\n+ 8\\r\\n+ 9\\r\\n+ 10\\r\\n+ 11\\r\\n+ 12\\r\\n+ 13\\r\\n+ 14\\r\\n+ 15\\r\\n+ 16\\r\\n+ 17\\r\\n+ 18\\r\\n+ 19\\r\\n+ 20\\r\\n+ 21\\r\\n+ 22\\r\\n+ 23\\r\\n+ 24\\r\\n+ 25\\r\\n+ 26\\r\\n+ 27\\r\\n+ 28\\r\\n+ 29\\r\\n+ 30\\r\\n+ 31\\r\\n+ 32\\r\\n+ 33\\r\\n+ 34\\r\\n+ 35\\r\\n+ 36\\r\\n+ 37\\r\\n+ 38\\r\\n+ 39\\r\\n+ 40\\r\\n+ 41\\r\\n+ 42\\r\\n+ 43\\r\\n+ 44\\r\\n+ 45\\r\\n+ 46\\r\\n+ 47\\r\\n+ 48\\r\\n+ 49\\r\\n+ 50\\r\\n', 'output': ['50']}, {'input': '50\\r\\n- 1\\r\\n- 2\\r\\n- 3\\r\\n- 4\\r\\n- 5\\r\\n- 6\\r\\n- 7\\r\\n- 8\\r\\n- 9\\r\\n- 10\\r\\n- 11\\r\\n- 12\\r\\n- 13\\r\\n- 14\\r\\n- 15\\r\\n- 16\\r\\n- 17\\r\\n- 18\\r\\n- 19\\r\\n- 20\\r\\n- 21\\r\\n- 22\\r\\n- 23\\r\\n- 24\\r\\n- 25\\r\\n- 26\\r\\n- 27\\r\\n- 28\\r\\n- 29\\r\\n- 30\\r\\n- 31\\r\\n- 32\\r\\n- 33\\r\\n- 34\\r\\n- 35\\r\\n- 36\\r\\n- 37\\r\\n- 38\\r\\n- 39\\r\\n- 40\\r\\n- 41\\r\\n- 42\\r\\n- 43\\r\\n- 44\\r\\n- 45\\r\\n- 46\\r\\n- 47\\r\\n- 48\\r\\n- 49\\r\\n- 50\\r\\n', 'output': ['50']}]","id":121,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nroom = set()\\ncapacity = 0\\ncurrent_visitors = 0\\n\\nfor _ in range(n):\\n    event = input().split()\\n    action = event[0]\\n    reader_id = int(event[1])\\n\\n    if action == '+':\\n        room.add(reader_id)\\n        current_visitors += 1\\n        capacity = max(capacity, current_visitors)\\n    else:\\n        if reader_id in room:\\n            room.remove(reader_id)\\n            current_visitors -= 1\\n        else:\\n            capacity += 1\\n\\nprint(capacity)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nroom = set()\\ncapacity = 0\\ncurrent_visitors = 0\\n\\nfor _ in range(n):\\n    event = raw_input().split()\\n    action = event[0]\\n    reader_id = int(event[1])\\n\\n    if action == '+':\\n        room.add(reader_id)\\n        current_visitors += 1\\n        capacity = max(capacity, current_visitors)\\n    else:\\n        if reader_id in room:\\n            room.remove(reader_id)\\n            current_visitors -= 1\\n        else:\\n            capacity += 1\\n\\nprint capacity\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nroom = set()\\nmax_capacity = 0\\ncurrent_capacity = 0\\n\\nfor _ in range(n):\\n    event = input().split()\\n    action = event[0]\\n    reader_id = int(event[1])\\n\\n    if action == '+':\\n        room.add(reader_id)\\n        current_capacity += 1\\n        max_capacity = max(max_capacity, current_capacity)\\n    elif action == '-':\\n        if reader_id in room:\\n            room.remove(reader_id)\\n            current_capacity -= 1\\n        else:\\n            current_capacity += 1\\n            max_capacity = max(max_capacity, current_capacity)\\n\\nprint(max_capacity)\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nroom = set()\\nmax_capacity = 0\\ncurrent_capacity = 0\\n\\nfor _ in range(n):\\n    event = raw_input().split()\\n    action = event[0]\\n    reader_id = int(event[1])\\n\\n    if action == '+':\\n        room.add(reader_id)\\n        current_capacity += 1\\n        max_capacity = max(max_capacity, current_capacity)\\n    elif action == '-':\\n        if reader_id in room:\\n            room.remove(reader_id)\\n            current_capacity -= 1\\n        else:\\n            current_capacity += 1\\n            max_capacity = max(max_capacity, current_capacity)\\n\\nprint(max_capacity)\\n\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nroom = set()\\ncapacity = 0\\ncurrent_visitors = 0\\n\\nfor _ in range(n):\\n    event = input().split()\\n    action = event[0]\\n    reader_id = int(event[1])\\n\\n    if action == '+':\\n        room.add(reader_id)\\n        current_visitors += 1\\n        capacity = max(capacity, current_visitors)\\n    else:\\n        if reader_id in room:\\n            room.remove(reader_id)\\n            current_visitors -= 1\\n        else:\\n            capacity += 1\\n\\nprint(capacity)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nroom = set()\\ncapacity = 0\\ncurrent_visitors = 0\\n\\nfor _ in range(n):\\n    event = raw_input().split()\\n    action = event[0]\\n    reader_id = int(event[1])\\n\\n    if action == '+':\\n        room.add(reader_id)\\n        current_visitors += 1\\n        capacity = max(capacity, current_visitors)\\n    else:\\n        if reader_id in room:\\n            room.remove(reader_id)\\n            current_visitors -= 1\\n        else:\\n            capacity += 1\\n\\nprint capacity\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nroom = set()\\nmax_capacity = 0\\ncurrent_capacity = 0\\n\\nfor _ in range(n):\\n    event = input().split()\\n    action = event[0]\\n    reader_id = int(event[1])\\n\\n    if action == '+':\\n        room.add(reader_id)\\n        current_capacity += 1\\n        max_capacity = max(max_capacity, current_capacity)\\n    elif action == '-':\\n        if reader_id in room:\\n            room.remove(reader_id)\\n            current_capacity -= 1\\n        else:\\n            current_capacity += 1\\n            max_capacity = max(max_capacity, current_capacity)\\n\\nprint(max_capacity)\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nroom = set()\\nmax_capacity = 0\\ncurrent_capacity = 0\\n\\nfor _ in range(n):\\n    event = raw_input().split()\\n    action = event[0]\\n    reader_id = int(event[1])\\n\\n    if action == '+':\\n        room.add(reader_id)\\n        current_capacity += 1\\n        max_capacity = max(max_capacity, current_capacity)\\n    elif action == '-':\\n        if reader_id in room:\\n            room.remove(reader_id)\\n            current_capacity -= 1\\n        else:\\n            current_capacity += 1\\n            max_capacity = max(max_capacity, current_capacity)\\n\\nprint(max_capacity)\\n\"\n  }\n]\n```"}
{"description":"You are given a broken clock. You know, that it is supposed to show time in 12- or 24-hours HH:MM format. In 12-hours format hours change from 1 to 12, while in 24-hours it changes from 0 to 23. In both formats minutes change from 0 to 59.You are given a time in format HH:MM that is currently displayed on the broken clock. Your goal is to change minimum number of digits in order to make clocks display the correct time in the given format.For example, if 00:99 is displayed, it is enough to replace the second 9 with 3 in order to get 00:39 that is a correct time in 24-hours format. However, to make 00:99 correct in 12-hours format, one has to change at least two digits. Additionally to the first change one can replace the second 0 with 1 and obtain 01:39.","input_specification":"The first line of the input contains one integer 12 or 24, that denote 12-hours or 24-hours format respectively. The second line contains the time in format HH:MM, that is currently displayed on the clock. First two characters stand for the hours, while next two show the minutes.","output_specification":"The only line of the output should contain the time in format HH:MM that is a correct time in the given format. It should differ from the original in as few positions as possible. If there are many optimal solutions you can print any of them.","notes":null,"sample_inputs":["24\n17:30","12\n17:30","24\n99:99"],"sample_outputs":["17:30","07:30","09:09"],"src_uid":"88d56c1e3a7ffa94354ce0c70d8e958f","lang_cluster":"Python","difficulty":1300,"human_solution":"#http:\/\/codeforces.com\/problemset\/problem\/722\/A\n\n\ntime_format = int(raw_input())\ntime = raw_input().split(\":\")\n\nhour = time[0]\nminutes = time[1]\n\n\nif (time_format == 12):\n    if (int(hour) > 12):\n        if (hour[1] == \"0\"):\n            hour = \"10\"\n        else:   \n            hour = \"0\" + hour[1]\n    if (hour == \"00\"):\n        hour = \"01\"\nelse:\n    if (int(hour) > 23):    \n        hour = \"0\" + hour[1]\n\n\nif (int(minutes) > 59):\n    minutes = \"0\" + minutes[1]\n\n\nprint hour + \":\" + minutes\n\n    \n\t\n\n\n\n\n\n","testcases":"[{'input': '24\\r\\n17:30\\r\\n', 'output': ['17:30\\r\\n']}, {'input': '12\\r\\n17:30\\r\\n', 'output': ['07:30\\r\\n']}, {'input': '24\\r\\n99:99\\r\\n', 'output': ['09:09\\r\\n']}, {'input': '12\\r\\n05:54\\r\\n', 'output': ['05:54\\r\\n']}, {'input': '12\\r\\n00:05\\r\\n', 'output': ['01:05\\r\\n']}, {'input': '24\\r\\n23:80\\r\\n', 'output': ['23:00\\r\\n']}, {'input': '24\\r\\n73:16\\r\\n', 'output': ['03:16\\r\\n']}, {'input': '12\\r\\n03:77\\r\\n', 'output': ['03:07\\r\\n']}, {'input': '12\\r\\n47:83\\r\\n', 'output': ['07:03\\r\\n']}, {'input': '24\\r\\n23:88\\r\\n', 'output': ['23:08\\r\\n']}, {'input': '24\\r\\n51:67\\r\\n', 'output': ['01:07\\r\\n']}, {'input': '12\\r\\n10:33\\r\\n', 'output': ['10:33\\r\\n']}, {'input': '12\\r\\n00:01\\r\\n', 'output': ['01:01\\r\\n']}, {'input': '12\\r\\n07:74\\r\\n', 'output': ['07:04\\r\\n']}, {'input': '12\\r\\n00:60\\r\\n', 'output': ['01:00\\r\\n']}, {'input': '24\\r\\n08:32\\r\\n', 'output': ['08:32\\r\\n']}, {'input': '24\\r\\n42:59\\r\\n', 'output': ['02:59\\r\\n']}, {'input': '24\\r\\n19:87\\r\\n', 'output': ['19:07\\r\\n']}, {'input': '24\\r\\n26:98\\r\\n', 'output': ['06:08\\r\\n']}, {'input': '12\\r\\n12:91\\r\\n', 'output': ['12:01\\r\\n']}, {'input': '12\\r\\n11:30\\r\\n', 'output': ['11:30\\r\\n']}, {'input': '12\\r\\n90:32\\r\\n', 'output': ['10:32\\r\\n']}, {'input': '12\\r\\n03:69\\r\\n', 'output': ['03:09\\r\\n']}, {'input': '12\\r\\n33:83\\r\\n', 'output': ['03:03\\r\\n']}, {'input': '24\\r\\n10:45\\r\\n', 'output': ['10:45\\r\\n']}, {'input': '24\\r\\n65:12\\r\\n', 'output': ['05:12\\r\\n']}, {'input': '24\\r\\n22:64\\r\\n', 'output': ['22:04\\r\\n']}, {'input': '24\\r\\n48:91\\r\\n', 'output': ['08:01\\r\\n']}, {'input': '12\\r\\n02:51\\r\\n', 'output': ['02:51\\r\\n']}, {'input': '12\\r\\n40:11\\r\\n', 'output': ['10:11\\r\\n']}, {'input': '12\\r\\n02:86\\r\\n', 'output': ['02:06\\r\\n']}, {'input': '12\\r\\n99:96\\r\\n', 'output': ['09:06\\r\\n']}, {'input': '24\\r\\n19:24\\r\\n', 'output': ['19:24\\r\\n']}, {'input': '24\\r\\n55:49\\r\\n', 'output': ['05:49\\r\\n']}, {'input': '24\\r\\n01:97\\r\\n', 'output': ['01:07\\r\\n']}, {'input': '24\\r\\n39:68\\r\\n', 'output': ['09:08\\r\\n']}, {'input': '24\\r\\n24:00\\r\\n', 'output': ['04:00\\r\\n']}, {'input': '12\\r\\n91:00\\r\\n', 'output': ['01:00\\r\\n']}, {'input': '24\\r\\n00:30\\r\\n', 'output': ['00:30\\r\\n']}, {'input': '12\\r\\n13:20\\r\\n', 'output': ['03:20\\r\\n']}, {'input': '12\\r\\n13:00\\r\\n', 'output': ['03:00\\r\\n']}, {'input': '12\\r\\n42:35\\r\\n', 'output': ['02:35\\r\\n']}, {'input': '12\\r\\n20:00\\r\\n', 'output': ['10:00\\r\\n']}, {'input': '12\\r\\n21:00\\r\\n', 'output': ['01:00\\r\\n']}, {'input': '24\\r\\n10:10\\r\\n', 'output': ['10:10\\r\\n']}, {'input': '24\\r\\n30:40\\r\\n', 'output': ['00:40\\r\\n']}, {'input': '24\\r\\n12:00\\r\\n', 'output': ['12:00\\r\\n']}, {'input': '12\\r\\n10:60\\r\\n', 'output': ['10:00\\r\\n']}, {'input': '24\\r\\n30:00\\r\\n', 'output': ['00:00\\r\\n']}, {'input': '24\\r\\n34:00\\r\\n', 'output': ['04:00\\r\\n']}, {'input': '12\\r\\n22:00\\r\\n', 'output': ['02:00\\r\\n']}, {'input': '12\\r\\n20:20\\r\\n', 'output': ['10:20\\r\\n']}]","id":122,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    format_type = int(input())\\n    time_str = input()\\n    hh_str = time_str[0:2]\\n    mm_str = time_str[3:5]\\n\\n    hh = int(hh_str)\\n    mm = int(mm_str)\\n\\n    best_hh = hh\\n    best_mm = mm\\n    min_diff = float('inf')\\n\\n    for new_hh in range(24 if format_type == 24 else 1, 25 if format_type == 24 else 13):\\n        if format_type == 12 and new_hh == 0:\\n            continue\\n        if format_type == 12 and new_hh > 12:\\n            continue\\n        for new_mm in range(60):\\n            hh_diff = 0\\n            mm_diff = 0\\n            new_hh_str = str(new_hh).zfill(2)\\n            new_mm_str = str(new_mm).zfill(2)\\n\\n            for i in range(2):\\n                if hh_str[i] != new_hh_str[i]:\\n                    hh_diff += 1\\n                if mm_str[i] != new_mm_str[i]:\\n                    mm_diff += 1\\n            \\n            total_diff = hh_diff + mm_diff\\n            if total_diff < min_diff:\\n                min_diff = total_diff\\n                best_hh = new_hh\\n                best_mm = new_mm\\n    \\n    best_hh_str = str(best_hh).zfill(2) if format_type == 24 else str(best_hh).zfill(2) if best_hh <= 12 and best_hh >=1 else str(best_hh).zfill(2) if best_hh == 0 else str(best_hh).zfill(2)\\n    best_mm_str = str(best_mm).zfill(2)\\n    print(f'{best_hh_str}:{best_mm_str}')\\n\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    format_type = int(input())\\n    time_str = input()\\n    hours_str = time_str[:2]\\n    minutes_str = time_str[3:]\\n\\n    hours = int(hours_str)\\n    minutes = int(minutes_str)\\n\\n    best_hours = hours_str\\n    best_minutes = minutes_str\\n    min_diff = float('inf')\\n\\n    for h in range(24 if format_type == 24 else 1, 25 if format_type == 24 else 13):\\n        if format_type == 12 and h == 0:\\n            continue\\n        h_str = str(h).zfill(2) if format_type == 24 else str(h if h <= 12 else h - 12).zfill(2)\\n        for m in range(60):\\n            m_str = str(m).zfill(2)\\n            diff = 0\\n            for i in range(2):\\n                if h_str[i] != hours_str[i]:\\n                    diff += 1\\n            for i in range(2):\\n                if m_str[i] != minutes_str[i]:\\n                    diff += 1\\n            if diff < min_diff:\\n                min_diff = diff\\n                best_hours = h_str\\n                best_minutes = m_str\\n            elif diff == min_diff:\\n                pass\\n\\n    print(f'{best_hours}:{best_minutes}')\\n\\nsolve()\\n\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    format_type = int(input())\\n    time_str = input()\\n    hh_str = time_str[0:2]\\n    mm_str = time_str[3:5]\\n\\n    hh = int(hh_str)\\n    mm = int(mm_str)\\n\\n    best_hh = hh\\n    best_mm = mm\\n    min_diff = float('inf')\\n\\n    for new_hh in range(24 if format_type == 24 else 1, 25 if format_type == 24 else 13):\\n        if format_type == 12 and new_hh == 0:\\n            continue\\n        if format_type == 12 and new_hh > 12:\\n            continue\\n        for new_mm in range(60):\\n            hh_diff = 0\\n            mm_diff = 0\\n            new_hh_str = str(new_hh).zfill(2)\\n            new_mm_str = str(new_mm).zfill(2)\\n\\n            for i in range(2):\\n                if hh_str[i] != new_hh_str[i]:\\n                    hh_diff += 1\\n                if mm_str[i] != new_mm_str[i]:\\n                    mm_diff += 1\\n            \\n            total_diff = hh_diff + mm_diff\\n            if total_diff < min_diff:\\n                min_diff = total_diff\\n                best_hh = new_hh\\n                best_mm = new_mm\\n    \\n    best_hh_str = str(best_hh).zfill(2) if format_type == 24 else str(best_hh).zfill(2) if best_hh <= 12 and best_hh >=1 else str(best_hh).zfill(2) if best_hh == 0 else str(best_hh).zfill(2)\\n    best_mm_str = str(best_mm).zfill(2)\\n    print(f'{best_hh_str}:{best_mm_str}')\\n\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    format_type = int(input())\\n    time_str = input()\\n    hours_str = time_str[:2]\\n    minutes_str = time_str[3:]\\n\\n    hours = int(hours_str)\\n    minutes = int(minutes_str)\\n\\n    best_hours = hours_str\\n    best_minutes = minutes_str\\n    min_diff = float('inf')\\n\\n    for h in range(24 if format_type == 24 else 1, 25 if format_type == 24 else 13):\\n        if format_type == 12 and h == 0:\\n            continue\\n        h_str = str(h).zfill(2) if format_type == 24 else str(h if h <= 12 else h - 12).zfill(2)\\n        for m in range(60):\\n            m_str = str(m).zfill(2)\\n            diff = 0\\n            for i in range(2):\\n                if h_str[i] != hours_str[i]:\\n                    diff += 1\\n            for i in range(2):\\n                if m_str[i] != minutes_str[i]:\\n                    diff += 1\\n            if diff < min_diff:\\n                min_diff = diff\\n                best_hours = h_str\\n                best_minutes = m_str\\n            elif diff == min_diff:\\n                pass\\n\\n    print(f'{best_hours}:{best_minutes}')\\n\\nsolve()\\n\"\n  }\n]\n```"}
{"description":"Little Chris knows there's no fun in playing dominoes, he thinks it's too random and doesn't require skill. Instead, he decided to play with the dominoes and make a \"domino show\".Chris arranges n dominoes in a line, placing each piece vertically upright. In the beginning, he simultaneously pushes some of the dominoes either to the left or to the right. However, somewhere between every two dominoes pushed in the same direction there is at least one domino pushed in the opposite direction.After each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right. When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces. The figure shows one possible example of the process.  Given the initial directions Chris has pushed the dominoes, find the number of the dominoes left standing vertically at the end of the process!","input_specification":"The first line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u20093000), the number of the dominoes in the line. The next line contains a character string s of length n. The i-th character of the string si is equal to    \"L\", if the i-th domino has been pushed to the left;  \"R\", if the i-th domino has been pushed to the right;  \".\", if the i-th domino has not been pushed.  It is guaranteed that if si\u2009=\u2009sj\u2009=\u2009\"L\" and i\u2009&lt;\u2009j, then there exists such k that i\u2009&lt;\u2009k\u2009&lt;\u2009j and sk\u2009=\u2009\"R\"; if si\u2009=\u2009sj\u2009=\u2009\"R\" and i\u2009&lt;\u2009j, then there exists such k that i\u2009&lt;\u2009k\u2009&lt;\u2009j and sk\u2009=\u2009\"L\".","output_specification":"Output a single integer, the number of the dominoes that remain vertical at the end of the process.","notes":"NoteThe first example case is shown on the figure. The four pieces that remain standing vertically are highlighted with orange.In the second example case, all pieces fall down since the first piece topples all the other pieces.In the last example case, a single piece has not been pushed in either direction.","sample_inputs":["14\n.L.R...LR..L..","5\nR....","1\n."],"sample_outputs":["4","0","1"],"src_uid":"54c748dd983b6a0ea1af1153d08f1c01","lang_cluster":"Python","difficulty":1100,"human_solution":"n = int(input())\ns = input()\ns = list(s)\nv = 0\nwhile(True):\n    lExits = False\n    rExits = False\n    if ('L' in s):\n        l = s.index('L')\n        lExits = True\n    if ('R' in s):\n        r = s.index('R')\n        rExits = True\n    if (lExits == False and rExits == False):\n        break\n    if (lExits == True and rExits == False):\n        for i in range(l+1):\n            s[i] = 'F'\n        break\n    if (lExits == False and rExits == True):\n        for i in range(r,n):\n            s[i] = 'F'\n        break\n    if (lExits == True and rExits == True):\n        if (l < r):\n            for i in range(l+1):\n                s[i] = 'F'\n        else:\n            for i in range(r,l+1):\n                s[i] = 'F'\n            if ((l - r) % 2 == 0):\n                s[r] = '.'\nc = 0\nfor i in s:\n    if (i == '.'):\n        c += 1\nprint(c)\n    \n","testcases":"[{'input': '1\\r\\n.\\r\\n', 'output': ['1\\r\\n']}, {'input': '1\\r\\nL\\r\\n', 'output': ['0\\r\\n']}, {'input': '1\\r\\nR\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\nL.\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nRL\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n..\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n..L.RL\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nLR\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n.R\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\nR.\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n.L\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nRLR\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nLRL\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n.L.R.\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n.R.L.\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\nRL.RL\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\nL.R\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\nR..\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n..RL.\\r\\n', 'output': ['3\\r\\n']}, {'input': '4\\r\\n.LR.\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\nL..\\r\\n', 'output': ['2\\r\\n']}]","id":123,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    s = input()\\n    dominoes = list(s)\\n    \\n    while True:\\n        changed = False\\n        new_dominoes = dominoes[:]\\n        for i in range(n):\\n            if dominoes[i] == '.':\\n                if i > 0 and dominoes[i-1] == 'R' and (i == n-1 or dominoes[i+1] == '.' or dominoes[i+1] == 'R'):\\n                    new_dominoes[i] = 'R'\\n                    changed = True\\n                elif i < n-1 and dominoes[i+1] == 'L' and (i == 0 or dominoes[i-1] == '.' or dominoes[i-1] == 'L'):\\n                    new_dominoes[i] = 'L'\\n                    changed = True\\n        dominoes = new_dominoes\\n        if not changed:\\n            break\\n            \\n    print(dominoes.count('.'))\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n = int(raw_input())\\n    s = raw_input()\\n    dominoes = list(s)\\n    \\n    while True:\\n        changed = False\\n        new_dominoes = dominoes[:]\\n        for i in range(n):\\n            if dominoes[i] == '.':\\n                if i > 0 and dominoes[i-1] == 'R' and (i == n-1 or dominoes[i+1] == '.' or dominoes[i+1] == 'R'):\\n                    new_dominoes[i] = 'R'\\n                    changed = True\\n                elif i < n-1 and dominoes[i+1] == 'L' and (i == 0 or dominoes[i-1] == '.' or dominoes[i-1] == 'L'):\\n                    new_dominoes[i] = 'L'\\n                    changed = True\\n        dominoes = new_dominoes\\n        if not changed:\\n            break\\n            \\n    print dominoes.count('.')\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    s = input()\\n    dominoes = list(s)\\n    \\n    while True:\\n        changed = False\\n        new_dominoes = dominoes[:]\\n        for i in range(n):\\n            if dominoes[i] == '.':\\n                if i > 0 and dominoes[i-1] == 'R' and (i == n-1 or dominoes[i+1] != 'L'):\\n                    new_dominoes[i] = 'R'\\n                    changed = True\\n                elif i < n-1 and dominoes[i+1] == 'L' and (i == 0 or dominoes[i-1] != 'R'):\\n                    new_dominoes[i] = 'L'\\n                    changed = True\\n        dominoes = new_dominoes\\n        if not changed:\\n            break\\n    \\n    count = dominoes.count('.')\\n    print(count)\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    s = input()\\n    dominoes = list(s)\\n    \\n    while True:\\n        changed = False\\n        new_dominoes = dominoes[:]\\n        for i in range(n):\\n            if dominoes[i] == '.':\\n                if i > 0 and dominoes[i-1] == 'R' and (i == n-1 or dominoes[i+1] == '.' or dominoes[i+1] == 'R'):\\n                    new_dominoes[i] = 'R'\\n                    changed = True\\n                elif i < n-1 and dominoes[i+1] == 'L' and (i == 0 or dominoes[i-1] == '.' or dominoes[i-1] == 'L'):\\n                    new_dominoes[i] = 'L'\\n                    changed = True\\n        dominoes = new_dominoes\\n        if not changed:\\n            break\\n            \\n    print(dominoes.count('.'))\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n = int(raw_input())\\n    s = raw_input()\\n    dominoes = list(s)\\n    \\n    while True:\\n        changed = False\\n        new_dominoes = dominoes[:]\\n        for i in range(n):\\n            if dominoes[i] == '.':\\n                if i > 0 and dominoes[i-1] == 'R' and (i == n-1 or dominoes[i+1] == '.' or dominoes[i+1] == 'R'):\\n                    new_dominoes[i] = 'R'\\n                    changed = True\\n                elif i < n-1 and dominoes[i+1] == 'L' and (i == 0 or dominoes[i-1] == '.' or dominoes[i-1] == 'L'):\\n                    new_dominoes[i] = 'L'\\n                    changed = True\\n        dominoes = new_dominoes\\n        if not changed:\\n            break\\n            \\n    print dominoes.count('.')\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    s = input()\\n    dominoes = list(s)\\n    \\n    while True:\\n        changed = False\\n        new_dominoes = dominoes[:]\\n        for i in range(n):\\n            if dominoes[i] == '.':\\n                if i > 0 and dominoes[i-1] == 'R' and (i == n-1 or dominoes[i+1] != 'L'):\\n                    new_dominoes[i] = 'R'\\n                    changed = True\\n                elif i < n-1 and dominoes[i+1] == 'L' and (i == 0 or dominoes[i-1] != 'R'):\\n                    new_dominoes[i] = 'L'\\n                    changed = True\\n        dominoes = new_dominoes\\n        if not changed:\\n            break\\n    \\n    count = dominoes.count('.')\\n    print(count)\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"\"Hey, it's homework time\" \u2014 thought Polycarpus and of course he started with his favourite subject, IT. Polycarpus managed to solve all tasks but for the last one in 20 minutes. However, as he failed to solve the last task after some considerable time, the boy asked you to help him.The sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once.You are given an arbitrary sequence a1,\u2009a2,\u2009...,\u2009an containing n integers. Each integer is not less than 1 and not greater than 5000. Determine what minimum number of elements Polycarpus needs to change to get a permutation (he should not delete or add numbers). In a single change he can modify any single sequence element (i. e. replace it with another integer).","input_specification":"The first line of the input data contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u20095000) which represents how many numbers are in the sequence. The second line contains a sequence of integers ai (1\u2009\u2264\u2009ai\u2009\u2264\u20095000,\u20091\u2009\u2264\u2009i\u2009\u2264\u2009n).","output_specification":"Print the only number \u2014 the minimum number of changes needed to get the permutation.","notes":"NoteThe first sample contains the permutation, which is why no replacements are required.In the second sample it is enough to replace the first element with the number 1 and that will make the sequence the needed permutation.In the third sample we can replace the second element with number 4 and the fourth element with number 2.","sample_inputs":["3\n3 1 2","2\n2 2","5\n5 3 3 3 1"],"sample_outputs":["0","1","2"],"src_uid":"bdd86c8bc54bbac6e2bb5a9d68b6eb1c","lang_cluster":"Python","difficulty":1000,"human_solution":"# prob B\n\nn = input()\nseq = raw_input()\n\nseq = [int(i) for i in seq.split()]\nseq.sort()\n\ntot = 0\nright_seq = range(1, n+1)\nfor num in seq:\n    if num in right_seq:\n        right_seq.remove(num)\n    else:\n        tot += 1\n\nprint tot\n","testcases":"[{'input': '3\\r\\n3 1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n2 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n5 3 3 3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '5\\r\\n6 6 6 6 6\\r\\n', 'output': ['5\\r\\n']}, {'input': '10\\r\\n1 1 2 2 8 8 7 7 9 9\\r\\n', 'output': ['5\\r\\n']}, {'input': '8\\r\\n9 8 7 6 5 4 3 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '15\\r\\n1 2 3 4 5 5 4 3 2 1 1 2 3 4 5\\r\\n', 'output': ['10\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['0\\r\\n']}, {'input': '1\\r\\n5000\\r\\n', 'output': ['1\\r\\n']}, {'input': '4\\r\\n5000 5000 5000 5000\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n3366 3461 4 5 4370\\r\\n', 'output': ['3\\r\\n']}, {'input': '10\\r\\n8 2 10 3 4 6 1 7 9 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '10\\r\\n551 3192 3213 2846 3068 1224 3447 1 10 9\\r\\n', 'output': ['7\\r\\n']}, {'input': '15\\r\\n4 1459 12 4281 3241 2748 10 3590 14 845 3518 1721 2 2880 1974\\r\\n', 'output': ['10\\r\\n']}, {'input': '15\\r\\n15 1 8 2 13 11 12 7 3 14 6 10 9 4 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '15\\r\\n2436 2354 4259 1210 2037 2665 700 3578 2880 973 1317 1024 24 3621 4142\\r\\n', 'output': ['15\\r\\n']}, {'input': '30\\r\\n28 1 3449 9 3242 4735 26 3472 15 21 2698 7 4073 3190 10 3 29 1301 4526 22 345 3876 19 12 4562 2535 2 630 18 27\\r\\n', 'output': ['14\\r\\n']}, {'input': '100\\r\\n50 39 95 30 66 78 2169 4326 81 31 74 34 80 40 19 48 97 63 82 6 88 16 21 57 92 77 10 1213 17 93 32 91 38 4375 29 75 44 22 4 45 14 2395 3254 59 3379 2 85 96 8 83 27 94 1512 2960 100 9 73 79 7 25 55 69 90 99 51 87 98 62 18 35 43 4376 4668 28 72 56 4070 61 65 36 54 4106 11 24 15 86 70 71 4087 23 13 76 20 4694 26 4962 4726 37 14 64\\r\\n', 'output': ['18\\r\\n']}, {'input': '100\\r\\n340 14 3275 2283 2673 1107 817 2243 1226 32 2382 3638 4652 418 68 4962 387 764 4647 159 1846 225 2760 4904 3150 403 3 2439 91 4428 92 4705 75 348 1566 1465 69 6 49 4 62 4643 564 1090 3447 1871 2255 139 24 99 2669 969 86 61 4550 158 4537 3993 1589 872 2907 1888 401 80 1825 1483 63 1 2264 4068 4113 2548 41 885 4806 36 67 167 4447 34 1248 2593 82 202 81 1783 1284 4973 16 43 95 7 865 2091 3008 1793 20 947 4912 3604\\r\\n', 'output': ['70\\r\\n']}, {'input': '1\\r\\n2\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n5000 5000\\r\\n', 'output': ['2\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n1 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n2 3\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n3 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n1 2 3 4 5 6 7 1000 10 10\\r\\n', 'output': ['2\\r\\n']}]","id":124,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\n\\ncount = 0\\nseen = [False] * (n + 1)\\n\\nfor x in a:\\n    if 1 <= x <= n and not seen[x]:\\n        seen[x] = True\\n\\nfor x in a:\\n    if 1 <= x <= n and not seen[x]:\\n        count += 1\\n\\nprint(n - sum(seen[1:]))\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\n\\ncount = 0\\nseen = [False] * (n + 1)\\n\\nfor x in a:\\n    if 1 <= x <= n and not seen[x]:\\n        seen[x] = True\\n\\nfor x in a:\\n    if not (1 <= x <= n and seen[x]):\\n        count += 1\\n\\nprint(count)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\na = map(int, raw_input().split())\\n\\ncount = 0\\nseen = [False] * (n + 1)\\n\\nfor x in a:\\n    if 1 <= x <= n and not seen[x]:\\n        seen[x] = True\\n\\nfor x in a:\\n    if not (1 <= x <= n and seen[x]):\\n        count += 1\\n\\nprint count\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\n\\ncount = 0\\nseen = [False] * (n + 1)\\n\\nfor x in a:\\n    if 1 <= x <= n and not seen[x]:\\n        seen[x] = True\\n\\nfor x in a:\\n    if 1 <= x <= n and not seen[x]:\\n        count += 1\\n\\nprint(n - sum(seen[1:]))\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\n\\ncount = 0\\nseen = [False] * (n + 1)\\n\\nfor x in a:\\n    if 1 <= x <= n and not seen[x]:\\n        seen[x] = True\\n\\nfor x in a:\\n    if not (1 <= x <= n and seen[x]):\\n        count += 1\\n\\nprint(count)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\na = map(int, raw_input().split())\\n\\ncount = 0\\nseen = [False] * (n + 1)\\n\\nfor x in a:\\n    if 1 <= x <= n and not seen[x]:\\n        seen[x] = True\\n\\nfor x in a:\\n    if not (1 <= x <= n and seen[x]):\\n        count += 1\\n\\nprint count\"\n  }\n]\n```"}
{"description":"Petya loves football very much, especially when his parents aren't home. Each morning he comes to the yard, gathers his friends and they play all day. From time to time they have a break to have some food or do some chores (for example, water the flowers).The key in football is to divide into teams fairly before the game begins. There are n boys playing football in the yard (including Petya), each boy's football playing skill is expressed with a non-negative characteristic ai (the larger it is, the better the boy plays). Let's denote the number of players in the first team as x, the number of players in the second team as y, the individual numbers of boys who play for the first team as pi and the individual numbers of boys who play for the second team as qi. Division n boys into two teams is considered fair if three conditions are fulfilled:  Each boy plays for exactly one team (x\u2009+\u2009y\u2009=\u2009n).  The sizes of teams differ in no more than one (|x\u2009-\u2009y|\u2009\u2264\u20091).  The total football playing skills for two teams differ in no more than by the value of skill the best player in the yard has. More formally: Your task is to help guys divide into two teams fairly. It is guaranteed that a fair division into two teams always exists.","input_specification":"The first line contains the only integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009105) which represents the number of guys in the yard. The next line contains n positive space-separated integers, ai (1\u2009\u2264\u2009ai\u2009\u2264\u2009104), the i-th number represents the i-th boy's playing skills. ","output_specification":"On the first line print an integer x \u2014 the number of boys playing for the first team. On the second line print x integers \u2014 the individual numbers of boys playing for the first team. On the third line print an integer y \u2014 the number of boys playing for the second team, on the fourth line print y integers \u2014 the individual numbers of boys playing for the second team. Don't forget that you should fulfil all three conditions: x\u2009+\u2009y\u2009=\u2009n, |x\u2009-\u2009y|\u2009\u2264\u20091, and the condition that limits the total skills. If there are multiple ways to solve the problem, print any of them. The boys are numbered starting from one in the order in which their skills are given in the input data. You are allowed to print individual numbers of boys who belong to the same team in any order.","notes":"NoteLet's consider the first sample test. There we send the first and the second boy to the first team and the third boy to the second team. Let's check all three conditions of a fair division. The first limitation is fulfilled (all boys play), the second limitation on the sizes of groups (|2\u2009-\u20091|\u2009=\u20091\u2009\u2264\u20091) is fulfilled, the third limitation on the difference in skills ((2\u2009+\u20091)\u2009-\u2009(1)\u2009=\u20092\u2009\u2264\u20092) is fulfilled.","sample_inputs":["3\n1 2 1","5\n2 3 3 1 1"],"sample_outputs":["2\n1 2 \n1\n3","3\n4 1 3 \n2\n5 2"],"src_uid":"0937a7e2f912fc094cc4275fd47cd457","lang_cluster":"Python","difficulty":1500,"human_solution":"n = int(input())\na = list(map(int, input().split()))\nall = []\nfor i in range(n):\n    all.append([a[i], i + 1])\n\nall.sort(key = lambda x: x[0])\n\nteam_1 = []\nteam_2 = []\nfor i in range(n):\n    if i % 2 == 0:\n        team_1.append(all[i][1])\n    else:\n        team_2.append(all[i][1])\n\nprint(len(team_1))\nprint(*team_1)\nprint(len(team_2))\nprint(*team_2)","testcases":"[{'input': '3\\r\\n1 2 1\\r\\n', 'output': ['2\\r\\n1 2 \\r\\n1\\r\\n3 \\r\\n']}, {'input': '5\\r\\n2 3 3 1 1\\r\\n', 'output': ['3\\r\\n4 1 3 \\r\\n2\\r\\n5 2 \\r\\n']}, {'input': '10\\r\\n2 2 2 2 2 2 2 1 2 2\\r\\n', 'output': ['5\\r\\n8 2 4 6 9 \\r\\n5\\r\\n1 3 5 7 10 \\r\\n']}, {'input': '10\\r\\n2 3 3 1 3 1 1 1 2 2\\r\\n', 'output': ['5\\r\\n4 7 1 10 3 \\r\\n5\\r\\n6 8 9 2 5 \\r\\n']}, {'input': '10\\r\\n2 3 2 3 3 1 1 3 1 1\\r\\n', 'output': ['5\\r\\n6 9 1 2 5 \\r\\n5\\r\\n7 10 3 4 8 \\r\\n']}, {'input': '11\\r\\n1 3 1 2 1 2 2 2 1 1 1\\r\\n', 'output': ['6\\r\\n1 5 10 4 7 2 \\r\\n5\\r\\n3 9 11 6 8 \\r\\n']}, {'input': '11\\r\\n54 83 96 75 33 27 36 35 26 22 77\\r\\n', 'output': ['6\\r\\n10 6 8 1 11 3 \\r\\n5\\r\\n9 5 7 4 2 \\r\\n']}, {'input': '11\\r\\n1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['6\\r\\n1 3 5 7 9 11 \\r\\n5\\r\\n2 4 6 8 10 \\r\\n']}, {'input': '2\\r\\n1 1\\r\\n', 'output': ['1\\r\\n1 \\r\\n1\\r\\n2 \\r\\n']}, {'input': '2\\r\\n35 36\\r\\n', 'output': ['1\\r\\n1 \\r\\n1\\r\\n2 \\r\\n']}, {'input': '25\\r\\n1 2 2 1 2 2 2 2 2 1 1 2 2 2 2 2 1 2 2 2 1 1 2 2 1\\r\\n', 'output': ['13\\r\\n1 10 17 22 2 5 7 9 13 15 18 20 24 \\r\\n12\\r\\n4 11 21 25 3 6 8 12 14 16 19 23 \\r\\n']}, {'input': '27\\r\\n2 1 1 3 1 2 1 1 3 2 3 1 3 2 1 3 2 3 2 1 2 3 2 2 1 2 1\\r\\n', 'output': ['14\\r\\n2 5 8 15 25 1 10 17 21 24 4 11 16 22 \\r\\n13\\r\\n3 7 12 20 27 6 14 19 23 26 9 13 18 \\r\\n']}, {'input': '30\\r\\n2 2 2 3 4 3 4 4 3 2 3 2 2 4 1 4 2 4 2 2 1 4 3 2 1 3 1 1 4 3\\r\\n', 'output': ['15\\r\\n15 25 28 2 10 13 19 24 6 11 26 5 8 16 22 \\r\\n15\\r\\n21 27 1 3 12 17 20 4 9 23 30 7 14 18 29 \\r\\n']}, {'input': '100\\r\\n3 4 8 10 8 6 4 3 7 7 6 2 3 1 3 10 1 7 9 3 5 5 2 6 2 9 1 7 4 2 4 1 6 1 7 10 2 5 3 7 6 4 6 2 8 8 8 6 6 10 3 7 4 3 4 1 7 9 3 6 3 6 1 4 9 3 8 1 10 1 4 10 7 7 9 5 3 8 10 2 1 10 8 7 10 8 5 3 1 2 1 10 6 1 5 3 3 5 7 2\\r\\n', 'output': ['50\\r\\n14 27 34 63 70 89 94 23 30 44 90 1 13 20 51 59 66 88 97 7 31 53 64 21 38 87 98 11 33 43 49 62 9 18 35 52 73 84 3 45 47 78 86 26 65 4 36 69 79 85 \\r\\n50\\r\\n17 32 56 68 81 91 12 25 37 80 100 8 15 39 54 61 77 96 2 29 42 55 71 22 76 95 6 24 41 48 60 93 10 28 40 57 74 99 5 46 67 83 19 58 75 16 50 72 82 92 \\r\\n']}, {'input': '100\\r\\n85 50 17 89 65 89 5 20 86 26 16 21 85 14 44 31 87 31 6 2 48 67 8 80 79 1 48 36 97 1 5 30 79 50 78 12 2 55 76 100 54 40 26 81 97 96 68 56 87 14 51 17 54 37 52 33 69 62 38 63 74 15 62 78 9 19 67 2 60 58 93 60 18 96 55 48 34 7 79 82 32 58 90 67 20 50 27 15 7 89 98 10 11 15 99 49 4 51 77 52\\r\\n', 'output': ['50\\r\\n26 20 68 7 19 89 65 93 14 62 94 3 73 8 12 43 32 18 56 28 59 15 27 96 34 51 55 41 38 48 82 72 63 5 67 47 61 99 64 33 24 80 13 17 4 90 71 74 45 95 \\r\\n50\\r\\n30 37 97 31 78 23 92 36 50 88 11 52 66 85 10 87 16 81 77 54 42 21 76 2 86 98 100 53 75 70 69 58 60 22 84 57 39 35 25 79 44 1 9 49 6 83 46 29 91 40 \\r\\n']}, {'input': '100\\r\\n2382 7572 9578 1364 2325 2929 7670 5574 2836 2440 6553 1751 929 8785 6894 9373 9308 7338 6380 9541 9951 6785 8993 9942 5087 7544 6582 7139 8458 7424 9759 8199 9464 8817 7625 6200 4955 9373 9500 3062 849 4210 9337 5466 2190 8150 4971 3145 869 5675 1975 161 1998 378 5229 9000 8958 761 358 434 7636 8295 4406 73 375 812 2473 3652 9067 3052 5287 2850 6987 5442 2625 8894 8733 791 9763 5258 8259 9530 2050 7334 2118 2726 8221 5527 8827 1585 8334 8898 6399 6217 7400 2576 5164 9063 6247 9433\\r\\n', 'output': ['50\\r\\n64 59 54 58 66 49 4 12 53 85 5 10 96 86 72 70 48 42 37 25 55 71 44 8 36 99 93 27 15 28 18 30 2 61 46 87 62 29 14 89 92 23 98 17 16 100 39 20 31 24 \\r\\n50\\r\\n52 65 60 78 41 13 90 51 83 45 1 67 75 9 6 40 68 63 47 97 80 74 88 50 94 19 11 22 73 84 95 26 35 7 32 81 91 77 34 76 57 56 69 43 38 33 82 3 79 21 \\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n', 'output': ['2\\r\\n1 3 \\r\\n1\\r\\n2 \\r\\n']}, {'input': '3\\r\\n10 10 10\\r\\n', 'output': ['2\\r\\n1 3 \\r\\n1\\r\\n2 \\r\\n']}, {'input': '3\\r\\n5 10 10\\r\\n', 'output': ['2\\r\\n1 3 \\r\\n1\\r\\n2 \\r\\n']}, {'input': '5\\r\\n6 1 1 1 1\\r\\n', 'output': ['3\\r\\n2 4 1 \\r\\n2\\r\\n3 5 \\r\\n']}, {'input': '5\\r\\n1 100 2 200 3\\r\\n', 'output': ['3\\r\\n1 5 4 \\r\\n2\\r\\n3 2 \\r\\n']}]","id":125,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\n\\nboys = []\\nfor i in range(n):\\n    boys.append((a[i], i + 1))\\n\\nboys.sort()\\n\\nteam1 = []\\nteam2 = []\\n\\nfor i in range(n):\\n    if i % 2 == 0:\\n        team1.append(boys[i][1])\\n    else:\\n        team2.append(boys[i][1])\\n\\nx = len(team1)\\ny = len(team2)\\n\\nprint(x)\\nprint(*team1)\\nprint(y)\\nprint(*team2)\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\n\\nplayers = []\\nfor i in range(n):\\n    players.append((a[i], i + 1))\\n\\nplayers.sort()\\n\\nteam1 = []\\nteam2 = []\\n\\nfor i in range(n):\\n    if i % 2 == 0:\\n        team1.append(players[i][1])\\n    else:\\n        team2.append(players[i][1])\\n\\nx = len(team1)\\ny = len(team2)\\n\\nprint(x)\\nprint(*team1)\\nprint(y)\\nprint(*team2)\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\n\\nboys = []\\nfor i in range(n):\\n    boys.append((a[i], i + 1))\\n\\nboys.sort()\\n\\nteam1 = []\\nteam2 = []\\n\\nfor i in range(n):\\n    if i % 2 == 0:\\n        team1.append(boys[i][1])\\n    else:\\n        team2.append(boys[i][1])\\n\\nx = len(team1)\\ny = len(team2)\\n\\nprint(x)\\nprint(*team1)\\nprint(y)\\nprint(*team2)\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\n\\nplayers = []\\nfor i in range(n):\\n    players.append((a[i], i + 1))\\n\\nplayers.sort()\\n\\nteam1 = []\\nteam2 = []\\n\\nfor i in range(n):\\n    if i % 2 == 0:\\n        team1.append(players[i][1])\\n    else:\\n        team2.append(players[i][1])\\n\\nx = len(team1)\\ny = len(team2)\\n\\nprint(x)\\nprint(*team1)\\nprint(y)\\nprint(*team2)\"\n  }\n]\n```"}
{"description":"One day little Vasya found mom's pocket book. The book had n names of her friends and unusually enough, each name was exactly m letters long. Let's number the names from 1 to n in the order in which they are written.As mom wasn't home, Vasya decided to play with names: he chose three integers i, j, k (1\u2009\u2264\u2009i\u2009&lt;\u2009j\u2009\u2264\u2009n, 1\u2009\u2264\u2009k\u2009\u2264\u2009m), then he took names number i and j and swapped their prefixes of length k. For example, if we take names \"CBDAD\" and \"AABRD\" and swap their prefixes with the length of 3, the result will be names \"AABAD\" and \"CBDRD\".You wonder how many different names Vasya can write instead of name number 1, if Vasya is allowed to perform any number of the described actions. As Vasya performs each action, he chooses numbers i, j, k independently from the previous moves and his choice is based entirely on his will. The sought number can be very large, so you should only find it modulo 1000000007 (109\u2009+\u20097).","input_specification":"The first input line contains two integers n and m (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u2009100) \u2014 the number of names and the length of each name, correspondingly. Then n lines contain names, each name consists of exactly m uppercase Latin letters.","output_specification":"Print the single number \u2014 the number of different names that could end up in position number 1 in the pocket book after the applying the procedures described above. Print the number modulo 1000000007 (109\u2009+\u20097).","notes":"NoteIn the first sample Vasya can get the following names in the position number 1: \"AAB\", \"AAA\", \"BAA\" and \"BAB\".","sample_inputs":["2 3\nAAB\nBAA","4 5\nABABA\nBCGDG\nAAAAA\nYABSA"],"sample_outputs":["4","216"],"src_uid":"a37df9b239a40473516d1525d56a0da7","lang_cluster":"Python","difficulty":1400,"human_solution":"n, m = map(int, raw_input().split())\n\nnomes = []\n\nfor i in xrange(n):\n\tentrada = raw_input()\n\tnomes.append(entrada)\n\ntotal = 1\n\nfor k in xrange(m):\n\t\n\tparcial = [nomes[0][k]]\n\tfor l in xrange(1, n):\n\t\t\n\t\tif(nomes[l][k] not in parcial):\n\t\t\tparcial.append(nomes[l][k])\n\t\t\t\n\ttotal *= len(parcial)\n\t\nprint total % 1000000007","testcases":"[{'input': '2 3\\r\\nAAB\\r\\nBAA\\r\\n', 'output': ['4\\r\\n']}, {'input': '4 5\\r\\nABABA\\r\\nBCGDG\\r\\nAAAAA\\r\\nYABSA\\r\\n', 'output': ['216\\r\\n']}, {'input': '1 1\\r\\nE\\r\\n', 'output': ['1\\r\\n']}, {'input': '2 2\\r\\nNS\\r\\nPD\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 4\\r\\nPJKD\\r\\nNFJX\\r\\nFGFK\\r\\n', 'output': ['81\\r\\n']}, {'input': '4 5\\r\\nSXFMY\\r\\nATHLM\\r\\nKDDQW\\r\\nZWGDS\\r\\n', 'output': ['1024\\r\\n']}, {'input': '20 14\\r\\nJNFKBBBJYZHWQE\\r\\nLBOKZCPFNKDBJY\\r\\nXKNWGHQHIOXUPF\\r\\nDDNRUKVUGHWMXW\\r\\nMTIZFNAAFEAPHX\\r\\nIXBQOOHEULZYHU\\r\\nMRCSREUEOOMUUN\\r\\nHJTSQWKUFYZDQU\\r\\nGMCMUZCOPRVEIQ\\r\\nXBKKGGJECOBLTH\\r\\nXXHTLXCNJZJUAF\\r\\nVLJRKXXXWMTPKZ\\r\\nPTYMNPTBBCWKAD\\r\\nQYJGOBUBHMEDYE\\r\\nGTKUUVVNKAHTUI\\r\\nZNKXYZPCYLBZFP\\r\\nQCBLJTRMBDWNNE\\r\\nTDOKJOBKEOVNLZ\\r\\nFKZUITYAFJOQIM\\r\\nUWQNSGLXEEIRWF\\r\\n', 'output': ['515139391\\r\\n']}, {'input': '5 14\\r\\nAQRXUQQNSKZPGC\\r\\nDTTKSPFGGVCLPT\\r\\nVLZQWWESCHDTAZ\\r\\nCOKOWDWDRUOMHP\\r\\nXDTRBIZTTCIDGS\\r\\n', 'output': ['124999979\\r\\n']}, {'input': '9 23\\r\\nOILBYKHRGMPENVFNHLSIUOW\\r\\nLPJFHTUQUINAALRDGLSQUXR\\r\\nLYYJJEBNZATAFQWTDZSPUNZ\\r\\nHSJPIQKKWWERJZIEMLCZUKI\\r\\nOJYIEYDGPFWRHCMISJCCUEM\\r\\nLMGKZVFYIVDRTIHBWPCNUTG\\r\\nUBGGNCITVHAIPKXCLTSAULQ\\r\\nOWSAWUOXQDBSXXBHTLSXUVD\\r\\nUGQTIZQPBGMASRQPVPSFUWK\\r\\n', 'output': ['454717784\\r\\n']}, {'input': '25 4\\r\\nLVKG\\r\\nMICU\\r\\nZHKW\\r\\nLFGG\\r\\nOWQO\\r\\nLCQG\\r\\nLVXU\\r\\nOUKB\\r\\nLNQX\\r\\nZJTO\\r\\nOOQX\\r\\nLVQP\\r\\nMFQB\\r\\nMRQV\\r\\nOIQH\\r\\nOPXX\\r\\nXFKU\\r\\nFCQB\\r\\nZPKH\\r\\nLVCH\\r\\nNFCU\\r\\nOVQW\\r\\nOZKU\\r\\nLFHX\\r\\nLPXO\\r\\n', 'output': ['5733\\r\\n']}, {'input': '30 10\\r\\nUTNTGOKZYJ\\r\\nQHOUHNYZVW\\r\\nLTVGHJRZVW\\r\\nMZHYHOLZYJ\\r\\nERYEUEPZYE\\r\\nUZDBFTURYJ\\r\\nRVSMQTIZGW\\r\\nWDJQHMIRYY\\r\\nKCORHQPZYE\\r\\nRRPLFOZZVY\\r\\nJTXMFNNNYJ\\r\\nMVTGGOZZVV\\r\\nEHAFFNUZVF\\r\\nLBRNWJZNYE\\r\\nJVMOHTPZYJ\\r\\nWTARFJLZVV\\r\\nLVJCWOURVW\\r\\nLCLQFJYRVV\\r\\nQVBVGNJRYF\\r\\nNTZGHOLRYE\\r\\nMGQKHOUPYJ\\r\\nRRSSBXPZYJ\\r\\nRYCRGTLZYJ\\r\\nJRDEGNKRVW\\r\\nRZKFGHYRVG\\r\\nMDJBFNIZYG\\r\\nMPLWHXIZYE\\r\\nSRZMHMURVE\\r\\nMTEBBMRZYJ\\r\\nJPJIFOLZYM\\r\\n', 'output': ['919913906\\r\\n']}, {'input': '40 7\\r\\nPNTVVER\\r\\nPAHTQDR\\r\\nRXMJVAS\\r\\nVIQNLYC\\r\\nILPUSVX\\r\\nYJOXQDJ\\r\\nSEFODTO\\r\\nOTJMREL\\r\\nLIQRZGD\\r\\nLBJJPOR\\r\\nRUTYHQO\\r\\nRIWEPBD\\r\\nKQUMFIB\\r\\nISTRRYH\\r\\nXBTOTGK\\r\\nRFQODEY\\r\\nHDSTZTP\\r\\nYCXFAGL\\r\\nAREGRFU\\r\\nLELZUYU\\r\\nGVABDKH\\r\\nFJAMMME\\r\\nACVULXE\\r\\nJHVPJAS\\r\\nAAQNMBX\\r\\nJJGUCXG\\r\\nOQATILQ\\r\\nNEOSHJM\\r\\nHFLWOFM\\r\\nICYEQHY\\r\\nFACGLYP\\r\\nPLLXJEQ\\r\\nDCHXYPB\\r\\nAGDDZJJ\\r\\nLSQRXTN\\r\\nHDQZXIY\\r\\nNAHDDWW\\r\\nQCMXRQN\\r\\nFDUDSZO\\r\\nHKBEVTW\\r\\n', 'output': ['206575993\\r\\n']}, {'input': '2 2\\r\\nAA\\r\\nBB\\r\\n', 'output': ['4\\r\\n']}, {'input': '1 10\\r\\nAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '2 8\\r\\nAAAAAAAA\\r\\nBBBBBBBB\\r\\n', 'output': ['256\\r\\n']}, {'input': '10 10\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\nCCCCCCCCCC\\r\\nDDDDDDDDDD\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\nCCCCCCCCCC\\r\\nDDDDDDDDDD\\r\\nAAAAAAAAAA\\r\\nBBBBBBBBBB\\r\\n', 'output': ['1048576\\r\\n']}, {'input': '1 20\\r\\nAAAAAAAAAAAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '20 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\n', 'output': ['7\\r\\n']}, {'input': '5 60\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\r\\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\r\\nDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\\r\\nEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\\r\\n', 'output': ['449874206\\r\\n']}, {'input': '50 4\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\nAAAA\\r\\nBBBB\\r\\nCCCC\\r\\nDDDD\\r\\nEEEE\\r\\nFFFF\\r\\nGGGG\\r\\nHHHH\\r\\nIIII\\r\\nJJJJ\\r\\n', 'output': ['10000\\r\\n']}, {'input': '1 100\\r\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\nA\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\nA\\r\\nB\\r\\n', 'output': ['2\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nA\\r\\nB\\r\\n', 'output': ['14\\r\\n']}, {'input': '100 1\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\nW\\r\\nX\\r\\nY\\r\\nZ\\r\\nA\\r\\nB\\r\\nC\\r\\nD\\r\\nE\\r\\nF\\r\\nG\\r\\nH\\r\\nI\\r\\nJ\\r\\nK\\r\\nL\\r\\nM\\r\\nN\\r\\nO\\r\\nP\\r\\nQ\\r\\nR\\r\\nS\\r\\nT\\r\\nU\\r\\nV\\r\\n', 'output': ['26\\r\\n']}]","id":126,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    names = [input() for _ in range(n)]\\n    \\n    first_name = names[0]\\n    possible_first_names = {first_name}\\n    \\n    for _ in range(1000):  # Iterate a reasonable number of times\\n        new_possible_names = set(possible_first_names)\\n        for i in range(n):\\n            for j in range(n):\\n                if i == j: continue\\n                for k in range(1, m + 1):\\n                    for name1 in possible_first_names:\\n                        if i == 0:\\n                            name2 = names[j]\\n                            new_name1 = name2[:k] + name1[k:]\\n                            if name1[:k] + names[j][k:] not in possible_first_names:\\n                                new_possible_names.add(new_name1)\\n                        \\n        if len(new_possible_names) == len(possible_first_names):\\n            break\\n        possible_first_names = new_possible_names\\n    \\n    print(len(possible_first_names) % 1000000007)\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    names = [input() for _ in range(n)]\\n    \\n    distinct_chars = [set() for _ in range(m)]\\n    for i in range(n):\\n        for j in range(m):\\n            distinct_chars[j].add(names[i][j])\\n    \\n    ans = 1\\n    mod = 1000000007\\n    for i in range(m):\\n        ans = (ans * len(distinct_chars[i])) % mod\\n    \\n    print(ans)\\n\\nsolve()\\n\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    names = [input() for _ in range(n)]\\n    \\n    first_name = names[0]\\n    possible_first_names = {first_name}\\n    \\n    for _ in range(1000):  # Iterate a reasonable number of times\\n        new_possible_names = set(possible_first_names)\\n        for i in range(n):\\n            for j in range(n):\\n                if i == j: continue\\n                for k in range(1, m + 1):\\n                    for name1 in possible_first_names:\\n                        if i == 0:\\n                            name2 = names[j]\\n                            new_name1 = name2[:k] + name1[k:]\\n                            if name1[:k] + names[j][k:] not in possible_first_names:\\n                                new_possible_names.add(new_name1)\\n                        \\n        if len(new_possible_names) == len(possible_first_names):\\n            break\\n        possible_first_names = new_possible_names\\n    \\n    print(len(possible_first_names) % 1000000007)\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    names = [input() for _ in range(n)]\\n    \\n    distinct_chars = [set() for _ in range(m)]\\n    for i in range(n):\\n        for j in range(m):\\n            distinct_chars[j].add(names[i][j])\\n    \\n    ans = 1\\n    mod = 1000000007\\n    for i in range(m):\\n        ans = (ans * len(distinct_chars[i])) % mod\\n    \\n    print(ans)\\n\\nsolve()\\n\"\n  }\n]\n```"}
{"description":"An African crossword is a rectangular table n\u2009\u00d7\u2009m in size. Each cell of the table contains exactly one letter. This table (it is also referred to as grid) contains some encrypted word that needs to be decoded.To solve the crossword you should cross out all repeated letters in rows and columns. In other words, a letter should only be crossed out if and only if the corresponding column or row contains at least one more letter that is exactly the same. Besides, all such letters are crossed out simultaneously.When all repeated letters have been crossed out, we should write the remaining letters in a string. The letters that occupy a higher position follow before the letters that occupy a lower position. If the letters are located in one row, then the letter to the left goes first. The resulting word is the answer to the problem.You are suggested to solve an African crossword and print the word encrypted there.","input_specification":"The first line contains two integers n and m (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u2009100). Next n lines contain m lowercase Latin letters each. That is the crossword grid.","output_specification":"Print the encrypted word on a single line. It is guaranteed that the answer consists of at least one letter.","notes":null,"sample_inputs":["3 3\ncba\nbcd\ncbc","5 5\nfcofd\nooedo\nafaoa\nrdcdf\neofsf"],"sample_outputs":["abcd","codeforces"],"src_uid":"9c90974a0bb860a5e180760042fd5045","lang_cluster":"Python","difficulty":1100,"human_solution":"n, m = list(map(int, input().strip().split()))\nA = [[0] * m] * n\n\n\nfor r in range(n):\n    A[r] = list(input().strip())\n\n\ndef in_row(A, r, c):\n    x = A[r][c]\n    left, right = A[r][:c], A[r][c + 1:]\n    if (x in left) or (x in right):\n        return True\n\n\ndef in_col(A, r, c):\n    x = A[r][c]\n    for row in range(n):\n        if row == r:\n            continue\n        if A[row][c] == x:\n            return True\n\nout = ''\nfor r in range(n):\n    for c in range(m):\n        if not in_row(A, r, c) and not in_col(A, r, c): \n            out += A[r][c]\n\nprint(out)","testcases":"[{'input': '3 3\\r\\ncba\\r\\nbcd\\r\\ncbc\\r\\n', 'output': ['abcd']}, {'input': '5 5\\r\\nfcofd\\r\\nooedo\\r\\nafaoa\\r\\nrdcdf\\r\\neofsf\\r\\n', 'output': ['codeforces']}, {'input': '4 4\\r\\nusah\\r\\nusha\\r\\nhasu\\r\\nsuha\\r\\n', 'output': ['ahhasusu']}, {'input': '7 5\\r\\naabcd\\r\\neffgh\\r\\niijkk\\r\\nlmnoo\\r\\npqqrs\\r\\nttuvw\\r\\nxxyyz\\r\\n', 'output': ['bcdeghjlmnprsuvwz']}, {'input': '10 10\\r\\naaaaaaaaaa\\r\\nbccceeeeee\\r\\ncdfffffffe\\r\\ncdfiiiiile\\r\\ncdfjjjjile\\r\\ndddddddile\\r\\nedfkkkkile\\r\\nedddddddde\\r\\ngggggggggg\\r\\nhhhhhhhhhe\\r\\n', 'output': ['b']}, {'input': '15 3\\r\\njhg\\r\\njkn\\r\\njui\\r\\nfth\\r\\noij\\r\\nyuf\\r\\nyfb\\r\\nugd\\r\\nhgd\\r\\noih\\r\\nhvc\\r\\nugg\\r\\nyvv\\r\\ntdg\\r\\nhgf\\r\\n', 'output': ['hkniftjfbctd']}, {'input': '17 19\\r\\nbmzbmweyydiadtlcoue\\r\\ngmdbyfwurpwbpuvhifn\\r\\nuapwyndmhtqvkgkbhty\\r\\ntszotwflegsjzzszfwt\\r\\nzfpnscguemwrczqxyci\\r\\nvdqnkypnxnnpmuduhzn\\r\\noaquudhavrncwfwujpc\\r\\nmiggjmcmkkbnjfeodxk\\r\\ngjgwxtrxingiqquhuwq\\r\\nhdswxxrxuzzfhkplwun\\r\\nfagppcoildagktgdarv\\r\\neusjuqfistulgbglwmf\\r\\ngzrnyxryetwzhlnfewc\\r\\nzmnoozlqatugmdjwgzc\\r\\nfabbkoxyjxkatjmpprs\\r\\nwkdkobdagwdwxsufees\\r\\nrvncbszcepigpbzuzoo\\r\\n', 'output': ['lcorviunqvgblgjfsgmrqxyivyxodhvrjpicbneodxjtfkpolvejqmllqadjwotmbgxrvs']}, {'input': '1 1\\r\\na\\r\\n', 'output': ['a']}, {'input': '2 2\\r\\nzx\\r\\nxz\\r\\n', 'output': ['zxxz']}, {'input': '1 2\\r\\nfg\\r\\n', 'output': ['fg']}, {'input': '2 1\\r\\nh\\r\\nj\\r\\n', 'output': ['hj']}, {'input': '1 3\\r\\niji\\r\\n', 'output': ['j']}, {'input': '3 1\\r\\nk\\r\\np\\r\\nk\\r\\n', 'output': ['p']}, {'input': '2 3\\r\\nmhw\\r\\nbfq\\r\\n', 'output': ['mhwbfq']}, {'input': '3 2\\r\\nxe\\r\\ner\\r\\nwb\\r\\n', 'output': ['xeerwb']}, {'input': '3 7\\r\\nnutuvjg\\r\\ntgqutfn\\r\\nyfjeiot\\r\\n', 'output': ['ntvjggqfnyfjeiot']}, {'input': '5 4\\r\\nuzvs\\r\\namfz\\r\\nwypl\\r\\nxizp\\r\\nfhmf\\r\\n', 'output': ['uzvsamfzwyplxizphm']}, {'input': '8 9\\r\\ntjqrtgrem\\r\\nrwjcfuoey\\r\\nywrjgpzca\\r\\nwabzggojv\\r\\najqmmcclh\\r\\nozilebskd\\r\\nqmgnbmtcq\\r\\nwakptzkjr\\r\\n', 'output': ['mrjcfuyyrjpzabzvalhozilebskdgnbtpzr']}, {'input': '9 3\\r\\njel\\r\\njws\\r\\ntab\\r\\nvyo\\r\\nkgm\\r\\npls\\r\\nabq\\r\\nbjx\\r\\nljt\\r\\n', 'output': ['elwtabvyokgmplabqbxlt']}, {'input': '7 6\\r\\neklgxi\\r\\nxmpzgf\\r\\nxvwcmr\\r\\nrqssed\\r\\nouiqpt\\r\\ndueiok\\r\\nbbuorv\\r\\n', 'output': ['eklgximpzgfvwcmrrqedoiqptdeiokuorv']}, {'input': '14 27\\r\\npzoshpvvjdpmwfoeojapmkxjrnk\\r\\nitoojpcorxjdxrwyewtmmlhjxhx\\r\\ndoyopbwusgsmephixzcilxpskxh\\r\\nygpvepeuxjbnezdrnjfwdhjwjka\\r\\nrfjlbypoalbtjwrpjxzenmeipfg\\r\\nkhjhrtktcnajrnbefhpavxxfnlx\\r\\nvwlwumqpfegjgvoezevqsolaqhh\\r\\npdrvrtzqsoujqfeitkqgtxwckrl\\r\\nxtepjflcxcrfomhqimhimnzfxzg\\r\\nwhkfkfvvjwkmwhfgeovwowshyhw\\r\\nolchgmhiehumivswgtfyhqfagbp\\r\\ntdudrkttpkryvaiepsijuejqvmq\\r\\nmuratfqqdbfpefmhjzercortroh\\r\\nwxkebkzchupxumfizftgqvuwgau\\r\\n', 'output': ['zshdanicdyldybwgclygzrhkayatwxznmicbpvlupfsoewcleploqngsyolceswtyqbpyasmuadbpcehqva']}, {'input': '1 100\\r\\nysijllpanprcrrtvokqmmupuptvawhvnekeybdkzqaduotmkfwybqvytkbjfzyqztmxckizheorvkhtyoohbswcmhknyzlgxordu\\r\\n', 'output': ['g']}, {'input': '2 100\\r\\ngplwoaggwuxzutpwnmxhotbexntzmitmcvnvmuxknwvcrnsagvdojdgaccfbheqojgcqievijxapvepwqolmnjqsbejtnkaifstp\\r\\noictcmphxbrylaarcwpruiastazvmfhlcgticvwhpxyiiqokxcjgwlnfykkqdsfmrfaedzchrfzlwdclqjxvidhomhxqnlmuoowg\\r\\n', 'output': ['rbe']}, {'input': '3 100\\r\\nonmhsoxoexfwavmamoecptondioxdjsoxfuqxkjviqnjukwqjwfadnohueaxrkreycicgxpmogijgejxsprwiweyvwembluwwqhj\\r\\nuofldyjyuhzgmkeurawgsrburovdppzjiyddpzxslhyesvmuwlgdjvzjqqcpubfgxliulyvxxloqyhxspoxvhllbrajlommpghlv\\r\\nvdohhghjlvihrzmwskxfatoodupmnouwyyfarhihxpdnbwrvrysrpxxptdidpqabwbfnxhiziiiqtozqjtnitgepxjxosspsjldo\\r\\n', 'output': ['blkck']}, {'input': '100 1\\r\\na\\r\\nm\\r\\nn\\r\\nh\\r\\na\\r\\nx\\r\\nt\\r\\na\\r\\no\\r\\np\\r\\nj\\r\\nz\\r\\nr\\r\\nk\\r\\nq\\r\\nl\\r\\nb\\r\\nr\\r\\no\\r\\ni\\r\\ny\\r\\ni\\r\\np\\r\\ni\\r\\nt\\r\\nn\\r\\nd\\r\\nc\\r\\nz\\r\\np\\r\\nu\\r\\nn\\r\\nw\\r\\ny\\r\\ng\\r\\ns\\r\\nt\\r\\nm\\r\\nz\\r\\ne\\r\\nv\\r\\ng\\r\\ny\\r\\nj\\r\\nd\\r\\nz\\r\\ny\\r\\na\\r\\nn\\r\\nx\\r\\nk\\r\\nd\\r\\nq\\r\\nn\\r\\nv\\r\\ng\\r\\nk\\r\\ni\\r\\nk\\r\\nf\\r\\na\\r\\nb\\r\\nw\\r\\no\\r\\nu\\r\\nw\\r\\nk\\r\\nk\\r\\nb\\r\\nz\\r\\nu\\r\\ni\\r\\nu\\r\\nv\\r\\ng\\r\\nv\\r\\nx\\r\\ng\\r\\np\\r\\ni\\r\\nz\\r\\ns\\r\\nv\\r\\nq\\r\\ns\\r\\nb\\r\\nw\\r\\ne\\r\\np\\r\\nk\\r\\nt\\r\\np\\r\\nd\\r\\nr\\r\\ng\\r\\nd\\r\\nk\\r\\nm\\r\\nf\\r\\nd\\r\\n', 'output': ['hlc']}, {'input': '100 2\\r\\nhd\\r\\ngx\\r\\nmz\\r\\nbq\\r\\nof\\r\\nst\\r\\nzc\\r\\ndg\\r\\nth\\r\\nba\\r\\new\\r\\nbw\\r\\noc\\r\\now\\r\\nvh\\r\\nqp\\r\\nin\\r\\neh\\r\\npj\\r\\nat\\r\\nnn\\r\\nbr\\r\\nij\\r\\nco\\r\\nlv\\r\\nsa\\r\\ntb\\r\\nbl\\r\\nsr\\r\\nxa\\r\\nbz\\r\\nrp\\r\\nsz\\r\\noi\\r\\nec\\r\\npw\\r\\nhf\\r\\njm\\r\\nwu\\r\\nhq\\r\\nra\\r\\npv\\r\\ntc\\r\\ngv\\r\\nik\\r\\nux\\r\\ntz\\r\\nbf\\r\\nty\\r\\ndk\\r\\nwo\\r\\nor\\r\\nza\\r\\nkv\\r\\nqt\\r\\nfa\\r\\njy\\r\\nbk\\r\\nuv\\r\\ngk\\r\\ncz\\r\\nds\\r\\nie\\r\\noq\\r\\nmf\\r\\nxn\\r\\nql\\r\\nxs\\r\\nfb\\r\\niv\\r\\ncj\\r\\nkn\\r\\nns\\r\\nlg\\r\\nji\\r\\nha\\r\\naj\\r\\ndg\\r\\nfj\\r\\nut\\r\\nsg\\r\\nju\\r\\noc\\r\\nov\\r\\nhe\\r\\nnw\\r\\nbl\\r\\nlp\\r\\nbx\\r\\nnm\\r\\nyq\\r\\ncw\\r\\nov\\r\\nxk\\r\\npg\\r\\noh\\r\\npl\\r\\nuo\\r\\ngf\\r\\nul\\r\\n', 'output': ['dvy']}, {'input': '100 3\\r\\nruy\\r\\nmye\\r\\njgp\\r\\nscn\\r\\nktq\\r\\nalx\\r\\nmvk\\r\\nlpm\\r\\nkry\\r\\norb\\r\\nmpu\\r\\nzcv\\r\\nlge\\r\\nkft\\r\\ndzp\\r\\ntfb\\r\\nhqz\\r\\nuur\\r\\nhry\\r\\nzjx\\r\\ncuo\\r\\nqqc\\r\\ntih\\r\\nenj\\r\\nvnp\\r\\nbwi\\r\\nzzh\\r\\nhkc\\r\\nwdr\\r\\nldh\\r\\nvel\\r\\nizj\\r\\nfhb\\r\\nqrn\\r\\nqpp\\r\\nvzs\\r\\nlhg\\r\\nkee\\r\\nlbq\\r\\nzhy\\r\\nwcl\\r\\nyaa\\r\\nton\\r\\nfly\\r\\nkyw\\r\\nept\\r\\ngwq\\r\\ncoe\\r\\nopd\\r\\neez\\r\\nnmx\\r\\nnjg\\r\\nwhy\\r\\nvel\\r\\nafq\\r\\nnbq\\r\\nulx\\r\\noxs\\r\\nbbo\\r\\nyhx\\r\\nfmz\\r\\nnrg\\r\\nnfm\\r\\njek\\r\\nbeu\\r\\ntya\\r\\nxgs\\r\\nsgg\\r\\nnkq\\r\\nbbv\\r\\nwkd\\r\\ntns\\r\\nfdt\\r\\neox\\r\\nobc\\r\\neab\\r\\nkkj\\r\\noub\\r\\ngji\\r\\nrht\\r\\nozv\\r\\nysk\\r\\nsbt\\r\\nflf\\r\\npbu\\r\\nlxb\\r\\npzs\\r\\nrzh\\r\\ncea\\r\\nkmi\\r\\nuea\\r\\nncc\\r\\nzng\\r\\nvkn\\r\\njhn\\r\\njqw\\r\\nlqc\\r\\nmbt\\r\\nlov\\r\\ngam\\r\\n', 'output': ['tvdiixs']}]","id":127,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    grid = [input() for _ in range(n)]\\n    \\n    to_remove = set()\\n    \\n    # Check rows\\n    for r in range(n):\\n        row = grid[r]\\n        counts = {}\\n        for c in range(m):\\n            if row[c] not in counts:\\n                counts[row[c]] = 0\\n            counts[row[c]] += 1\\n        for c in range(m):\\n            if counts[row[c]] > 1:\\n                to_remove.add((r, c))\\n    \\n    # Check columns\\n    for c in range(m):\\n        counts = {}\\n        for r in range(n):\\n            if grid[r][c] not in counts:\\n                counts[grid[r][c]] = 0\\n            counts[grid[r][c]] += 1\\n        for r in range(n):\\n            if counts[grid[r][c]] > 1:\\n                to_remove.add((r, c))\\n    \\n    result = ''\\n    for r in range(n):\\n        for c in range(m):\\n            if (r, c) not in to_remove:\\n                result += grid[r][c]\\n    print(result)\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    grid = [input() for _ in range(n)]\\n    \\n    to_remove = set()\\n    \\n    # Check rows\\n    for r in range(n):\\n        row = grid[r]\\n        for c in range(m):\\n            if row.count(row[c]) > 1:\\n                to_remove.add((r, c))\\n                \\n    # Check columns\\n    for c in range(m):\\n        col = ''.join(grid[r][c] for r in range(n))\\n        for r in range(n):\\n            if col.count(col[r]) > 1:\\n                to_remove.add((r, c))\\n                \\n    result = ''\\n    for r in range(n):\\n        for c in range(m):\\n            if (r, c) not in to_remove:\\n                result += grid[r][c]\\n    \\n    print(result)\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    grid = [input() for _ in range(n)]\\n    \\n    to_remove = set()\\n    \\n    # Check rows\\n    for r in range(n):\\n        row = grid[r]\\n        counts = {}\\n        for c in range(m):\\n            if row[c] not in counts:\\n                counts[row[c]] = 0\\n            counts[row[c]] += 1\\n        for c in range(m):\\n            if counts[row[c]] > 1:\\n                to_remove.add((r, c))\\n    \\n    # Check columns\\n    for c in range(m):\\n        counts = {}\\n        for r in range(n):\\n            if grid[r][c] not in counts:\\n                counts[grid[r][c]] = 0\\n            counts[grid[r][c]] += 1\\n        for r in range(n):\\n            if counts[grid[r][c]] > 1:\\n                to_remove.add((r, c))\\n    \\n    result = ''\\n    for r in range(n):\\n        for c in range(m):\\n            if (r, c) not in to_remove:\\n                result += grid[r][c]\\n    print(result)\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    grid = [input() for _ in range(n)]\\n    \\n    to_remove = set()\\n    \\n    # Check rows\\n    for r in range(n):\\n        row = grid[r]\\n        for c in range(m):\\n            if row.count(row[c]) > 1:\\n                to_remove.add((r, c))\\n                \\n    # Check columns\\n    for c in range(m):\\n        col = ''.join(grid[r][c] for r in range(n))\\n        for r in range(n):\\n            if col.count(col[r]) > 1:\\n                to_remove.add((r, c))\\n                \\n    result = ''\\n    for r in range(n):\\n        for c in range(m):\\n            if (r, c) not in to_remove:\\n                result += grid[r][c]\\n    \\n    print(result)\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"A little boy Gerald entered a clothes shop and found out something very unpleasant: not all clothes turns out to match. For example, Gerald noticed that he looks rather ridiculous in a smoking suit and a baseball cap.Overall the shop sells n clothing items, and exactly m pairs of clothing items match. Each item has its price, represented by an integer number of rubles. Gerald wants to buy three clothing items so that they matched each other. Besides, he wants to spend as little money as possible. Find the least possible sum he can spend.","input_specification":"The first input file line contains integers n and m \u2014 the total number of clothing items in the shop and the total number of matching pairs of clothing items (). Next line contains n integers ai (1\u2009\u2264\u2009ai\u2009\u2264\u2009106) \u2014 the prices of the clothing items in rubles. Next m lines each contain a pair of space-separated integers ui and vi (1\u2009\u2264\u2009ui,\u2009vi\u2009\u2264\u2009n,\u2009ui\u2009\u2260\u2009vi). Each such pair of numbers means that the ui-th and the vi-th clothing items match each other. It is guaranteed that in each pair ui and vi are distinct and all the unordered pairs (ui,\u2009vi) are different.","output_specification":"Print the only number \u2014 the least possible sum in rubles that Gerald will have to pay in the shop. If the shop has no three clothing items that would match each other, print \"-1\" (without the quotes).","notes":"NoteIn the first test there only are three pieces of clothing and they all match each other. Thus, there is only one way \u2014 to buy the 3 pieces of clothing; in this case he spends 6 roubles.The second test only has three pieces of clothing as well, yet Gerald can't buy them because the first piece of clothing does not match the third one. Thus, there are no three matching pieces of clothing. The answer is -1.In the third example there are 4 pieces of clothing, but Gerald can't buy any 3 of them simultaneously. The answer is -1.","sample_inputs":["3 3\n1 2 3\n1 2\n2 3\n3 1","3 2\n2 3 4\n2 3\n2 1","4 4\n1 1 1 1\n1 2\n2 3\n3 4\n4 1"],"sample_outputs":["6","-1","-1"],"src_uid":"d90da1e932a6aa546bec4e1bd4b1fbec","lang_cluster":"Python","difficulty":1200,"human_solution":"import itertools\nimport math\n\nimport time\ndef timer(f):\n    def tmp(*args, **kwargs):\n        t = time.time()\n        res = f(*args, **kwargs)\n        print(\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438: %f\" % (time.time()-t))\n        return res\n\n    return tmp\n\n#n = int(input())\n\nn, m = map(int, input().split(' '))\narray = list(map(int, input().split(' ')))\nmatrix = [[0 for j in range(n)] for i in range(n)]\nfor i in range(m):\n    a, b = map(int, input().split(' '))\n    a-=1\n    b-=1\n    matrix[a][b] = 1\n    matrix[b][a] = 1\n\nprice = 100000000000000\nu = 0;\nuu = 0;\nuuu = 0;\nfor i in range(n):\n    for j in range(n):\n        for k in range(n):\n            if i!=j and j!=k and i!=k:\n                if matrix[i][j]==1 and matrix[i][k]==1 and matrix[j][k]==1:\n                    cp = array[i]+array[j]+array[k]\n                    if cp<price:\n                        price = cp\n                        u = i\n                        uu = j\n                        uuu = k\n                else:\n                    #print(i, j, k)\n                    pass\n\n\nif price == 100000000000000:\n    print(-1)\nelse:\n    print(price)\n","testcases":"[{'input': '3 3\\r\\n1 2 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['6\\r\\n']}, {'input': '3 2\\r\\n2 3 4\\r\\n2 3\\r\\n2 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 4\\r\\n1 1 1 1\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 3\\r\\n10 10 5 1\\r\\n2 1\\r\\n3 1\\r\\n3 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 0\\r\\n9 8 2 10\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 3\\r\\n5 5 9 6\\r\\n3 2\\r\\n1 4\\r\\n3 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 3\\r\\n5 1 10 1\\r\\n2 1\\r\\n3 2\\r\\n1 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 3\\r\\n1 2 8 6\\r\\n1 3\\r\\n1 4\\r\\n3 4\\r\\n', 'output': ['15\\r\\n']}, {'input': '4 4\\r\\n9 3 3 1\\r\\n1 2\\r\\n3 1\\r\\n3 2\\r\\n4 3\\r\\n', 'output': ['15\\r\\n']}, {'input': '4 3\\r\\n6 8 10 1\\r\\n2 3\\r\\n1 4\\r\\n3 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 5\\r\\n4 10 3 9\\r\\n1 2\\r\\n3 1\\r\\n3 2\\r\\n2 4\\r\\n4 3\\r\\n', 'output': ['17\\r\\n']}, {'input': '4 2\\r\\n2 9 8 4\\r\\n1 3\\r\\n4 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 3\\r\\n5 3 4 4\\r\\n2 1\\r\\n4 1\\r\\n3 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '6 6\\r\\n39 15 73 82 37 40\\r\\n2 1\\r\\n5 1\\r\\n1 6\\r\\n2 6\\r\\n6 3\\r\\n4 6\\r\\n', 'output': ['94\\r\\n']}, {'input': '6 7\\r\\n85 2 34 6 83 61\\r\\n1 2\\r\\n2 3\\r\\n4 2\\r\\n4 3\\r\\n1 5\\r\\n4 5\\r\\n6 3\\r\\n', 'output': ['42\\r\\n']}, {'input': '6 8\\r\\n64 44 5 31 14 16\\r\\n1 2\\r\\n1 3\\r\\n1 4\\r\\n2 5\\r\\n3 5\\r\\n6 1\\r\\n6 3\\r\\n6 4\\r\\n', 'output': ['85\\r\\n']}, {'input': '6 8\\r\\n36 19 99 8 52 77\\r\\n2 1\\r\\n3 1\\r\\n4 2\\r\\n4 3\\r\\n1 5\\r\\n5 4\\r\\n1 6\\r\\n6 2\\r\\n', 'output': ['132\\r\\n']}, {'input': '6 5\\r\\n59 69 52 38 93 53\\r\\n4 2\\r\\n1 5\\r\\n6 1\\r\\n4 6\\r\\n5 6\\r\\n', 'output': ['205\\r\\n']}, {'input': '6 11\\r\\n95 81 74 94 60 69\\r\\n3 2\\r\\n1 4\\r\\n4 2\\r\\n3 4\\r\\n1 5\\r\\n5 2\\r\\n5 3\\r\\n1 6\\r\\n2 6\\r\\n3 6\\r\\n4 6\\r\\n', 'output': ['215\\r\\n']}, {'input': '6 8\\r\\n69 36 41 23 91 35\\r\\n1 2\\r\\n3 1\\r\\n3 2\\r\\n1 4\\r\\n3 4\\r\\n3 5\\r\\n5 4\\r\\n4 6\\r\\n', 'output': ['133\\r\\n']}, {'input': '6 6\\r\\n33 76 98 59 4 69\\r\\n1 2\\r\\n3 2\\r\\n5 1\\r\\n2 5\\r\\n4 5\\r\\n6 5\\r\\n', 'output': ['113\\r\\n']}, {'input': '6 6\\r\\n92 56 15 83 30 28\\r\\n3 1\\r\\n4 1\\r\\n2 5\\r\\n5 4\\r\\n2 6\\r\\n6 3\\r\\n', 'output': ['-1\\r\\n']}, {'input': '6 10\\r\\n17 5 55 24 55 74\\r\\n1 3\\r\\n2 3\\r\\n3 4\\r\\n5 1\\r\\n5 2\\r\\n5 3\\r\\n4 5\\r\\n6 2\\r\\n6 3\\r\\n6 5\\r\\n', 'output': ['115\\r\\n']}, {'input': '3 3\\r\\n1000000 1000000 1000000\\r\\n2 1\\r\\n1 3\\r\\n3 2\\r\\n', 'output': ['3000000\\r\\n']}, {'input': '3 0\\r\\n1 1 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 3\\r\\n100000 100000 100001\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['300001\\r\\n']}, {'input': '3 3\\r\\n1 1 999999\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['1000001\\r\\n']}, {'input': '3 3\\r\\n999999 1 1\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['1000001\\r\\n']}, {'input': '3 3\\r\\n1000000 1000000 1000000\\r\\n1 2\\r\\n2 3\\r\\n1 3\\r\\n', 'output': ['3000000\\r\\n']}]","id":128,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    prices = list(map(int, input().split()))\\n    matches = []\\n    for _ in range(m):\\n        matches.append(list(map(int, input().split())))\\n    \\n    min_sum = float('inf')\\n    \\n    for i in range(n):\\n        for j in range(i + 1, n):\\n            for k in range(j + 1, n):\\n                item1 = i + 1\\n                item2 = j + 1\\n                item3 = k + 1\\n                \\n                match_count = 0\\n                \\n                if [item1, item2] in [[u, v] for u, v in matches] or [item2, item1] in [[u, v] for u, v in matches]:\\n                    match_count += 1\\n                if [item1, item3] in [[u, v] for u, v in matches] or [item3, item1] in [[u, v] for u, v in matches]:\\n                    match_count += 1\\n                if [item2, item3] in [[u, v] for u, v in matches] or [item3, item2] in [[u, v] for u, v in matches]:\\n                    match_count += 1\\n                \\n                if match_count == 3:\\n                    min_sum = min(min_sum, prices[i] + prices[j] + prices[k])\\n                    \\n    if min_sum == float('inf'):\\n        print(\\\"-1\\\")\\n    else:\\n        print(min_sum)\\n\\nsolve()\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    prices = list(map(int, input().split()))\\n    matches = []\\n    for _ in range(m):\\n        matches.append(list(map(int, input().split())))\\n\\n    min_sum = float('inf')\\n    for i in range(n):\\n        for j in range(i + 1, n):\\n            for k in range(j + 1, n):\\n                item1 = i + 1\\n                item2 = j + 1\\n                item3 = k + 1\\n                \\n                match_count = 0\\n                for u, v in matches:\\n                    if (u == item1 and v == item2) or (u == item2 and v == item1):\\n                        match_count += 1\\n                    if (u == item1 and v == item3) or (u == item3 and v == item1):\\n                        match_count += 1\\n                    if (u == item2 and v == item3) or (u == item3 and v == item2):\\n                        match_count += 1\\n                \\n                if match_count == 3:\\n                    min_sum = min(min_sum, prices[i] + prices[j] + prices[k])\\n\\n    if min_sum == float('inf'):\\n        print(\\\"-1\\\")\\n    else:\\n        print(min_sum)\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    prices = list(map(int, input().split()))\\n    matches = []\\n    for _ in range(m):\\n        matches.append(list(map(int, input().split())))\\n    \\n    min_sum = float('inf')\\n    \\n    for i in range(n):\\n        for j in range(i + 1, n):\\n            for k in range(j + 1, n):\\n                item1 = i + 1\\n                item2 = j + 1\\n                item3 = k + 1\\n                \\n                match_count = 0\\n                \\n                if [item1, item2] in [[u, v] for u, v in matches] or [item2, item1] in [[u, v] for u, v in matches]:\\n                    match_count += 1\\n                if [item1, item3] in [[u, v] for u, v in matches] or [item3, item1] in [[u, v] for u, v in matches]:\\n                    match_count += 1\\n                if [item2, item3] in [[u, v] for u, v in matches] or [item3, item2] in [[u, v] for u, v in matches]:\\n                    match_count += 1\\n                \\n                if match_count == 3:\\n                    min_sum = min(min_sum, prices[i] + prices[j] + prices[k])\\n                    \\n    if min_sum == float('inf'):\\n        print(\\\"-1\\\")\\n    else:\\n        print(min_sum)\\n\\nsolve()\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    prices = list(map(int, input().split()))\\n    matches = []\\n    for _ in range(m):\\n        matches.append(list(map(int, input().split())))\\n\\n    min_sum = float('inf')\\n    for i in range(n):\\n        for j in range(i + 1, n):\\n            for k in range(j + 1, n):\\n                item1 = i + 1\\n                item2 = j + 1\\n                item3 = k + 1\\n                \\n                match_count = 0\\n                for u, v in matches:\\n                    if (u == item1 and v == item2) or (u == item2 and v == item1):\\n                        match_count += 1\\n                    if (u == item1 and v == item3) or (u == item3 and v == item1):\\n                        match_count += 1\\n                    if (u == item2 and v == item3) or (u == item3 and v == item2):\\n                        match_count += 1\\n                \\n                if match_count == 3:\\n                    min_sum = min(min_sum, prices[i] + prices[j] + prices[k])\\n\\n    if min_sum == float('inf'):\\n        print(\\\"-1\\\")\\n    else:\\n        print(min_sum)\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"Little Petya loves inequations. Help him find n positive integers a1,\u2009a2,\u2009...,\u2009an, such that the following two conditions are satisfied: a12\u2009+\u2009a22\u2009+\u2009...\u2009+\u2009an2\u2009\u2265\u2009x a1\u2009+\u2009a2\u2009+\u2009...\u2009+\u2009an\u2009\u2264\u2009y","input_specification":"The first line contains three space-separated integers n, x and y (1\u2009\u2264\u2009n\u2009\u2264\u2009105,\u20091\u2009\u2264\u2009x\u2009\u2264\u20091012,\u20091\u2009\u2264\u2009y\u2009\u2264\u2009106). Please do not use the %lld specificator to read or write 64-bit integers in \u0421++. It is recommended to use cin, cout streams or the %I64d specificator.","output_specification":"Print n positive integers that satisfy the conditions, one integer per line. If such numbers do not exist, print a single number \"-1\". If there are several solutions, print any of them.","notes":null,"sample_inputs":["5 15 15","2 3 2","1 99 11"],"sample_outputs":["4\n4\n1\n1\n2","-1","11"],"src_uid":"138fd96bf5a677a6d59c20f88fd612f1","lang_cluster":"Python","difficulty":1400,"human_solution":"n, x, y = map(int, input().split())\nif y < n:\n     print(-1)\nelse:\n    q = y - n + 1\n    if (q ** 2 + n - 1) >= x:\n        print(q)\n        for i in  range(n - 1):\n            print(1)\n    else:\n        print(-1)\n    \n","testcases":"[{'input': '5 15 15\\r\\n', 'output': ['11\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n']}, {'input': '2 3 2\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 99 11\\r\\n', 'output': ['11\\r\\n']}, {'input': '3 254 18\\r\\n', 'output': ['16\\r\\n1\\r\\n1\\r\\n']}, {'input': '4 324 77\\r\\n', 'output': ['74\\r\\n1\\r\\n1\\r\\n1\\r\\n']}, {'input': '5 315 90\\r\\n', 'output': ['86\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n']}, {'input': '6 225 59\\r\\n', 'output': ['54\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n']}, {'input': '7 351 29\\r\\n', 'output': ['23\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n']}, {'input': '100 913723780421 955988\\r\\n', 'output': ['-1\\r\\n']}, {'input': '200 894176381082 945808\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1000 824905348050 909242\\r\\n', 'output': ['-1\\r\\n']}, {'input': '31000 819461299082 936240\\r\\n', 'output': ['-1\\r\\n']}, {'input': '44000 772772899626 923074\\r\\n', 'output': ['-1\\r\\n']}, {'input': '99999 681508136225 925533\\r\\n', 'output': ['-1\\r\\n']}, {'input': '99976 664640815001 915230\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100000 729199960625 953931\\r\\n', 'output': ['-1\\r\\n']}, {'input': '50 890543266647 943735\\r\\n', 'output': ['-1\\r\\n']}, {'input': '60 817630084499 904288\\r\\n', 'output': ['904229\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n']}, {'input': '99999 716046078026 946193\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10000 950051796437 984705\\r\\n', 'output': ['-1\\r\\n']}, {'input': '999 992972391401 997478\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 983300308227 991615\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 912219830404 955103\\r\\n', 'output': ['955102\\r\\n1\\r\\n']}, {'input': '3 934371623645 966631\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4 857839030421 926199\\r\\n', 'output': ['-1\\r\\n']}, {'input': '7 897398130730 947317\\r\\n', 'output': ['-1\\r\\n']}, {'input': '60 833021290059 912759\\r\\n', 'output': ['912700\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n']}, {'input': '1 860113420929 927423\\r\\n', 'output': ['927423\\r\\n']}, {'input': '2 933669982757 966267\\r\\n', 'output': ['966266\\r\\n1\\r\\n']}, {'input': '3 933157932003 966003\\r\\n', 'output': ['966001\\r\\n1\\r\\n1\\r\\n']}, {'input': '4 944626542564 971922\\r\\n', 'output': ['971919\\r\\n1\\r\\n1\\r\\n1\\r\\n']}, {'input': '7 937519681542 968262\\r\\n', 'output': ['968256\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n']}, {'input': '100000 1000000000000 1000000\\r\\n', 'output': ['-1\\r\\n']}, {'input': '99999 999999999999 999999\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100 1 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 1 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '11 10 10\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 5 10\\r\\n', 'output': ['10\\r\\n']}, {'input': '10 3 8\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5 37 10\\r\\n', 'output': ['6\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n']}, {'input': '5 1 4\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 1 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '1 1000000000000 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 1 1000000\\r\\n', 'output': ['1000000\\r\\n']}, {'input': '100000 1 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100000 1000000000000 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 1000000000000 1000000\\r\\n', 'output': ['1000000\\r\\n']}]","id":129,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n, x, y = map(int, input().split())\\n\\na = [0] * n\\n\\nif n * n * (y \/\/ n) * (y \/\/ n) < x:\\n    print(-1)\\nelse:\\n    val = y \/\/ n\\n    rem = y % n\\n    for i in range(n):\\n        a[i] = val\\n    \\n    for i in range(rem):\\n        a[i] += 1\\n    \\n    sum_sq = 0\\n    for num in a:\\n        sum_sq += num * num\\n    \\n    if sum_sq >= x:\\n        for num in a:\\n            print(num)\\n    else:\\n        diff = x - sum_sq\\n        \\n        for i in range(n-1, -1, -1):\\n            add = min(a[i] * a[i] + 2*a[i] + 1 - a[i]*a[i], diff)\\n            a[i] += (add)**0.5\\n            if add == (add)**0.5 * (add)**0.5:\\n              diff -= add\\n            else: \\n              continue\\n            if diff == 0:\\n                break\\n        \\n        sum_sq = 0\\n        for num in a:\\n            sum_sq += num * num\\n        if sum_sq >= x:\\n          for num in a:\\n            print(int(num))\\n        else:\\n          print(-1)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n, x, y = map(int, raw_input().split())\\n\\na = [0] * n\\n\\nif n * n * (y \/\/ n) * (y \/\/ n) < x:\\n    print -1\\nelse:\\n    val = y \/\/ n\\n    rem = y % n\\n    for i in range(n):\\n        a[i] = val\\n    \\n    for i in range(rem):\\n        a[i] += 1\\n    \\n    sum_sq = 0\\n    for num in a:\\n        sum_sq += num * num\\n    \\n    if sum_sq >= x:\\n        for num in a:\\n            print num\\n    else:\\n        diff = x - sum_sq\\n        \\n        for i in range(n-1, -1, -1):\\n            add = min(a[i] * a[i] + 2*a[i] + 1 - a[i]*a[i], diff)\\n            a[i] += (add)**0.5\\n            if add == (add)**0.5 * (add)**0.5:\\n              diff -= add\\n            else: \\n              continue\\n            if diff == 0:\\n                break\\n        \\n        sum_sq = 0\\n        for num in a:\\n            sum_sq += num * num\\n        if sum_sq >= x:\\n          for num in a:\\n            print int(num)\\n        else:\\n          print -1\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, x, y = map(int, input().split())\\n    \\n    if n * 1.0 * n > x and y * 1.0 < (x ** 0.5) * n:\\n        print(-1)\\n        return\\n    \\n    a = []\\n    val = y \/\/ n\\n    rem = y % n\\n    \\n    for _ in range(n - rem):\\n        a.append(val)\\n    for _ in range(rem):\\n        a.append(val + 1)\\n    \\n    sum_sq = sum(i * i for i in a)\\n    \\n    if sum_sq >= x:\\n        for num in a:\\n            print(num)\\n        return\\n    \\n    if val == 0 and rem == 0:\\n        print(-1)\\n        return\\n    \\n    if val * val * (n-rem) + (val+1)*(val+1)*rem < x:\\n        print(-1)\\n        return\\n\\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '\n]\n```\n```python\ndef solve():\n    n, x, y = map(int, input().split())\n    \n    if n * n < x and y < n:\n        print(-1)\n        return\n    \n    if n * 1.0 * n > x and y * 1.0 < (x ** 0.5) * n:\n        print(-1)\n        return\n    \n    a = []\n    val = y \/\/ n\n    rem = y % n\n    \n    for _ in range(n - rem):\n        a.append(val)\n    for _ in range(rem):\n        a.append(val + 1)\n    \n    sum_sq = sum(i * i for i in a)\n    \n    if sum_sq >= x:\n        for num in a:\n            print(num)\n        return\n    \n    if val == 0 and rem == 0:\n        print(-1)\n        return\n    \n    if val * val * (n-rem) + (val+1)*(val+1)*rem < x:\n        print(-1)\n        return\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \\n    \\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n, x, y = map(int, input().split())\\n\\na = [0] * n\\n\\nif n * n * (y \/\/ n) * (y \/\/ n) < x:\\n    print(-1)\\nelse:\\n    val = y \/\/ n\\n    rem = y % n\\n    for i in range(n):\\n        a[i] = val\\n    \\n    for i in range(rem):\\n        a[i] += 1\\n    \\n    sum_sq = 0\\n    for num in a:\\n        sum_sq += num * num\\n    \\n    if sum_sq >= x:\\n        for num in a:\\n            print(num)\\n    else:\\n        diff = x - sum_sq\\n        \\n        for i in range(n-1, -1, -1):\\n            add = min(a[i] * a[i] + 2*a[i] + 1 - a[i]*a[i], diff)\\n            a[i] += (add)**0.5\\n            if add == (add)**0.5 * (add)**0.5:\\n              diff -= add\\n            else: \\n              continue\\n            if diff == 0:\\n                break\\n        \\n        sum_sq = 0\\n        for num in a:\\n            sum_sq += num * num\\n        if sum_sq >= x:\\n          for num in a:\\n            print(int(num))\\n        else:\\n          print(-1)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n, x, y = map(int, raw_input().split())\\n\\na = [0] * n\\n\\nif n * n * (y \/\/ n) * (y \/\/ n) < x:\\n    print -1\\nelse:\\n    val = y \/\/ n\\n    rem = y % n\\n    for i in range(n):\\n        a[i] = val\\n    \\n    for i in range(rem):\\n        a[i] += 1\\n    \\n    sum_sq = 0\\n    for num in a:\\n        sum_sq += num * num\\n    \\n    if sum_sq >= x:\\n        for num in a:\\n            print num\\n    else:\\n        diff = x - sum_sq\\n        \\n        for i in range(n-1, -1, -1):\\n            add = min(a[i] * a[i] + 2*a[i] + 1 - a[i]*a[i], diff)\\n            a[i] += (add)**0.5\\n            if add == (add)**0.5 * (add)**0.5:\\n              diff -= add\\n            else: \\n              continue\\n            if diff == 0:\\n                break\\n        \\n        sum_sq = 0\\n        for num in a:\\n            sum_sq += num * num\\n        if sum_sq >= x:\\n          for num in a:\\n            print int(num)\\n        else:\\n          print -1\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, x, y = map(int, input().split())\\n    \\n    if n * 1.0 * n > x and y * 1.0 < (x ** 0.5) * n:\\n        print(-1)\\n        return\\n    \\n    a = []\\n    val = y \/\/ n\\n    rem = y % n\\n    \\n    for _ in range(n - rem):\\n        a.append(val)\\n    for _ in range(rem):\\n        a.append(val + 1)\\n    \\n    sum_sq = sum(i * i for i in a)\\n    \\n    if sum_sq >= x:\\n        for num in a:\\n            print(num)\\n        return\\n    \\n    if val == 0 and rem == 0:\\n        print(-1)\\n        return\\n    \\n    if val * val * (n-rem) + (val+1)*(val+1)*rem < x:\\n        print(-1)\\n        return\\n\\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '\n]\n```\n```python\ndef solve():\n    n, x, y = map(int, input().split())\n    \n    if n * n < x and y < n:\n        print(-1)\n        return\n    \n    if n * 1.0 * n > x and y * 1.0 < (x ** 0.5) * n:\n        print(-1)\n        return\n    \n    a = []\n    val = y \/\/ n\n    rem = y % n\n    \n    for _ in range(n - rem):\n        a.append(val)\n    for _ in range(rem):\n        a.append(val + 1)\n    \n    sum_sq = sum(i * i for i in a)\n    \n    if sum_sq >= x:\n        for num in a:\n            print(num)\n        return\n    \n    if val == 0 and rem == 0:\n        print(-1)\n        return\n    \n    if val * val * (n-rem) + (val+1)*(val+1)*rem < x:\n        print(-1)\n        return\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \\n    \\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"description":"When little Petya grew up and entered the university, he started to take part in \u0410\u0421\u041c contests. Later he realized that he doesn't like how the \u0410\u0421\u041c contests are organised: the team could only have three members (and he couldn't take all his friends to the competitions and distribute the tasks between the team members efficiently), so he decided to organize his own contests PFAST Inc. \u2014 Petr and Friends Are Solving Tasks Corporation. PFAST Inc. rules allow a team to have unlimited number of members.To make this format of contests popular he organised his own tournament. To create the team he will prepare for the contest organised by the PFAST Inc. rules, he chose several volunteers (up to 16 people) and decided to compile a team from them. Petya understands perfectly that if a team has two people that don't get on well, then the team will perform poorly. Put together a team with as many players as possible given that all players should get on well with each other.","input_specification":"The first line contains two integer numbers n (1\u2009\u2264\u2009n\u2009\u2264\u200916) \u2014 the number of volunteers, and m () \u2014 the number of pairs that do not get on. Next n lines contain the volunteers' names (each name is a non-empty string consisting of no more than 10 uppercase and\/or lowercase Latin letters). Next m lines contain two names \u2014 the names of the volunteers who do not get on. The names in pair are separated with a single space. Each pair of volunteers who do not get on occurs exactly once. The strings are case-sensitive. All n names are distinct.","output_specification":"The first output line should contain the single number k \u2014 the number of people in the sought team. Next k lines should contain the names of the sought team's participants in the lexicographical order. If there are several variants to solve the problem, print any of them. Petya might not be a member of the sought team. ","notes":null,"sample_inputs":["3 1\nPetya\nVasya\nMasha\nPetya Vasya","3 0\nPasha\nLesha\nVanya"],"sample_outputs":["2\nMasha\nPetya","3\nLesha\nPasha\nVanya"],"src_uid":"b0301a2d79a1ec126511ed769ec0b743","lang_cluster":"Python","difficulty":1500,"human_solution":"n, m = map(int, input().split())\nd = [input().strip() for _ in range(n)]\nd.sort()\na = [[0] * n for _ in range(n)]\nfor _ in range(m):\n    x, y = input().strip().split()\n    a[d.index(x)][d.index(y)] = a[d.index(y)][d.index(x)] = 1\n\nres, bit = 0, 0\nfor mask in range(1 << n):\n    num = 0\n    for i in range(n):\n        if mask >> i & 1:\n            num += 1\n            for j in range(i + 1, n):\n                if (mask >> j & 1) != 0 and a[i][j]:\n                    num = -20\n    if res < num:\n        res = num\n        bit = mask\n\nprint(res)\nfor i in range(n):\n    if bit >> i & 1:\n        print(d[i])\n ","testcases":"[{'input': '3 1\\r\\nPetya\\r\\nVasya\\r\\nMasha\\r\\nPetya Vasya\\r\\n', 'output': ['2\\r\\nMasha\\r\\nPetya\\r\\n']}, {'input': '3 0\\r\\nPasha\\r\\nLesha\\r\\nVanya\\r\\n', 'output': ['3\\r\\nLesha\\r\\nPasha\\r\\nVanya\\r\\n']}, {'input': '7 12\\r\\nPasha\\r\\nLesha\\r\\nVanya\\r\\nTaras\\r\\nNikita\\r\\nSergey\\r\\nAndrey\\r\\nPasha Taras\\r\\nPasha Nikita\\r\\nPasha Andrey\\r\\nPasha Sergey\\r\\nLesha Taras\\r\\nLesha Nikita\\r\\nLesha Andrey\\r\\nLesha Sergey\\r\\nVanya Taras\\r\\nVanya Nikita\\r\\nVanya Andrey\\r\\nVanya Sergey\\r\\n', 'output': ['4\\r\\nAndrey\\r\\nNikita\\r\\nSergey\\r\\nTaras\\r\\n']}, {'input': '2 0\\r\\nAndrey\\r\\nTaras\\r\\n', 'output': ['2\\r\\nAndrey\\r\\nTaras\\r\\n']}, {'input': '16 0\\r\\nTaras\\r\\nNikita\\r\\nSergey\\r\\nAndrey\\r\\nRomka\\r\\nAlexey\\r\\nUra\\r\\nDenis\\r\\nEgor\\r\\nVadim\\r\\nAlena\\r\\nOlya\\r\\nVanya\\r\\nBrus\\r\\nJohn\\r\\nAlice\\r\\n', 'output': ['16\\r\\nAlena\\r\\nAlexey\\r\\nAlice\\r\\nAndrey\\r\\nBrus\\r\\nDenis\\r\\nEgor\\r\\nJohn\\r\\nNikita\\r\\nOlya\\r\\nRomka\\r\\nSergey\\r\\nTaras\\r\\nUra\\r\\nVadim\\r\\nVanya\\r\\n']}, {'input': '6 6\\r\\nAlena\\r\\nOlya\\r\\nVanya\\r\\nBrus\\r\\nJohn\\r\\nAlice\\r\\nAlena John\\r\\nAlena Alice\\r\\nOlya John\\r\\nOlya Alice\\r\\nVanya John\\r\\nVanya Alice\\r\\n', 'output': ['4\\r\\nAlena\\r\\nBrus\\r\\nOlya\\r\\nVanya\\r\\n']}, {'input': '7 6\\r\\nAlena\\r\\nOlya\\r\\nVanya\\r\\nBrus\\r\\nJohn\\r\\nAlice\\r\\nMariana\\r\\nAlena John\\r\\nAlena Alice\\r\\nOlya John\\r\\nOlya Alice\\r\\nVanya John\\r\\nVanya Alice\\r\\n', 'output': ['5\\r\\nAlena\\r\\nBrus\\r\\nMariana\\r\\nOlya\\r\\nVanya\\r\\n']}, {'input': '1 0\\r\\nPetr\\r\\n', 'output': ['1\\r\\nPetr\\r\\n']}, {'input': '2 0\\r\\nNgzlPJgFgz\\r\\nQfpagVpWz\\r\\n', 'output': ['2\\r\\nNgzlPJgFgz\\r\\nQfpagVpWz\\r\\n']}, {'input': '2 1\\r\\ncLWdg\\r\\nGoWegdDRp\\r\\nGoWegdDRp cLWdg\\r\\n', 'output': ['1\\r\\nGoWegdDRp\\r\\n']}, {'input': '3 0\\r\\nr\\r\\nyVwqs\\r\\nsdTDerOyhp\\r\\n', 'output': ['3\\r\\nr\\r\\nsdTDerOyhp\\r\\nyVwqs\\r\\n']}, {'input': '3 3\\r\\nvRVatwL\\r\\nWmkUGiYEn\\r\\nuvvsXKXcJ\\r\\nWmkUGiYEn vRVatwL\\r\\nuvvsXKXcJ vRVatwL\\r\\nuvvsXKXcJ WmkUGiYEn\\r\\n', 'output': ['1\\r\\nWmkUGiYEn\\r\\n']}, {'input': '16 11\\r\\njA\\r\\nkyRNTE\\r\\neY\\r\\nToLcqN\\r\\nbnenhMxiK\\r\\nzlkOe\\r\\nXCKZ\\r\\neaQrds\\r\\nqUdInpi\\r\\nKgPQA\\r\\nmQIl\\r\\ninOCWEZHxy\\r\\nyA\\r\\nPIZRMOu\\r\\nXtueKFM\\r\\nfRNwNn\\r\\ninOCWEZHxy qUdInpi\\r\\nKgPQA zlkOe\\r\\ninOCWEZHxy KgPQA\\r\\nfRNwNn XCKZ\\r\\ninOCWEZHxy eY\\r\\nyA mQIl\\r\\ninOCWEZHxy ToLcqN\\r\\nyA KgPQA\\r\\nqUdInpi ToLcqN\\r\\nqUdInpi eaQrds\\r\\nPIZRMOu eY\\r\\n', 'output': ['10\\r\\nKgPQA\\r\\nPIZRMOu\\r\\nToLcqN\\r\\nXCKZ\\r\\nXtueKFM\\r\\nbnenhMxiK\\r\\neaQrds\\r\\njA\\r\\nkyRNTE\\r\\nmQIl\\r\\n']}, {'input': '12 12\\r\\njWuGgOjV\\r\\nWs\\r\\njTZQMyH\\r\\nULp\\r\\nUfsnPRt\\r\\nk\\r\\nbPKrnP\\r\\nW\\r\\nJOaQdgglDG\\r\\nAodc\\r\\ncpRjAUyYIW\\r\\nMrjB\\r\\nbPKrnP ULp\\r\\nk Ws\\r\\ncpRjAUyYIW k\\r\\nULp jTZQMyH\\r\\nbPKrnP jWuGgOjV\\r\\ncpRjAUyYIW jTZQMyH\\r\\nW ULp\\r\\nk jTZQMyH\\r\\nk ULp\\r\\nMrjB ULp\\r\\ncpRjAUyYIW Aodc\\r\\nW k\\r\\n', 'output': ['8\\r\\nAodc\\r\\nJOaQdgglDG\\r\\nMrjB\\r\\nUfsnPRt\\r\\nW\\r\\nWs\\r\\nbPKrnP\\r\\njTZQMyH\\r\\n']}, {'input': '11 17\\r\\njFTNgFBO\\r\\ntZDgmdF\\r\\nIjeDjoj\\r\\nBEMAaYkNb\\r\\nRZRQl\\r\\ntK\\r\\nlNHWt\\r\\nIdG\\r\\nLAbVLYiY\\r\\notOBsWqJuo\\r\\nUoTy\\r\\ntK BEMAaYkNb\\r\\nBEMAaYkNb jFTNgFBO\\r\\nIjeDjoj tZDgmdF\\r\\nRZRQl jFTNgFBO\\r\\nlNHWt tZDgmdF\\r\\nRZRQl tZDgmdF\\r\\nUoTy LAbVLYiY\\r\\nBEMAaYkNb IjeDjoj\\r\\nIdG BEMAaYkNb\\r\\nLAbVLYiY tK\\r\\nLAbVLYiY jFTNgFBO\\r\\nUoTy IjeDjoj\\r\\nlNHWt jFTNgFBO\\r\\nlNHWt BEMAaYkNb\\r\\ntK IjeDjoj\\r\\nUoTy RZRQl\\r\\nBEMAaYkNb tZDgmdF\\r\\n', 'output': ['6\\r\\nIdG\\r\\nIjeDjoj\\r\\nLAbVLYiY\\r\\nRZRQl\\r\\nlNHWt\\r\\notOBsWqJuo\\r\\n']}, {'input': '11 13\\r\\ncZAMfd\\r\\nSWQnweM\\r\\nKlQW\\r\\nWRsnNZT\\r\\nix\\r\\nUC\\r\\nLWqsVHcWec\\r\\nfeb\\r\\ncBy\\r\\ntvk\\r\\nRXDlX\\r\\nfeb SWQnweM\\r\\ncBy WRsnNZT\\r\\nLWqsVHcWec KlQW\\r\\nRXDlX feb\\r\\nLWqsVHcWec cZAMfd\\r\\ncBy UC\\r\\nWRsnNZT SWQnweM\\r\\nRXDlX cBy\\r\\ntvk UC\\r\\ncBy SWQnweM\\r\\nUC KlQW\\r\\nRXDlX KlQW\\r\\nUC WRsnNZT\\r\\n', 'output': ['6\\r\\nKlQW\\r\\nWRsnNZT\\r\\ncZAMfd\\r\\nfeb\\r\\nix\\r\\ntvk\\r\\n']}, {'input': '4 2\\r\\nadQx\\r\\nrJGeodBycK\\r\\ntgPYZk\\r\\ncz\\r\\ncz tgPYZk\\r\\nrJGeodBycK adQx\\r\\n', 'output': ['2\\r\\nadQx\\r\\ncz\\r\\n']}, {'input': '4 2\\r\\noVemoZhjW\\r\\nHspFEry\\r\\nhFO\\r\\njxt\\r\\nhFO HspFEry\\r\\njxt oVemoZhjW\\r\\n', 'output': ['2\\r\\nHspFEry\\r\\njxt\\r\\n']}, {'input': '5 2\\r\\niBrgNFlNXd\\r\\nlnGPIV\\r\\nnb\\r\\nB\\r\\nVgqRcEOG\\r\\nlnGPIV iBrgNFlNXd\\r\\nB iBrgNFlNXd\\r\\n', 'output': ['4\\r\\nB\\r\\nVgqRcEOG\\r\\nlnGPIV\\r\\nnb\\r\\n']}, {'input': '5 1\\r\\nWEYUdpYmZp\\r\\nfhNmMpjr\\r\\nydARivBg\\r\\ncilTtE\\r\\nyeXxkhPzB\\r\\nyeXxkhPzB cilTtE\\r\\n', 'output': ['4\\r\\nWEYUdpYmZp\\r\\ncilTtE\\r\\nfhNmMpjr\\r\\nydARivBg\\r\\n']}, {'input': '6 9\\r\\noySkmhCD\\r\\nUIKWj\\r\\nmHolKkBx\\r\\nQBikssqz\\r\\nZ\\r\\nzoFUJYa\\r\\nZ UIKWj\\r\\nQBikssqz oySkmhCD\\r\\nQBikssqz UIKWj\\r\\nZ oySkmhCD\\r\\nzoFUJYa UIKWj\\r\\nzoFUJYa Z\\r\\nzoFUJYa mHolKkBx\\r\\nzoFUJYa QBikssqz\\r\\nQBikssqz mHolKkBx\\r\\n', 'output': ['3\\r\\nUIKWj\\r\\nmHolKkBx\\r\\noySkmhCD\\r\\n']}, {'input': '6 1\\r\\nuPVIuLBuYM\\r\\nVejWyKCtbN\\r\\nqqjgF\\r\\nulBD\\r\\nDRNzxJU\\r\\nCOzbXWOt\\r\\nulBD qqjgF\\r\\n', 'output': ['5\\r\\nCOzbXWOt\\r\\nDRNzxJU\\r\\nVejWyKCtbN\\r\\nqqjgF\\r\\nuPVIuLBuYM\\r\\n']}, {'input': '7 14\\r\\nFXCT\\r\\nn\\r\\no\\r\\nS\\r\\nMdFuonu\\r\\nmszv\\r\\nbqScOCw\\r\\nS o\\r\\nbqScOCw FXCT\\r\\nMdFuonu o\\r\\no n\\r\\nbqScOCw n\\r\\nmszv S\\r\\nbqScOCw MdFuonu\\r\\nmszv n\\r\\nS FXCT\\r\\nbqScOCw o\\r\\no FXCT\\r\\nmszv MdFuonu\\r\\nmszv FXCT\\r\\nbqScOCw mszv\\r\\n', 'output': ['3\\r\\nFXCT\\r\\nMdFuonu\\r\\nn\\r\\n']}, {'input': '7 6\\r\\nj\\r\\nZ\\r\\nPZNeTyY\\r\\nm\\r\\na\\r\\nUj\\r\\nsuaaSiKcK\\r\\nUj PZNeTyY\\r\\na j\\r\\nPZNeTyY Z\\r\\nPZNeTyY j\\r\\nm PZNeTyY\\r\\nm j\\r\\n', 'output': ['5\\r\\nUj\\r\\nZ\\r\\na\\r\\nm\\r\\nsuaaSiKcK\\r\\n']}, {'input': '8 6\\r\\nU\\r\\nC\\r\\nPEElYwaxf\\r\\nVubTXNI\\r\\nJ\\r\\nIxZUHV\\r\\nhLNFnzmqFE\\r\\nDPPvwuWvmA\\r\\nhLNFnzmqFE IxZUHV\\r\\nIxZUHV C\\r\\nJ PEElYwaxf\\r\\nIxZUHV PEElYwaxf\\r\\nPEElYwaxf C\\r\\nJ VubTXNI\\r\\n', 'output': ['5\\r\\nC\\r\\nDPPvwuWvmA\\r\\nJ\\r\\nU\\r\\nhLNFnzmqFE\\r\\n']}, {'input': '8 12\\r\\nBkgxqAF\\r\\nKhq\\r\\nNpIfk\\r\\nkheqUyDVG\\r\\niRBkHlRpp\\r\\nZDaQY\\r\\nNG\\r\\nqN\\r\\nqN BkgxqAF\\r\\nNpIfk BkgxqAF\\r\\niRBkHlRpp BkgxqAF\\r\\niRBkHlRpp NpIfk\\r\\nNG Khq\\r\\niRBkHlRpp Khq\\r\\nNG ZDaQY\\r\\nNG iRBkHlRpp\\r\\nNG NpIfk\\r\\nqN Khq\\r\\nZDaQY kheqUyDVG\\r\\nNpIfk Khq\\r\\n', 'output': ['3\\r\\nBkgxqAF\\r\\nKhq\\r\\nZDaQY\\r\\n']}, {'input': '9 5\\r\\nRFiow\\r\\naxgvtiBGbx\\r\\ngGBVZtI\\r\\nVWAxrqx\\r\\nmnASVEQI\\r\\ntZHzWGAvXc\\r\\nBeaCYhIRLy\\r\\nhTdUL\\r\\nFJd\\r\\nhTdUL RFiow\\r\\nhTdUL gGBVZtI\\r\\nFJd axgvtiBGbx\\r\\nFJd BeaCYhIRLy\\r\\nhTdUL axgvtiBGbx\\r\\n', 'output': ['7\\r\\nBeaCYhIRLy\\r\\nRFiow\\r\\nVWAxrqx\\r\\naxgvtiBGbx\\r\\ngGBVZtI\\r\\nmnASVEQI\\r\\ntZHzWGAvXc\\r\\n']}, {'input': '9 13\\r\\nYiUXqlBUx\\r\\nQNgYuX\\r\\ndPtyZ\\r\\nITtwRJCv\\r\\nLJ\\r\\nrAG\\r\\nOgxNq\\r\\nsitechE\\r\\nvVAAz\\r\\nOgxNq QNgYuX\\r\\nOgxNq dPtyZ\\r\\nsitechE rAG\\r\\nLJ QNgYuX\\r\\nQNgYuX YiUXqlBUx\\r\\nOgxNq LJ\\r\\nvVAAz OgxNq\\r\\nrAG dPtyZ\\r\\nvVAAz LJ\\r\\nvVAAz ITtwRJCv\\r\\nsitechE LJ\\r\\nrAG YiUXqlBUx\\r\\nsitechE QNgYuX\\r\\n', 'output': ['4\\r\\nITtwRJCv\\r\\nLJ\\r\\nYiUXqlBUx\\r\\ndPtyZ\\r\\n']}, {'input': '9 6\\r\\nfLfek\\r\\nEQPcotnrp\\r\\nCaAlbwoIL\\r\\nVG\\r\\nNAZKIBiKT\\r\\noFy\\r\\njFluh\\r\\nKqHXRNya\\r\\nQSwgobA\\r\\noFy EQPcotnrp\\r\\nKqHXRNya jFluh\\r\\noFy NAZKIBiKT\\r\\njFluh oFy\\r\\njFluh fLfek\\r\\noFy fLfek\\r\\n', 'output': ['7\\r\\nCaAlbwoIL\\r\\nEQPcotnrp\\r\\nKqHXRNya\\r\\nNAZKIBiKT\\r\\nQSwgobA\\r\\nVG\\r\\nfLfek\\r\\n']}, {'input': '9 14\\r\\nmoRNeufngu\\r\\nBSKI\\r\\nzXl\\r\\ngwmIDluW\\r\\nYFn\\r\\nHvasEgl\\r\\nXcAC\\r\\neVP\\r\\nAiOm\\r\\neVP BSKI\\r\\neVP YFn\\r\\nHvasEgl YFn\\r\\neVP XcAC\\r\\nAiOm HvasEgl\\r\\nXcAC YFn\\r\\nzXl moRNeufngu\\r\\neVP zXl\\r\\nHvasEgl BSKI\\r\\nXcAC gwmIDluW\\r\\nXcAC HvasEgl\\r\\nYFn moRNeufngu\\r\\nzXl BSKI\\r\\nHvasEgl gwmIDluW\\r\\n', 'output': ['4\\r\\nAiOm\\r\\nBSKI\\r\\nYFn\\r\\ngwmIDluW\\r\\n']}, {'input': '15 8\\r\\ncXeOANpvBF\\r\\nbkeDfi\\r\\nnsEUAKNxQI\\r\\noSIb\\r\\naU\\r\\nXYXYVo\\r\\nduZQ\\r\\naPkr\\r\\nPVrHpL\\r\\nmVgmv\\r\\nhHhukllwbf\\r\\nGkNPGYVxjY\\r\\nbgBjA\\r\\nslNKCLIlOv\\r\\nmPILXy\\r\\nbgBjA cXeOANpvBF\\r\\nGkNPGYVxjY cXeOANpvBF\\r\\nslNKCLIlOv GkNPGYVxjY\\r\\nGkNPGYVxjY mVgmv\\r\\nXYXYVo cXeOANpvBF\\r\\nslNKCLIlOv bkeDfi\\r\\nmVgmv aPkr\\r\\nslNKCLIlOv nsEUAKNxQI\\r\\n', 'output': ['12\\r\\nGkNPGYVxjY\\r\\nPVrHpL\\r\\nXYXYVo\\r\\naPkr\\r\\naU\\r\\nbgBjA\\r\\nbkeDfi\\r\\nduZQ\\r\\nhHhukllwbf\\r\\nmPILXy\\r\\nnsEUAKNxQI\\r\\noSIb\\r\\n']}, {'input': '15 3\\r\\na\\r\\nYclKFJoaIA\\r\\nhalYcB\\r\\nbLOlPzAeQ\\r\\ntckjt\\r\\noDFijpx\\r\\nb\\r\\npz\\r\\nVDLb\\r\\nlCEHPibt\\r\\noF\\r\\npzJD\\r\\nMC\\r\\nqklsX\\r\\nTAU\\r\\npzJD tckjt\\r\\nqklsX oF\\r\\nMC pzJD\\r\\n', 'output': ['13\\r\\nMC\\r\\nTAU\\r\\nVDLb\\r\\nYclKFJoaIA\\r\\na\\r\\nb\\r\\nbLOlPzAeQ\\r\\nhalYcB\\r\\nlCEHPibt\\r\\noDFijpx\\r\\noF\\r\\npz\\r\\ntckjt\\r\\n']}, {'input': '16 8\\r\\nJIo\\r\\nINanHVnP\\r\\nKaxyCBWt\\r\\nkVfnsz\\r\\nRAwFYCrSvI\\r\\nF\\r\\nvIEWWIvh\\r\\nTGF\\r\\nFeuhJJwJ\\r\\nTngcmS\\r\\nSqI\\r\\nRmcaVngp\\r\\neGwhme\\r\\nlwaFfXzM\\r\\noabGmpvVH\\r\\nTMT\\r\\nFeuhJJwJ F\\r\\neGwhme FeuhJJwJ\\r\\nRmcaVngp SqI\\r\\nINanHVnP JIo\\r\\nSqI FeuhJJwJ\\r\\nF kVfnsz\\r\\nTGF F\\r\\nTMT TGF\\r\\n', 'output': ['11\\r\\nF\\r\\nINanHVnP\\r\\nKaxyCBWt\\r\\nRAwFYCrSvI\\r\\nRmcaVngp\\r\\nTMT\\r\\nTngcmS\\r\\neGwhme\\r\\nlwaFfXzM\\r\\noabGmpvVH\\r\\nvIEWWIvh\\r\\n']}, {'input': '16 25\\r\\nbBZ\\r\\nEr\\r\\nZ\\r\\nrYJmfZLgmx\\r\\nPaJNrF\\r\\naHtRqSxOO\\r\\nD\\r\\nhsagsG\\r\\nMDuBOXrmWH\\r\\nSgjMQZ\\r\\nYXgWq\\r\\nxDwpppG\\r\\nSDY\\r\\nJwZWx\\r\\ncOzrgrBaE\\r\\nFJYX\\r\\nYXgWq SgjMQZ\\r\\nSDY PaJNrF\\r\\nFJYX rYJmfZLgmx\\r\\nhsagsG Er\\r\\nxDwpppG rYJmfZLgmx\\r\\naHtRqSxOO rYJmfZLgmx\\r\\nhsagsG bBZ\\r\\nJwZWx hsagsG\\r\\nFJYX cOzrgrBaE\\r\\nSDY YXgWq\\r\\nFJYX Z\\r\\nJwZWx rYJmfZLgmx\\r\\nD rYJmfZLgmx\\r\\nYXgWq Z\\r\\nrYJmfZLgmx Z\\r\\naHtRqSxOO bBZ\\r\\nSDY rYJmfZLgmx\\r\\ncOzrgrBaE D\\r\\nYXgWq hsagsG\\r\\nSDY aHtRqSxOO\\r\\ncOzrgrBaE xDwpppG\\r\\nSDY bBZ\\r\\nSDY Er\\r\\nJwZWx xDwpppG\\r\\nFJYX JwZWx\\r\\n', 'output': ['8\\r\\nD\\r\\nEr\\r\\nJwZWx\\r\\nMDuBOXrmWH\\r\\nPaJNrF\\r\\nSgjMQZ\\r\\nZ\\r\\naHtRqSxOO\\r\\n']}, {'input': '16 37\\r\\ntIWi\\r\\nq\\r\\nIEAYCq\\r\\nXozwkum\\r\\nCC\\r\\niPwfd\\r\\nS\\r\\nXEf\\r\\nWqEiwkH\\r\\nWX\\r\\ne\\r\\nltmruh\\r\\nKGx\\r\\nauTUYZRC\\r\\nmeJa\\r\\nM\\r\\nmeJa q\\r\\nKGx e\\r\\nXEf Xozwkum\\r\\ne q\\r\\nauTUYZRC KGx\\r\\ne CC\\r\\nM CC\\r\\nM meJa\\r\\nWX CC\\r\\nWqEiwkH IEAYCq\\r\\nauTUYZRC WqEiwkH\\r\\nKGx WX\\r\\nmeJa KGx\\r\\nXEf q\\r\\nauTUYZRC XEf\\r\\nauTUYZRC IEAYCq\\r\\nWX XEf\\r\\nM XEf\\r\\nWqEiwkH q\\r\\nM KGx\\r\\nKGx CC\\r\\nM e\\r\\nWqEiwkH Xozwkum\\r\\nCC q\\r\\nS Xozwkum\\r\\nKGx tIWi\\r\\nWX q\\r\\nXEf S\\r\\nauTUYZRC S\\r\\nCC IEAYCq\\r\\nKGx IEAYCq\\r\\ne WqEiwkH\\r\\nM S\\r\\nauTUYZRC q\\r\\nS tIWi\\r\\nM ltmruh\\r\\nM iPwfd\\r\\n', 'output': ['8\\r\\nIEAYCq\\r\\nWX\\r\\nXozwkum\\r\\ne\\r\\niPwfd\\r\\nltmruh\\r\\nmeJa\\r\\ntIWi\\r\\n']}, {'input': '16 11\\r\\ntulhZxeKgo\\r\\nbrAXY\\r\\nyQUkaihDAg\\r\\nmwjlDVaktK\\r\\nweVtBIP\\r\\nzRwb\\r\\nds\\r\\nhXPfJrL\\r\\nAdIfP\\r\\nazQeXn\\r\\nB\\r\\nJlmscIUOxO\\r\\nZuxr\\r\\nV\\r\\nOfyLIUO\\r\\nuaMl\\r\\nhXPfJrL yQUkaihDAg\\r\\nweVtBIP yQUkaihDAg\\r\\nazQeXn hXPfJrL\\r\\nV tulhZxeKgo\\r\\nzRwb yQUkaihDAg\\r\\nds mwjlDVaktK\\r\\nzRwb brAXY\\r\\nyQUkaihDAg brAXY\\r\\nB yQUkaihDAg\\r\\nAdIfP mwjlDVaktK\\r\\nbrAXY tulhZxeKgo\\r\\n', 'output': ['11\\r\\nAdIfP\\r\\nB\\r\\nJlmscIUOxO\\r\\nOfyLIUO\\r\\nV\\r\\nZuxr\\r\\nazQeXn\\r\\nbrAXY\\r\\nds\\r\\nuaMl\\r\\nweVtBIP\\r\\n']}, {'input': '5 10\\r\\nTaras\\r\\nNikita\\r\\nSergey\\r\\nAndrey\\r\\nRomka\\r\\nTaras Romka\\r\\nTaras Nikita\\r\\nTaras Sergey\\r\\nTaras Andrey\\r\\nRomka Nikita\\r\\nRomka Sergey\\r\\nRomka Andrey\\r\\nNikita Sergey\\r\\nNikita Andrey\\r\\nSergey Andrey\\r\\n', 'output': ['1\\r\\nAndrey\\r\\n']}]","id":130,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    names = [input() for _ in range(n)]\\n    bad_pairs = set()\\n    for _ in range(m):\\n        a, b = input().split()\\n        bad_pairs.add(tuple(sorted((a, b))))\\n\\n    best_team = []\\n\\n    for i in range(1 << n):\\n        team = []\\n        for j in range(n):\\n            if (i >> j) & 1:\\n                team.append(names[j])\\n        \\n        valid = True\\n        for k in range(len(team)):\\n            for l in range(k + 1, len(team)):\\n                if tuple(sorted((team[k], team[l]))) in bad_pairs:\\n                    valid = False\\n                    break\\n            if not valid:\\n                break\\n        \\n        if valid:\\n            if len(team) > len(best_team):\\n                best_team = team\\n            elif len(team) == len(best_team) and team:\\n                best_team = sorted(team) if sorted(team) < sorted(best_team) else best_team\\n\\n    print(len(best_team))\\n    for name in sorted(best_team):\\n        print(name)\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    names = [input() for _ in range(n)]\\n    dislikes = {}\\n    for _ in range(m):\\n        a, b = input().split()\\n        if a not in dislikes:\\n            dislikes[a] = set()\\n        if b not in dislikes:\\n            dislikes[b] = set()\\n        dislikes[a].add(b)\\n        dislikes[b].add(a)\\n\\n    best_team = []\\n    for i in range(1 << n):\\n        team = []\\n        for j in range(n):\\n            if (i >> j) & 1:\\n                team.append(names[j])\\n        \\n        valid = True\\n        for j in range(len(team)):\\n            for k in range(j + 1, len(team)):\\n                if team[j] in dislikes and team[k] in dislikes[team[j]]:\\n                    valid = False\\n                    break\\n            if not valid:\\n                break\\n        \\n        if valid:\\n            if len(team) > len(best_team):\\n                best_team = sorted(team)\\n            elif len(team) == len(best_team) and team and best_team and team < best_team:\\n                best_team = sorted(team)\\n\\n    print(len(best_team))\\n    for name in sorted(best_team):\\n        print(name)\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    names = [input() for _ in range(n)]\\n    bad_pairs = set()\\n    for _ in range(m):\\n        a, b = input().split()\\n        bad_pairs.add(tuple(sorted((a, b))))\\n\\n    best_team = []\\n\\n    for i in range(1 << n):\\n        team = []\\n        for j in range(n):\\n            if (i >> j) & 1:\\n                team.append(names[j])\\n        \\n        valid = True\\n        for k in range(len(team)):\\n            for l in range(k + 1, len(team)):\\n                if tuple(sorted((team[k], team[l]))) in bad_pairs:\\n                    valid = False\\n                    break\\n            if not valid:\\n                break\\n        \\n        if valid:\\n            if len(team) > len(best_team):\\n                best_team = team\\n            elif len(team) == len(best_team) and team:\\n                best_team = sorted(team) if sorted(team) < sorted(best_team) else best_team\\n\\n    print(len(best_team))\\n    for name in sorted(best_team):\\n        print(name)\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    names = [input() for _ in range(n)]\\n    dislikes = {}\\n    for _ in range(m):\\n        a, b = input().split()\\n        if a not in dislikes:\\n            dislikes[a] = set()\\n        if b not in dislikes:\\n            dislikes[b] = set()\\n        dislikes[a].add(b)\\n        dislikes[b].add(a)\\n\\n    best_team = []\\n    for i in range(1 << n):\\n        team = []\\n        for j in range(n):\\n            if (i >> j) & 1:\\n                team.append(names[j])\\n        \\n        valid = True\\n        for j in range(len(team)):\\n            for k in range(j + 1, len(team)):\\n                if team[j] in dislikes and team[k] in dislikes[team[j]]:\\n                    valid = False\\n                    break\\n            if not valid:\\n                break\\n        \\n        if valid:\\n            if len(team) > len(best_team):\\n                best_team = sorted(team)\\n            elif len(team) == len(best_team) and team and best_team and team < best_team:\\n                best_team = sorted(team)\\n\\n    print(len(best_team))\\n    for name in sorted(best_team):\\n        print(name)\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"Anna and Maria are in charge of the math club for junior students. When the club gathers together, the students behave badly. They've brought lots of shoe laces to the club and got tied with each other. Specifically, each string ties together two students. Besides, if two students are tied, then the lace connects the first student with the second one as well as the second student with the first one.To restore order, Anna and Maria do the following. First, for each student Anna finds out what other students he is tied to. If a student is tied to exactly one other student, Anna reprimands him. Then Maria gathers in a single group all the students who have been just reprimanded. She kicks them out from the club. This group of students immediately leaves the club. These students takes with them the laces that used to tie them. Then again for every student Anna finds out how many other students he is tied to and so on. And they do so until Anna can reprimand at least one student.Determine how many groups of students will be kicked out of the club.","input_specification":"The first line contains two integers n and m \u2014 the initial number of students and laces (). The students are numbered from 1 to n, and the laces are numbered from 1 to m. Next m lines each contain two integers a and b \u2014 the numbers of students tied by the i-th lace (1\u2009\u2264\u2009a,\u2009b\u2009\u2264\u2009n,\u2009a\u2009\u2260\u2009b). It is guaranteed that no two students are tied with more than one lace. No lace ties a student to himself.","output_specification":"Print the single number \u2014 the number of groups of students that will be kicked out from the club.","notes":"NoteIn the first sample Anna and Maria won't kick out any group of students \u2014 in the initial position every student is tied to two other students and Anna won't be able to reprimand anyone.In the second sample four students are tied in a chain and two more are running by themselves. First Anna and Maria kick out the two students from both ends of the chain (1 and 4), then \u2014 two other students from the chain (2 and 3). At that the students who are running by themselves will stay in the club.In the third sample Anna and Maria will momentarily kick out all students except for the fourth one and the process stops at that point. The correct answer is one.","sample_inputs":["3 3\n1 2\n2 3\n3 1","6 3\n1 2\n2 3\n3 4","6 5\n1 4\n2 4\n3 4\n5 4\n6 4"],"sample_outputs":["0","2","1"],"src_uid":"f8315dc903b0542c453cab4577bcb20d","lang_cluster":"Python","difficulty":1200,"human_solution":"r = lambda: raw_input().strip()\n\nn,m = map(int,r().split())\nties = [map(int,r().split()) for _ in xrange(m)]\ncount = 0\nwhile len(ties)>0:\n    all_ties = []\n    l1 = len(ties)\n    for t in ties:\n        all_ties.append(t[0])\n        all_ties.append(t[1])\n    for i in xrange(n):\n        if all_ties.count(i+1)==1:\n            for t in xrange(len(ties)):\n                if ties[t][0] == i+1 or ties[t][1] == i+1:\n                    ties.remove(ties[t])\n                    break\n    l2 = len(ties)\n    if l1==l2:\n        break\n    count += 1\nprint count\n","testcases":"[{'input': '3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '6 3\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '6 5\\r\\n1 4\\r\\n2 4\\r\\n3 4\\r\\n5 4\\r\\n6 4\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 5\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 4\\r\\n1 4\\r\\n4 3\\r\\n4 5\\r\\n5 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '11 10\\r\\n1 2\\r\\n1 3\\r\\n3 4\\r\\n1 5\\r\\n5 6\\r\\n6 7\\r\\n1 8\\r\\n8 9\\r\\n9 10\\r\\n10 11\\r\\n', 'output': ['4\\r\\n']}, {'input': '7 7\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n1 4\\r\\n4 5\\r\\n4 6\\r\\n4 7\\r\\n', 'output': ['2\\r\\n']}, {'input': '12 49\\r\\n6 3\\r\\n12 9\\r\\n10 11\\r\\n3 5\\r\\n10 2\\r\\n6 9\\r\\n8 5\\r\\n6 12\\r\\n7 3\\r\\n3 12\\r\\n3 2\\r\\n5 6\\r\\n7 5\\r\\n9 2\\r\\n11 1\\r\\n7 6\\r\\n5 4\\r\\n8 7\\r\\n12 5\\r\\n5 11\\r\\n8 9\\r\\n10 3\\r\\n6 2\\r\\n10 4\\r\\n9 10\\r\\n9 11\\r\\n11 3\\r\\n5 9\\r\\n11 6\\r\\n10 8\\r\\n7 9\\r\\n10 7\\r\\n4 6\\r\\n3 8\\r\\n4 11\\r\\n12 2\\r\\n4 9\\r\\n2 11\\r\\n7 11\\r\\n1 5\\r\\n7 2\\r\\n8 1\\r\\n4 12\\r\\n9 1\\r\\n4 2\\r\\n8 2\\r\\n11 12\\r\\n3 1\\r\\n1 6\\r\\n', 'output': ['0\\r\\n']}, {'input': '10 29\\r\\n4 5\\r\\n1 7\\r\\n4 2\\r\\n3 8\\r\\n7 6\\r\\n8 10\\r\\n10 6\\r\\n4 1\\r\\n10 1\\r\\n6 2\\r\\n7 4\\r\\n7 10\\r\\n2 7\\r\\n9 8\\r\\n5 10\\r\\n2 5\\r\\n8 5\\r\\n4 9\\r\\n2 8\\r\\n5 7\\r\\n4 8\\r\\n7 3\\r\\n6 5\\r\\n1 3\\r\\n1 9\\r\\n10 4\\r\\n10 9\\r\\n10 2\\r\\n2 3\\r\\n', 'output': ['0\\r\\n']}, {'input': '9 33\\r\\n5 7\\r\\n5 9\\r\\n9 6\\r\\n9 1\\r\\n7 4\\r\\n3 5\\r\\n7 8\\r\\n8 6\\r\\n3 6\\r\\n8 2\\r\\n3 8\\r\\n1 6\\r\\n1 8\\r\\n1 4\\r\\n4 2\\r\\n1 2\\r\\n2 5\\r\\n3 4\\r\\n8 5\\r\\n2 6\\r\\n3 1\\r\\n1 5\\r\\n1 7\\r\\n3 2\\r\\n5 4\\r\\n9 4\\r\\n3 9\\r\\n7 3\\r\\n6 4\\r\\n9 8\\r\\n7 9\\r\\n8 4\\r\\n6 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '7 8\\r\\n5 7\\r\\n2 7\\r\\n1 6\\r\\n1 3\\r\\n3 7\\r\\n6 3\\r\\n6 4\\r\\n2 6\\r\\n', 'output': ['1\\r\\n']}, {'input': '6 15\\r\\n3 1\\r\\n4 5\\r\\n1 4\\r\\n6 2\\r\\n3 5\\r\\n6 3\\r\\n1 6\\r\\n1 5\\r\\n2 3\\r\\n2 5\\r\\n6 4\\r\\n5 6\\r\\n4 2\\r\\n1 2\\r\\n3 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '7 11\\r\\n5 3\\r\\n6 5\\r\\n6 4\\r\\n1 6\\r\\n7 1\\r\\n2 6\\r\\n7 5\\r\\n2 5\\r\\n3 1\\r\\n3 4\\r\\n2 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '95 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '100 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '62 30\\r\\n29 51\\r\\n29 55\\r\\n4 12\\r\\n53 25\\r\\n36 28\\r\\n32 11\\r\\n29 11\\r\\n47 9\\r\\n21 8\\r\\n25 4\\r\\n51 19\\r\\n26 56\\r\\n22 21\\r\\n37 9\\r\\n9 33\\r\\n7 25\\r\\n16 7\\r\\n40 49\\r\\n15 21\\r\\n49 58\\r\\n34 30\\r\\n20 46\\r\\n62 48\\r\\n53 57\\r\\n33 6\\r\\n60 37\\r\\n41 34\\r\\n62 36\\r\\n36 43\\r\\n11 39\\r\\n', 'output': ['2\\r\\n']}, {'input': '56 25\\r\\n12 40\\r\\n31 27\\r\\n18 40\\r\\n1 43\\r\\n9 10\\r\\n25 47\\r\\n27 29\\r\\n26 28\\r\\n19 38\\r\\n19 40\\r\\n22 14\\r\\n21 51\\r\\n29 31\\r\\n55 29\\r\\n51 33\\r\\n20 17\\r\\n24 15\\r\\n3 48\\r\\n31 56\\r\\n15 29\\r\\n49 42\\r\\n50 4\\r\\n22 42\\r\\n25 17\\r\\n18 51\\r\\n', 'output': ['3\\r\\n']}, {'input': '51 29\\r\\n36 30\\r\\n37 45\\r\\n4 24\\r\\n40 18\\r\\n47 35\\r\\n15 1\\r\\n30 38\\r\\n15 18\\r\\n32 40\\r\\n34 42\\r\\n2 47\\r\\n35 21\\r\\n25 28\\r\\n13 1\\r\\n13 28\\r\\n36 1\\r\\n46 47\\r\\n22 17\\r\\n41 45\\r\\n43 45\\r\\n40 15\\r\\n29 35\\r\\n47 15\\r\\n30 21\\r\\n9 14\\r\\n18 38\\r\\n18 50\\r\\n42 10\\r\\n31 41\\r\\n', 'output': ['3\\r\\n']}, {'input': '72 45\\r\\n5 15\\r\\n8 18\\r\\n40 25\\r\\n71 66\\r\\n67 22\\r\\n6 44\\r\\n16 25\\r\\n8 23\\r\\n19 70\\r\\n26 34\\r\\n48 15\\r\\n24 2\\r\\n54 68\\r\\n44 43\\r\\n17 37\\r\\n49 19\\r\\n71 49\\r\\n34 38\\r\\n59 1\\r\\n65 70\\r\\n11 54\\r\\n5 11\\r\\n15 31\\r\\n29 50\\r\\n48 16\\r\\n70 57\\r\\n25 59\\r\\n2 59\\r\\n56 12\\r\\n66 62\\r\\n24 16\\r\\n46 27\\r\\n45 67\\r\\n68 43\\r\\n31 11\\r\\n31 30\\r\\n8 44\\r\\n64 33\\r\\n38 44\\r\\n54 10\\r\\n13 9\\r\\n7 51\\r\\n25 4\\r\\n40 70\\r\\n26 65\\r\\n', 'output': ['5\\r\\n']}, {'input': '56 22\\r\\n17 27\\r\\n48 49\\r\\n29 8\\r\\n47 20\\r\\n32 7\\r\\n44 5\\r\\n14 39\\r\\n5 13\\r\\n40 2\\r\\n50 42\\r\\n38 9\\r\\n18 37\\r\\n16 44\\r\\n21 32\\r\\n21 39\\r\\n37 54\\r\\n19 46\\r\\n30 47\\r\\n17 13\\r\\n30 31\\r\\n49 16\\r\\n56 7\\r\\n', 'output': ['4\\r\\n']}, {'input': '81 46\\r\\n53 58\\r\\n31 14\\r\\n18 54\\r\\n43 61\\r\\n57 65\\r\\n6 38\\r\\n49 5\\r\\n6 40\\r\\n6 10\\r\\n17 72\\r\\n27 48\\r\\n58 39\\r\\n21 75\\r\\n21 43\\r\\n78 20\\r\\n34 4\\r\\n15 35\\r\\n74 48\\r\\n76 15\\r\\n49 38\\r\\n46 51\\r\\n78 9\\r\\n80 5\\r\\n26 42\\r\\n64 31\\r\\n46 72\\r\\n1 29\\r\\n20 17\\r\\n32 45\\r\\n53 43\\r\\n24 5\\r\\n52 59\\r\\n3 80\\r\\n78 19\\r\\n61 17\\r\\n80 12\\r\\n17 8\\r\\n63 2\\r\\n8 4\\r\\n44 10\\r\\n53 72\\r\\n18 60\\r\\n68 15\\r\\n17 58\\r\\n79 71\\r\\n73 35\\r\\n', 'output': ['4\\r\\n']}, {'input': '82 46\\r\\n64 43\\r\\n32 24\\r\\n57 30\\r\\n24 46\\r\\n70 12\\r\\n23 41\\r\\n63 39\\r\\n46 70\\r\\n4 61\\r\\n19 12\\r\\n39 79\\r\\n14 28\\r\\n37 3\\r\\n12 27\\r\\n15 20\\r\\n35 39\\r\\n25 64\\r\\n59 16\\r\\n68 63\\r\\n37 14\\r\\n76 7\\r\\n67 29\\r\\n9 5\\r\\n14 55\\r\\n46 26\\r\\n71 79\\r\\n47 42\\r\\n5 55\\r\\n18 45\\r\\n28 40\\r\\n44 78\\r\\n74 9\\r\\n60 53\\r\\n44 19\\r\\n52 81\\r\\n65 52\\r\\n40 13\\r\\n40 19\\r\\n43 1\\r\\n24 23\\r\\n68 9\\r\\n16 20\\r\\n70 14\\r\\n41 40\\r\\n29 10\\r\\n45 65\\r\\n', 'output': ['8\\r\\n']}, {'input': '69 38\\r\\n63 35\\r\\n52 17\\r\\n43 69\\r\\n2 57\\r\\n12 5\\r\\n26 36\\r\\n13 10\\r\\n16 68\\r\\n5 18\\r\\n5 41\\r\\n10 4\\r\\n60 9\\r\\n39 22\\r\\n39 28\\r\\n53 57\\r\\n13 52\\r\\n66 38\\r\\n49 61\\r\\n12 19\\r\\n27 46\\r\\n67 7\\r\\n25 8\\r\\n23 58\\r\\n52 34\\r\\n29 2\\r\\n2 42\\r\\n8 53\\r\\n57 43\\r\\n68 11\\r\\n48 28\\r\\n56 19\\r\\n46 33\\r\\n63 21\\r\\n57 16\\r\\n68 59\\r\\n67 34\\r\\n28 43\\r\\n56 36\\r\\n', 'output': ['4\\r\\n']}, {'input': '75 31\\r\\n32 50\\r\\n52 8\\r\\n21 9\\r\\n68 35\\r\\n12 72\\r\\n47 26\\r\\n38 58\\r\\n40 55\\r\\n31 70\\r\\n53 75\\r\\n44 1\\r\\n65 22\\r\\n33 22\\r\\n33 29\\r\\n14 39\\r\\n1 63\\r\\n16 52\\r\\n70 15\\r\\n12 27\\r\\n63 31\\r\\n47 9\\r\\n71 31\\r\\n43 17\\r\\n43 49\\r\\n8 26\\r\\n11 39\\r\\n9 22\\r\\n30 45\\r\\n65 47\\r\\n32 9\\r\\n60 70\\r\\n', 'output': ['4\\r\\n']}, {'input': '77 41\\r\\n48 45\\r\\n50 36\\r\\n6 69\\r\\n70 3\\r\\n22 21\\r\\n72 6\\r\\n54 3\\r\\n49 31\\r\\n2 23\\r\\n14 59\\r\\n68 58\\r\\n4 54\\r\\n60 12\\r\\n63 60\\r\\n44 24\\r\\n28 24\\r\\n40 8\\r\\n5 1\\r\\n13 24\\r\\n29 15\\r\\n19 76\\r\\n70 50\\r\\n65 71\\r\\n23 33\\r\\n58 16\\r\\n50 42\\r\\n71 28\\r\\n58 54\\r\\n24 73\\r\\n6 17\\r\\n29 13\\r\\n60 4\\r\\n42 4\\r\\n21 60\\r\\n77 39\\r\\n57 9\\r\\n51 19\\r\\n61 6\\r\\n49 36\\r\\n24 32\\r\\n41 66\\r\\n', 'output': ['3\\r\\n']}, {'input': '72 39\\r\\n9 44\\r\\n15 12\\r\\n2 53\\r\\n34 18\\r\\n41 70\\r\\n54 72\\r\\n39 19\\r\\n26 7\\r\\n4 54\\r\\n53 59\\r\\n46 49\\r\\n70 6\\r\\n9 10\\r\\n64 51\\r\\n31 60\\r\\n61 53\\r\\n59 71\\r\\n9 60\\r\\n67 16\\r\\n4 16\\r\\n34 3\\r\\n2 61\\r\\n16 23\\r\\n34 6\\r\\n10 18\\r\\n13 38\\r\\n66 40\\r\\n59 9\\r\\n40 14\\r\\n38 24\\r\\n31 48\\r\\n7 69\\r\\n20 39\\r\\n49 52\\r\\n32 67\\r\\n61 35\\r\\n62 45\\r\\n37 54\\r\\n5 27\\r\\n', 'output': ['8\\r\\n']}, {'input': '96 70\\r\\n30 37\\r\\n47 56\\r\\n19 79\\r\\n15 28\\r\\n2 43\\r\\n43 54\\r\\n59 75\\r\\n42 22\\r\\n38 18\\r\\n18 14\\r\\n47 41\\r\\n60 29\\r\\n35 11\\r\\n90 4\\r\\n14 41\\r\\n11 71\\r\\n41 24\\r\\n68 28\\r\\n45 92\\r\\n14 15\\r\\n34 63\\r\\n77 32\\r\\n67 38\\r\\n36 8\\r\\n37 4\\r\\n58 95\\r\\n68 84\\r\\n69 81\\r\\n35 23\\r\\n56 63\\r\\n78 91\\r\\n35 44\\r\\n66 63\\r\\n80 19\\r\\n87 88\\r\\n28 14\\r\\n62 35\\r\\n24 23\\r\\n83 37\\r\\n54 89\\r\\n14 40\\r\\n9 35\\r\\n94 9\\r\\n56 46\\r\\n92 70\\r\\n16 58\\r\\n96 31\\r\\n53 23\\r\\n56 5\\r\\n36 42\\r\\n89 77\\r\\n29 51\\r\\n26 13\\r\\n46 70\\r\\n25 56\\r\\n95 96\\r\\n3 51\\r\\n76 8\\r\\n36 82\\r\\n44 85\\r\\n54 56\\r\\n89 67\\r\\n32 5\\r\\n82 78\\r\\n33 65\\r\\n43 28\\r\\n35 1\\r\\n94 13\\r\\n26 24\\r\\n10 51\\r\\n', 'output': ['4\\r\\n']}, {'input': '76 49\\r\\n15 59\\r\\n23 26\\r\\n57 48\\r\\n49 51\\r\\n42 76\\r\\n36 40\\r\\n37 40\\r\\n29 15\\r\\n28 71\\r\\n47 70\\r\\n27 39\\r\\n76 21\\r\\n55 16\\r\\n21 18\\r\\n19 1\\r\\n25 31\\r\\n51 71\\r\\n54 42\\r\\n28 9\\r\\n61 69\\r\\n33 9\\r\\n18 19\\r\\n58 51\\r\\n51 45\\r\\n29 34\\r\\n9 67\\r\\n26 8\\r\\n70 37\\r\\n11 62\\r\\n24 22\\r\\n59 76\\r\\n67 17\\r\\n59 11\\r\\n54 1\\r\\n12 57\\r\\n23 3\\r\\n46 47\\r\\n37 20\\r\\n65 9\\r\\n51 12\\r\\n31 19\\r\\n56 13\\r\\n58 22\\r\\n26 59\\r\\n39 76\\r\\n27 11\\r\\n48 64\\r\\n59 35\\r\\n44 75\\r\\n', 'output': ['5\\r\\n']}, {'input': '52 26\\r\\n29 41\\r\\n16 26\\r\\n18 48\\r\\n31 17\\r\\n37 42\\r\\n26 1\\r\\n11 7\\r\\n29 6\\r\\n23 17\\r\\n12 47\\r\\n34 23\\r\\n41 16\\r\\n15 35\\r\\n25 21\\r\\n45 7\\r\\n52 2\\r\\n37 10\\r\\n28 19\\r\\n1 27\\r\\n30 47\\r\\n42 35\\r\\n50 30\\r\\n30 34\\r\\n19 30\\r\\n42 25\\r\\n47 31\\r\\n', 'output': ['3\\r\\n']}, {'input': '86 48\\r\\n59 34\\r\\n21 33\\r\\n45 20\\r\\n62 23\\r\\n4 68\\r\\n2 65\\r\\n63 26\\r\\n64 20\\r\\n51 34\\r\\n64 21\\r\\n68 78\\r\\n61 80\\r\\n81 3\\r\\n38 39\\r\\n47 48\\r\\n24 34\\r\\n44 71\\r\\n72 78\\r\\n50 2\\r\\n13 51\\r\\n82 78\\r\\n11 74\\r\\n14 48\\r\\n2 75\\r\\n49 55\\r\\n63 85\\r\\n20 85\\r\\n4 53\\r\\n51 15\\r\\n11 67\\r\\n1 15\\r\\n2 64\\r\\n10 81\\r\\n6 7\\r\\n68 18\\r\\n84 28\\r\\n77 69\\r\\n10 36\\r\\n15 14\\r\\n32 86\\r\\n16 79\\r\\n26 13\\r\\n38 55\\r\\n47 43\\r\\n47 39\\r\\n45 37\\r\\n58 81\\r\\n42 35\\r\\n', 'output': ['8\\r\\n']}, {'input': '58 29\\r\\n27 24\\r\\n40 52\\r\\n51 28\\r\\n44 50\\r\\n7 28\\r\\n14 53\\r\\n10 16\\r\\n16 45\\r\\n8 56\\r\\n35 26\\r\\n39 6\\r\\n6 14\\r\\n45 22\\r\\n35 13\\r\\n20 17\\r\\n42 6\\r\\n37 21\\r\\n4 11\\r\\n26 56\\r\\n54 55\\r\\n3 57\\r\\n40 3\\r\\n55 27\\r\\n4 51\\r\\n35 29\\r\\n50 16\\r\\n47 7\\r\\n48 20\\r\\n1 37\\r\\n', 'output': ['3\\r\\n']}, {'input': '51 23\\r\\n46 47\\r\\n31 27\\r\\n1 20\\r\\n49 16\\r\\n2 10\\r\\n29 47\\r\\n13 27\\r\\n34 26\\r\\n31 2\\r\\n28 20\\r\\n17 40\\r\\n39 4\\r\\n29 26\\r\\n28 44\\r\\n3 39\\r\\n50 12\\r\\n19 1\\r\\n30 21\\r\\n41 23\\r\\n2 29\\r\\n16 3\\r\\n49 28\\r\\n49 41\\r\\n', 'output': ['4\\r\\n']}, {'input': '75 43\\r\\n46 34\\r\\n33 12\\r\\n51 39\\r\\n47 74\\r\\n68 64\\r\\n40 46\\r\\n20 51\\r\\n47 19\\r\\n4 5\\r\\n57 59\\r\\n12 26\\r\\n68 65\\r\\n38 42\\r\\n73 37\\r\\n5 74\\r\\n36 61\\r\\n8 18\\r\\n58 33\\r\\n34 73\\r\\n42 43\\r\\n10 49\\r\\n70 50\\r\\n49 18\\r\\n24 53\\r\\n71 73\\r\\n44 24\\r\\n49 56\\r\\n24 29\\r\\n44 67\\r\\n70 46\\r\\n57 25\\r\\n73 63\\r\\n3 51\\r\\n30 71\\r\\n41 44\\r\\n17 69\\r\\n17 18\\r\\n19 68\\r\\n42 7\\r\\n11 51\\r\\n1 5\\r\\n72 23\\r\\n65 53\\r\\n', 'output': ['5\\r\\n']}]","id":131,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    adj = [[] for _ in range(n)]\\n    edges = []\\n    for _ in range(m):\\n        a, b = map(int, input().split())\\n        a -= 1\\n        b -= 1\\n        adj[a].append(b)\\n        adj[b].append(a)\\n        edges.append((a, b))\\n    \\n    groups = 0\\n    while True:\\n        to_remove = []\\n        for i in range(n):\\n            if len(adj[i]) == 1:\\n                to_remove.append(i)\\n        \\n        if not to_remove:\\n            break\\n        \\n        groups += 1\\n        for u in to_remove:\\n            if len(adj[u]) > 0:\\n                v = adj[u][0]\\n                adj[u] = []\\n                adj[v].remove(u)\\n                \\n    print(groups)\\n\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    adj = [[] for _ in range(n)]\\n    edges = []\\n    for _ in range(m):\\n        a, b = map(int, input().split())\\n        a -= 1\\n        b -= 1\\n        adj[a].append(b)\\n        adj[b].append(a)\\n        edges.append((a, b))\\n    \\n    groups = 0\\n    while True:\\n        to_remove = []\\n        for i in range(n):\\n            if len(adj[i]) == 1:\\n                to_remove.append(i)\\n        \\n        if not to_remove:\\n            break\\n        \\n        groups += 1\\n        for u in to_remove:\\n            for v in adj[u]:\\n                if u in adj[v]:\\n                    adj[v].remove(u)\\n            adj[u] = []\\n            \\n    print(groups)\\n\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    adj = [[] for _ in range(n)]\\n    edges = []\\n    for _ in range(m):\\n        a, b = map(int, input().split())\\n        a -= 1\\n        b -= 1\\n        adj[a].append(b)\\n        adj[b].append(a)\\n        edges.append((a, b))\\n    \\n    groups = 0\\n    while True:\\n        to_remove = []\\n        for i in range(n):\\n            if len(adj[i]) == 1:\\n                to_remove.append(i)\\n        \\n        if not to_remove:\\n            break\\n        \\n        groups += 1\\n        for u in to_remove:\\n            if len(adj[u]) > 0:\\n                v = adj[u][0]\\n                adj[u] = []\\n                adj[v].remove(u)\\n                \\n    print(groups)\\n\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    adj = [[] for _ in range(n)]\\n    edges = []\\n    for _ in range(m):\\n        a, b = map(int, input().split())\\n        a -= 1\\n        b -= 1\\n        adj[a].append(b)\\n        adj[b].append(a)\\n        edges.append((a, b))\\n    \\n    groups = 0\\n    while True:\\n        to_remove = []\\n        for i in range(n):\\n            if len(adj[i]) == 1:\\n                to_remove.append(i)\\n        \\n        if not to_remove:\\n            break\\n        \\n        groups += 1\\n        for u in to_remove:\\n            for v in adj[u]:\\n                if u in adj[v]:\\n                    adj[v].remove(u)\\n            adj[u] = []\\n            \\n    print(groups)\\n\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"A group of n merry programmers celebrate Robert Floyd's birthday. Polucarpus has got an honourable task of pouring Ber-Cola to everybody. Pouring the same amount of Ber-Cola to everybody is really important. In other words, the drink's volume in each of the n mugs must be the same.Polycarpus has already began the process and he partially emptied the Ber-Cola bottle. Now the first mug has a1 milliliters of the drink, the second one has a2 milliliters and so on. The bottle has b milliliters left and Polycarpus plans to pour them into the mugs so that the main equation was fulfilled.Write a program that would determine what volume of the drink Polycarpus needs to add into each mug to ensure that the following two conditions were fulfilled simultaneously:   there were b milliliters poured in total. That is, the bottle need to be emptied;  after the process is over, the volumes of the drink in the mugs should be equal. ","input_specification":"The first line contains a pair of integers n, b (2\u2009\u2264\u2009n\u2009\u2264\u2009100,\u20091\u2009\u2264\u2009b\u2009\u2264\u2009100), where n is the total number of friends in the group and b is the current volume of drink in the bottle. The second line contains a sequence of integers a1,\u2009a2,\u2009...,\u2009an (0\u2009\u2264\u2009ai\u2009\u2264\u2009100), where ai is the current volume of drink in the i-th mug.","output_specification":"Print a single number \"-1\" (without the quotes), if there is no solution. Otherwise, print n float numbers c1,\u2009c2,\u2009...,\u2009cn, where ci is the volume of the drink to add in the i-th mug. Print the numbers with no less than 6 digits after the decimal point, print each ci on a single line. Polycarpus proved that if a solution exists then it is unique. Russian locale is installed by default on the testing computer. Make sure that your solution use the point to separate the integer part of a real number from the decimal, not a comma.","notes":null,"sample_inputs":["5 50\n1 2 3 4 5","2 2\n1 100"],"sample_outputs":["12.000000\n11.000000\n10.000000\n9.000000\n8.000000","-1"],"src_uid":"65fea461d3caa5a932d1e2c13e99a59e","lang_cluster":"Python","difficulty":1100,"human_solution":"x=[int(i) for i in input().split()]\nn=x[0]\ny=[int(i) for i in input().split()]\nif x[1]<max(y)*n-sum(y):\n    print(-1)\n    raise SystemExit\n\nfor i in range(n):\n    s=x[1]\/n-y[i]++sum(y)\/n\n    print('%.6f'% s)\n","testcases":"[{'input': '5 50\\r\\n1 2 3 4 5\\r\\n', 'output': ['12.000000\\r\\n11.000000\\r\\n10.000000\\r\\n9.000000\\r\\n8.000000\\r\\n']}, {'input': '2 2\\r\\n1 100\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2 2\\r\\n1 1\\r\\n', 'output': ['1.000000\\r\\n1.000000\\r\\n']}, {'input': '3 2\\r\\n1 2 1\\r\\n', 'output': ['1.000000\\r\\n0.000000\\r\\n1.000000\\r\\n']}, {'input': '3 5\\r\\n1 2 1\\r\\n', 'output': ['2.000000\\r\\n1.000000\\r\\n2.000000\\r\\n']}, {'input': '10 95\\r\\n0 0 0 0 0 1 1 1 1 1\\r\\n', 'output': ['10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n10.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n9.000000\\r\\n']}, {'input': '3 5\\r\\n1 2 3\\r\\n', 'output': ['2.666667\\r\\n1.666667\\r\\n0.666667\\r\\n']}, {'input': '3 5\\r\\n1 3 2\\r\\n', 'output': ['2.666667\\r\\n0.666667\\r\\n1.666667\\r\\n']}, {'input': '3 5\\r\\n2 1 3\\r\\n', 'output': ['1.666667\\r\\n2.666667\\r\\n0.666667\\r\\n']}, {'input': '3 5\\r\\n2 3 1\\r\\n', 'output': ['1.666667\\r\\n0.666667\\r\\n2.666667\\r\\n']}, {'input': '3 5\\r\\n3 1 2\\r\\n', 'output': ['0.666667\\r\\n2.666667\\r\\n1.666667\\r\\n']}, {'input': '3 5\\r\\n3 2 1\\r\\n', 'output': ['0.666667\\r\\n1.666667\\r\\n2.666667\\r\\n']}, {'input': '2 1\\r\\n1 1\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '2 1\\r\\n2 2\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '3 2\\r\\n2 1 2\\r\\n', 'output': ['0.333333\\r\\n1.333333\\r\\n0.333333\\r\\n']}, {'input': '3 3\\r\\n2 2 1\\r\\n', 'output': ['0.666667\\r\\n0.666667\\r\\n1.666667\\r\\n']}, {'input': '3 3\\r\\n3 1 2\\r\\n', 'output': ['0.000000\\r\\n2.000000\\r\\n1.000000\\r\\n']}, {'input': '100 100\\r\\n37 97 75 52 33 29 51 22 33 37 45 96 96 60 82 58 86 71 28 73 38 50 6 6 90 17 26 76 13 41 100 47 17 93 4 1 56 16 41 74 25 17 69 61 39 37 96 73 49 93 52 14 62 24 91 30 9 97 52 100 6 16 85 8 12 26 10 3 94 63 80 27 29 78 9 48 79 64 60 18 98 75 81 35 24 81 2 100 23 70 21 60 98 38 29 29 58 37 49 72\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100 100\\r\\n1 3 7 7 9 5 9 3 7 8 10 1 3 10 10 6 1 3 10 4 3 9 4 9 5 4 9 2 8 7 4 3 3 3 5 10 8 9 10 1 9 2 4 8 3 10 9 2 3 9 8 2 4 4 4 7 1 1 7 3 7 8 9 5 1 2 6 7 1 10 9 10 5 10 1 10 5 2 4 3 10 1 6 5 6 7 8 9 3 8 6 10 8 7 2 3 8 6 3 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100 61\\r\\n81 80 83 72 87 76 91 92 77 93 77 94 76 73 71 88 88 76 87 73 89 73 85 81 79 90 76 73 82 93 79 93 71 75 72 71 78 85 92 89 88 93 74 87 71 94 74 87 85 89 90 93 86 94 92 87 90 91 75 73 90 84 92 94 92 79 74 85 74 74 89 76 84 84 84 83 86 84 82 71 76 74 83 81 89 73 73 74 71 77 90 94 73 94 73 75 93 89 84 92\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 100\\r\\n52 52 51 52 52 52 51 51 52 52\\r\\n', 'output': ['9.700000\\r\\n9.700000\\r\\n10.700000\\r\\n9.700000\\r\\n9.700000\\r\\n9.700000\\r\\n10.700000\\r\\n10.700000\\r\\n9.700000\\r\\n9.700000\\r\\n']}, {'input': '10 100\\r\\n13 13 13 13 12 13 12 13 12 12\\r\\n', 'output': ['9.600000\\r\\n9.600000\\r\\n9.600000\\r\\n9.600000\\r\\n10.600000\\r\\n9.600000\\r\\n10.600000\\r\\n9.600000\\r\\n10.600000\\r\\n10.600000\\r\\n']}, {'input': '10 100\\r\\n50 51 47 51 48 46 49 51 46 51\\r\\n', 'output': ['9.000000\\r\\n8.000000\\r\\n12.000000\\r\\n8.000000\\r\\n11.000000\\r\\n13.000000\\r\\n10.000000\\r\\n8.000000\\r\\n13.000000\\r\\n8.000000\\r\\n']}, {'input': '10 100\\r\\n13 13 9 12 12 11 13 8 10 13\\r\\n', 'output': ['8.400000\\r\\n8.400000\\r\\n12.400000\\r\\n9.400000\\r\\n9.400000\\r\\n10.400000\\r\\n8.400000\\r\\n13.400000\\r\\n11.400000\\r\\n8.400000\\r\\n']}, {'input': '13 97\\r\\n52 52 51 51 52 52 51 52 51 51 52 52 52\\r\\n', 'output': ['7.076923\\r\\n7.076923\\r\\n8.076923\\r\\n8.076923\\r\\n7.076923\\r\\n7.076923\\r\\n8.076923\\r\\n7.076923\\r\\n8.076923\\r\\n8.076923\\r\\n7.076923\\r\\n7.076923\\r\\n7.076923\\r\\n']}, {'input': '17 99\\r\\n13 13 12 13 11 12 12 12 13 13 11 13 13 13 13 12 13\\r\\n', 'output': ['5.294118\\r\\n5.294118\\r\\n6.294118\\r\\n5.294118\\r\\n7.294118\\r\\n6.294118\\r\\n6.294118\\r\\n6.294118\\r\\n5.294118\\r\\n5.294118\\r\\n7.294118\\r\\n5.294118\\r\\n5.294118\\r\\n5.294118\\r\\n5.294118\\r\\n6.294118\\r\\n5.294118\\r\\n']}, {'input': '9 91\\r\\n52 51 50 52 52 51 50 48 51\\r\\n', 'output': ['8.888889\\r\\n9.888889\\r\\n10.888889\\r\\n8.888889\\r\\n8.888889\\r\\n9.888889\\r\\n10.888889\\r\\n12.888889\\r\\n9.888889\\r\\n']}, {'input': '17 91\\r\\n13 13 13 13 12 12 13 13 12 13 12 13 10 12 13 13 12\\r\\n', 'output': ['4.823529\\r\\n4.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n5.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n4.823529\\r\\n5.823529\\r\\n4.823529\\r\\n7.823529\\r\\n5.823529\\r\\n4.823529\\r\\n4.823529\\r\\n5.823529\\r\\n']}, {'input': '2 3\\r\\n1 1\\r\\n', 'output': ['1.500000\\r\\n1.500000\\r\\n']}, {'input': '2 90\\r\\n0 89\\r\\n', 'output': ['89.500000\\r\\n0.500000\\r\\n']}, {'input': '4 17\\r\\n3 4 8 1\\r\\n', 'output': ['5.250000\\r\\n4.250000\\r\\n0.250000\\r\\n7.250000\\r\\n']}, {'input': '2 9\\r\\n5 5\\r\\n', 'output': ['4.500000\\r\\n4.500000\\r\\n']}, {'input': '7 28\\r\\n1 3 9 10 9 6 10\\r\\n', 'output': ['9.857143\\r\\n7.857143\\r\\n1.857143\\r\\n0.857143\\r\\n1.857143\\r\\n4.857143\\r\\n0.857143\\r\\n']}, {'input': '5 11\\r\\n1 2 3 4 5\\r\\n', 'output': ['4.200000\\r\\n3.200000\\r\\n2.200000\\r\\n1.200000\\r\\n0.200000\\r\\n']}, {'input': '2 1\\r\\n1 1\\r\\n', 'output': ['0.500000\\r\\n0.500000\\r\\n']}, {'input': '5 3\\r\\n1 1 1 1 1\\r\\n', 'output': ['0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n0.600000\\r\\n']}, {'input': '3 1\\r\\n100 100 100\\r\\n', 'output': ['0.333333\\r\\n0.333333\\r\\n0.333333\\r\\n']}, {'input': '5 50\\r\\n2 2 3 2 2\\r\\n', 'output': ['10.200000\\r\\n10.200000\\r\\n9.200000\\r\\n10.200000\\r\\n10.200000\\r\\n']}, {'input': '3 3\\r\\n2 2 3\\r\\n', 'output': ['1.333333\\r\\n1.333333\\r\\n0.333333\\r\\n']}, {'input': '2 52\\r\\n2 100\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 2\\r\\n2 2 3\\r\\n', 'output': ['1.000000\\r\\n1.000000\\r\\n0.000000\\r\\n']}, {'input': '5 1\\r\\n1 1 1 1 1\\r\\n', 'output': ['0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n0.200000\\r\\n']}, {'input': '2 4\\r\\n1 2\\r\\n', 'output': ['2.500000\\r\\n1.500000\\r\\n']}, {'input': '5 49\\r\\n1 2 3 4 5\\r\\n', 'output': ['11.800000\\r\\n10.800000\\r\\n9.800000\\r\\n8.800000\\r\\n7.800000\\r\\n']}]","id":132,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n, b = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nmax_a = max(a)\\nsum_a = sum(a)\\n\\nneeded_total = n * max_a - sum_a\\n\\nif needed_total > b:\\n    print(\\\"-1\\\")\\nelse:\\n    extra = b - needed_total\\n    for i in range(n):\\n        print(\\\"{:.6f}\\\".format(max_a - a[i] + extra \/ n))\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n, b = map(int, raw_input().split())\\na = map(int, raw_input().split())\\n\\nmax_a = max(a)\\nsum_a = sum(a)\\n\\nneeded_total = n * max_a - sum_a\\n\\nif needed_total > b:\\n    print(\\\"-1\\\")\\nelse:\\n    extra = b - needed_total\\n    for i in range(n):\\n        print(\\\"%.6f\\\" % (max_a - a[i] + extra \/ float(n)))\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n, b = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nmax_a = max(a)\\nsum_a = sum(a)\\n\\nneeded_total = n * max_a - sum_a\\n\\nif needed_total > b:\\n    print(\\\"-1\\\")\\nelse:\\n    remaining_b = b - needed_total\\n    add_per_mug = remaining_b \/ n\\n    \\n    for val in a:\\n        print(f'{max_a - val + add_per_mug:.6f}')\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n, b = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nmax_a = max(a)\\nsum_a = sum(a)\\n\\nneeded_total = n * max_a - sum_a\\n\\nif needed_total > b:\\n    print(\\\"-1\\\")\\nelse:\\n    extra = b - needed_total\\n    for i in range(n):\\n        print(\\\"{:.6f}\\\".format(max_a - a[i] + extra \/ n))\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n, b = map(int, raw_input().split())\\na = map(int, raw_input().split())\\n\\nmax_a = max(a)\\nsum_a = sum(a)\\n\\nneeded_total = n * max_a - sum_a\\n\\nif needed_total > b:\\n    print(\\\"-1\\\")\\nelse:\\n    extra = b - needed_total\\n    for i in range(n):\\n        print(\\\"%.6f\\\" % (max_a - a[i] + extra \/ float(n)))\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n, b = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nmax_a = max(a)\\nsum_a = sum(a)\\n\\nneeded_total = n * max_a - sum_a\\n\\nif needed_total > b:\\n    print(\\\"-1\\\")\\nelse:\\n    remaining_b = b - needed_total\\n    add_per_mug = remaining_b \/ n\\n    \\n    for val in a:\\n        print(f'{max_a - val + add_per_mug:.6f}')\"\n  }\n]\n```"}
{"description":"Dwarfs have planted a very interesting plant, which is a triangle directed \"upwards\". This plant has an amusing feature. After one year a triangle plant directed \"upwards\" divides into four triangle plants: three of them will point \"upwards\" and one will point \"downwards\". After another year, each triangle plant divides into four triangle plants: three of them will be directed in the same direction as the parent plant, and one of them will be directed in the opposite direction. Then each year the process repeats. The figure below illustrates this process.  Help the dwarfs find out how many triangle plants that point \"upwards\" will be in n years.","input_specification":"The first line contains a single integer n (0\u2009\u2264\u2009n\u2009\u2264\u20091018) \u2014 the number of full years when the plant grew. Please do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier.","output_specification":"Print a single integer \u2014 the remainder of dividing the number of plants that will point \"upwards\" in n years by 1000000007 (109\u2009+\u20097).","notes":"NoteThe first test sample corresponds to the second triangle on the figure in the statement. The second test sample corresponds to the third one.","sample_inputs":["1","2"],"sample_outputs":["3","10"],"src_uid":"782b819eb0bfc86d6f96f15ac09d5085","lang_cluster":"Python","difficulty":1300,"human_solution":"n = int(input())\n\nmod = 10**9 +7\n\ndef power_2_k(k):\n    if k == 0:\n        return 1\n    if k % 2 == 0:\n        lower = power_2_k(k \/\/ 2)\n        return (lower * lower) % mod\n    else:\n        k -= 1\n        lower = power_2_k(k \/\/ 2)\n        return (((lower * lower) % mod) * 2) % mod\n\np = power_2_k(n)\nprint((p * (p + 1) \/\/ 2) % mod)\n","testcases":"[{'input': ['1\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['2\\r\\n'], 'output': ['10\\r\\n']}, {'input': ['385599124\\r\\n'], 'output': ['493875375\\r\\n']}, {'input': ['989464295\\r\\n'], 'output': ['31966163\\r\\n']}, {'input': ['376367012\\r\\n'], 'output': ['523204186\\r\\n']}, {'input': ['529357306\\r\\n'], 'output': ['142578489\\r\\n']}, {'input': ['782916801\\r\\n'], 'output': ['51174574\\r\\n']}, {'input': ['74859961358140080\\r\\n'], 'output': ['478768275\\r\\n']}, {'input': ['0\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['252509053898415171\\r\\n'], 'output': ['886314547\\r\\n']}, {'input': ['760713016078377938\\r\\n'], 'output': ['79611270\\r\\n']}, {'input': ['919845424847912644\\r\\n'], 'output': ['388845650\\r\\n']}, {'input': ['585335721566249104\\r\\n'], 'output': ['301383716\\r\\n']}, {'input': ['522842183413115087\\r\\n'], 'output': ['556012763\\r\\n']}, {'input': ['148049062285906746\\r\\n'], 'output': ['913927498\\r\\n']}, {'input': ['84324827171274022\\r\\n'], 'output': ['462535280\\r\\n']}, {'input': ['354979172034763159\\r\\n'], 'output': ['239287993\\r\\n']}, {'input': ['1312148742261680\\r\\n'], 'output': ['799725655\\r\\n']}, {'input': ['269587448053313253\\r\\n'], 'output': ['536645997\\r\\n']}, {'input': ['645762257531682045\\r\\n'], 'output': ['543988614\\r\\n']}, {'input': ['615812227854199662\\r\\n'], 'output': ['357939938\\r\\n']}, {'input': ['819875140559301751\\r\\n'], 'output': ['968653685\\r\\n']}, {'input': ['349993003033420740\\r\\n'], 'output': ['709392758\\r\\n']}, {'input': ['891351282398722856\\r\\n'], 'output': ['70758467\\r\\n']}, {'input': ['563324730406715801\\r\\n'], 'output': ['353494903\\r\\n']}, {'input': ['520974001002628386\\r\\n'], 'output': ['164118419\\r\\n']}, {'input': ['666729339260489789\\r\\n'], 'output': ['784700006\\r\\n']}, {'input': ['856674609788912527\\r\\n'], 'output': ['720540265\\r\\n']}, {'input': ['791809296233191092\\r\\n'], 'output': ['369199735\\r\\n']}, {'input': ['711066335916901717\\r\\n'], 'output': ['15590358\\r\\n']}, {'input': ['931356501703211379\\r\\n'], 'output': ['239824013\\r\\n']}, {'input': ['234122431978145893\\r\\n'], 'output': ['905163056\\r\\n']}, {'input': ['1000000000000000000\\r\\n'], 'output': ['899770636\\r\\n']}, {'input': ['3\\r\\n'], 'output': ['36\\r\\n']}, {'input': ['4\\r\\n'], 'output': ['136\\r\\n']}, {'input': ['5\\r\\n'], 'output': ['528\\r\\n']}, {'input': ['6\\r\\n'], 'output': ['2080\\r\\n']}, {'input': ['7\\r\\n'], 'output': ['8256\\r\\n']}, {'input': ['8\\r\\n'], 'output': ['32896\\r\\n']}, {'input': ['9\\r\\n'], 'output': ['131328\\r\\n']}, {'input': ['10\\r\\n'], 'output': ['524800\\r\\n']}, {'input': ['11\\r\\n'], 'output': ['2098176\\r\\n']}, {'input': ['12\\r\\n'], 'output': ['8390656\\r\\n']}, {'input': ['13\\r\\n'], 'output': ['33558528\\r\\n']}, {'input': ['14\\r\\n'], 'output': ['134225920\\r\\n']}, {'input': ['15\\r\\n'], 'output': ['536887296\\r\\n']}, {'input': ['16\\r\\n'], 'output': ['147516402\\r\\n']}, {'input': ['0\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['6265\\r\\n'], 'output': ['980996097\\r\\n']}]","id":133,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nmod = 1000000007\\nif n == 0:\\n    print(1)\\nelse:\\n    power_of_2 = pow(2, n, mod)\\n    total_triangles = (pow(4, n, mod))\\n    upward_triangles = (total_triangles + power_of_2) * pow(2, mod - 2, mod) % mod\\n    print(upward_triangles)\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nmod = 1000000007\\nif n == 0:\\n    print 1\\nelse:\\n    power_of_2 = pow(2, n, mod)\\n    total_triangles = pow(4, n, mod)\\n    upward_triangles = (total_triangles + power_of_2) * pow(2, mod - 2, mod) % mod\\n    print upward_triangles\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    mod = 1000000007\\n    if n == 0:\\n        print(1)\\n        return\\n    \\n    total_triangles = pow(4, n, mod)\\n    upward_triangles = (total_triangles + pow(2, n, mod)) * pow(3, mod-2, mod) % mod\\n    print(upward_triangles)\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n = int(raw_input())\\n    mod = 1000000007\\n    if n == 0:\\n        print 1\\n        return\\n    \\n    total_triangles = pow(4, n, mod)\\n    upward_triangles = (total_triangles + pow(2, n, mod)) * pow(3, mod-2, mod) % mod\\n    print upward_triangles\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nmod = 1000000007\\nif n == 0:\\n    print(1)\\nelse:\\n    power_of_2 = pow(2, n, mod)\\n    total_triangles = (pow(4, n, mod))\\n    upward_triangles = (total_triangles + power_of_2) * pow(2, mod - 2, mod) % mod\\n    print(upward_triangles)\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nmod = 1000000007\\nif n == 0:\\n    print 1\\nelse:\\n    power_of_2 = pow(2, n, mod)\\n    total_triangles = pow(4, n, mod)\\n    upward_triangles = (total_triangles + power_of_2) * pow(2, mod - 2, mod) % mod\\n    print upward_triangles\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    mod = 1000000007\\n    if n == 0:\\n        print(1)\\n        return\\n    \\n    total_triangles = pow(4, n, mod)\\n    upward_triangles = (total_triangles + pow(2, n, mod)) * pow(3, mod-2, mod) % mod\\n    print(upward_triangles)\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n = int(raw_input())\\n    mod = 1000000007\\n    if n == 0:\\n        print 1\\n        return\\n    \\n    total_triangles = pow(4, n, mod)\\n    upward_triangles = (total_triangles + pow(2, n, mod)) * pow(3, mod-2, mod) % mod\\n    print upward_triangles\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"In Berland the opposition is going to arrange mass walking on the boulevard. The boulevard consists of n tiles that are lain in a row and are numbered from 1 to n from right to left. The opposition should start walking on the tile number 1 and the finish on the tile number n. During the walk it is allowed to move from right to left between adjacent tiles in a row, and jump over a tile. More formally, if you are standing on the tile number i (i\u2009&lt;\u2009n\u2009-\u20091), you can reach the tiles number i\u2009+\u20091 or the tile number i\u2009+\u20092 from it (if you stand on the tile number n\u2009-\u20091, you can only reach tile number n). We can assume that all the opposition movements occur instantaneously.In order to thwart an opposition rally, the Berland bloody regime organized the rain. The tiles on the boulevard are of poor quality and they are rapidly destroyed in the rain. We know that the i-th tile is destroyed after ai days of rain (on day ai tile isn't destroyed yet, and on day ai\u2009+\u20091 it is already destroyed). Of course, no one is allowed to walk on the destroyed tiles! So the walk of the opposition is considered thwarted, if either the tile number 1 is broken, or the tile number n is broken, or it is impossible to reach the tile number n from the tile number 1 if we can walk on undestroyed tiles.The opposition wants to gather more supporters for their walk. Therefore, the more time they have to pack, the better. Help the opposition to calculate how much time they still have and tell us for how many days the walk from the tile number 1 to the tile number n will be possible.","input_specification":"The first line contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009103) \u2014 the boulevard's length in tiles. The second line contains n space-separated integers ai \u2014 the number of days after which the i-th tile gets destroyed (1\u2009\u2264\u2009ai\u2009\u2264\u2009103). ","output_specification":"Print a single number \u2014 the sought number of days.","notes":"NoteIn the first sample the second tile gets destroyed after day three, and the only path left is 1\u2009\u2192\u20093\u2009\u2192\u20094. After day five there is a two-tile gap between the first and the last tile, you can't jump over it.In the second sample path 1\u2009\u2192\u20093\u2009\u2192\u20095 is available up to day five, inclusive. On day six the last tile is destroyed and the walk is thwarted.","sample_inputs":["4\n10 3 5 10","5\n10 2 8 3 5"],"sample_outputs":["5","5"],"src_uid":"d526af933b5afe9abfdf9815e9664144","lang_cluster":"Python","difficulty":1100,"human_solution":"n=int(input())\na=list(map(int,input().split()))\nans=1e9\nfor i in range(n-1):\n    ans=min(ans,max(a[i],a[i+1]))\nprint(min(ans,a[0],a[-1]))\n","testcases":"[{'input': '4\\r\\n10 3 5 10\\r\\n', 'output': ['5\\r\\n']}, {'input': '5\\r\\n10 2 8 3 5\\r\\n', 'output': ['5\\r\\n']}, {'input': '10\\r\\n10 3 1 6 7 1 3 3 8 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n26 72 10 52 2 5 61 2 39 64\\r\\n', 'output': ['5\\r\\n']}, {'input': '100\\r\\n8 2 1 2 8 3 5 8 5 1 9 3 4 1 5 6 4 2 9 10 6 10 10 3 9 4 10 5 3 1 5 10 7 6 8 10 2 6 4 4 2 2 10 7 2 7 3 2 6 3 6 4 7 6 2 5 5 8 6 9 5 2 7 5 8 6 5 8 10 6 10 8 5 3 1 10 6 1 7 5 1 8 10 5 1 3 10 7 10 5 7 1 4 3 8 6 3 4 9 6\\r\\n', 'output': ['2\\r\\n']}, {'input': '100\\r\\n10 2 8 7 5 1 5 4 9 2 7 9 3 5 6 2 3 6 10 1 2 7 1 4 8 8 6 1 7 8 8 1 5 8 1 2 7 4 10 7 3 1 2 5 8 1 1 4 9 7 7 4 7 3 8 8 7 1 5 1 6 9 8 8 1 10 4 4 7 7 10 9 5 1 1 3 6 2 6 3 6 4 9 8 2 9 6 2 7 8 10 9 9 6 3 5 3 1 4 8\\r\\n', 'output': ['1\\r\\n']}, {'input': '100\\r\\n21 57 14 6 58 61 37 54 43 22 90 90 90 14 10 97 47 43 19 66 96 58 88 92 22 62 99 97 15 36 58 93 44 42 45 38 41 21 16 30 66 92 39 70 1 73 83 27 63 21 20 84 30 30 30 77 93 30 62 96 33 34 28 59 48 89 68 62 50 16 18 19 42 42 80 58 31 59 40 81 92 26 28 47 26 8 8 74 86 80 88 82 98 27 41 97 11 91 42 67\\r\\n', 'output': ['8\\r\\n']}, {'input': '100\\r\\n37 75 11 81 60 33 17 80 37 77 26 86 31 78 59 23 92 38 8 15 30 91 99 75 79 34 78 80 19 51 48 48 61 74 59 30 26 2 71 74 48 42 42 81 20 55 49 69 60 10 53 2 21 44 10 18 45 64 21 18 5 62 3 34 52 72 16 28 70 31 93 5 21 69 21 90 31 90 91 79 54 94 77 27 97 4 74 9 29 29 81 5 33 81 75 37 61 73 57 75\\r\\n', 'output': ['15\\r\\n']}, {'input': '100\\r\\n190 544 642 723 577 689 757 509 165 193 396 972 742 367 83 294 404 308 683 399 551 770 564 721 465 839 379 68 687 554 821 719 304 533 146 180 596 713 546 743 949 100 458 735 17 525 568 907 957 670 914 374 347 801 227 884 284 444 686 410 127 508 504 273 624 213 873 658 336 79 819 938 3 722 649 368 733 747 577 746 940 308 970 963 145 487 102 559 790 243 609 77 552 565 151 492 726 448 393 837\\r\\n', 'output': ['180\\r\\n']}, {'input': '100\\r\\n606 358 399 589 724 454 741 183 571 244 984 867 828 232 189 821 642 855 220 839 585 203 135 305 970 503 362 658 491 562 706 62 721 465 560 880 833 646 365 23 679 549 317 834 583 947 134 253 250 768 343 996 541 163 355 925 336 874 997 632 498 529 932 487 415 391 766 224 364 790 486 512 183 458 343 751 633 126 688 536 845 380 423 447 904 779 520 843 977 392 406 147 888 520 886 179 176 129 8 750\\r\\n', 'output': ['129\\r\\n']}, {'input': '5\\r\\n3 2 3 4 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '5\\r\\n4 8 9 10 6\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n2 21 6 5 9\\r\\n', 'output': ['2\\r\\n']}, {'input': '5\\r\\n34 39 30 37 35\\r\\n', 'output': ['34\\r\\n']}, {'input': '5\\r\\n14 67 15 28 21\\r\\n', 'output': ['14\\r\\n']}, {'input': '5\\r\\n243 238 138 146 140\\r\\n', 'output': ['140\\r\\n']}, {'input': '5\\r\\n46 123 210 119 195\\r\\n', 'output': ['46\\r\\n']}, {'input': '5\\r\\n725 444 477 661 761\\r\\n', 'output': ['477\\r\\n']}, {'input': '10\\r\\n2 2 3 4 4 1 5 3 1 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n1 10 1 10 1 1 7 8 6 7\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n5 17 8 1 10 20 9 18 12 20\\r\\n', 'output': ['5\\r\\n']}, {'input': '10\\r\\n18 11 23 7 9 10 28 29 46 21\\r\\n', 'output': ['9\\r\\n']}, {'input': '10\\r\\n2 17 53 94 95 57 36 47 68 48\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n93 231 176 168 177 222 22 137 110 4\\r\\n', 'output': ['4\\r\\n']}, {'input': '10\\r\\n499 173 45 141 425 276 96 290 428 95\\r\\n', 'output': ['95\\r\\n']}, {'input': '10\\r\\n201 186 897 279 703 376 238 93 253 316\\r\\n', 'output': ['201\\r\\n']}, {'input': '25\\r\\n3 2 3 2 2 2 3 4 5 1 1 4 1 2 1 3 5 5 3 5 1 2 4 1 3\\r\\n', 'output': ['1\\r\\n']}, {'input': '25\\r\\n9 9 1 9 10 5 6 4 6 1 5 2 2 1 2 8 4 6 5 7 1 10 5 4 9\\r\\n', 'output': ['2\\r\\n']}, {'input': '25\\r\\n2 17 21 4 13 6 14 18 17 1 16 13 24 4 12 7 8 16 9 25 25 9 11 20 18\\r\\n', 'output': ['2\\r\\n']}, {'input': '25\\r\\n38 30 9 35 33 48 8 4 49 2 39 19 34 35 47 49 33 4 23 5 42 35 49 11 30\\r\\n', 'output': ['8\\r\\n']}, {'input': '25\\r\\n75 34 77 68 60 38 76 89 35 68 28 36 96 63 43 12 9 4 37 75 88 30 11 58 35\\r\\n', 'output': ['9\\r\\n']}, {'input': '25\\r\\n108 3 144 140 239 105 59 126 224 181 147 102 94 201 68 121 167 94 60 130 64 162 45 95 235\\r\\n', 'output': ['94\\r\\n']}, {'input': '25\\r\\n220 93 216 467 134 408 132 220 292 11 363 404 282 253 141 313 310 356 214 256 380 81 42 128 363\\r\\n', 'output': ['81\\r\\n']}, {'input': '25\\r\\n371 884 75 465 891 510 471 52 382 829 514 610 660 642 179 108 41 818 346 106 738 993 706 574 623\\r\\n', 'output': ['108\\r\\n']}, {'input': '50\\r\\n1 2 1 3 2 5 2 2 2 3 4 4 4 3 3 4 1 2 3 1 5 4 1 2 2 1 5 3 2 2 1 5 4 5 2 5 4 1 1 3 5 2 1 4 5 5 1 5 5 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n2 4 9 8 1 3 7 1 2 3 8 9 8 8 5 2 10 5 8 1 3 1 8 2 3 7 9 10 2 9 9 7 3 8 6 10 6 5 4 8 1 1 5 6 8 9 5 9 5 3\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n22 9 5 3 24 21 25 13 17 21 14 8 22 18 2 3 22 9 10 11 25 22 5 10 16 7 15 3 2 13 2 12 9 24 3 14 2 18 3 22 8 2 19 6 16 4 5 20 10 12\\r\\n', 'output': ['3\\r\\n']}, {'input': '50\\r\\n14 4 20 37 50 46 19 20 25 47 10 6 34 12 41 47 9 22 28 41 34 47 40 12 42 9 4 15 15 27 8 38 9 4 17 8 13 47 7 9 38 30 48 50 7 41 34 23 11 16\\r\\n', 'output': ['9\\r\\n']}, {'input': '50\\r\\n69 9 97 15 22 69 27 7 23 84 73 74 60 94 43 98 13 4 63 49 7 31 93 23 6 75 32 63 49 32 99 43 68 48 16 54 20 38 40 65 34 28 21 55 79 50 2 18 22 95\\r\\n', 'output': ['13\\r\\n']}, {'input': '50\\r\\n50 122 117 195 42 178 153 194 7 89 142 40 158 230 213 104 179 56 244 196 85 159 167 19 157 20 230 201 152 98 250 242 10 52 96 242 139 181 90 107 178 52 196 79 23 61 212 47 97 97\\r\\n', 'output': ['50\\r\\n']}, {'input': '50\\r\\n354 268 292 215 187 232 35 38 179 79 108 491 346 384 345 103 14 260 148 322 459 238 220 493 374 237 474 148 21 221 88 377 289 121 201 198 490 117 382 454 359 390 346 456 294 325 130 306 484 83\\r\\n', 'output': ['38\\r\\n']}, {'input': '50\\r\\n94 634 27 328 629 967 728 177 379 908 801 715 787 192 427 48 559 923 841 6 759 335 251 172 193 593 456 780 647 638 750 881 206 129 278 744 91 49 523 248 286 549 593 451 216 753 471 325 870 16\\r\\n', 'output': ['16\\r\\n']}, {'input': '100\\r\\n5 5 4 3 5 1 2 5 1 1 3 5 4 4 1 1 1 1 5 4 4 5 1 5 5 1 2 1 3 1 5 1 3 3 3 2 2 2 1 1 5 1 3 4 1 1 3 2 5 2 2 5 5 4 4 1 3 4 3 3 4 5 3 3 3 1 2 1 4 2 4 4 1 5 1 3 5 5 5 5 3 4 4 3 1 2 5 2 3 5 4 2 4 5 3 2 4 2 4 3\\r\\n', 'output': ['1\\r\\n']}, {'input': '100\\r\\n3 4 8 10 8 6 4 3 7 7 6 2 3 1 3 10 1 7 9 3 5 5 2 6 2 9 1 7 4 2 4 1 6 1 7 10 2 5 3 7 6 4 6 2 8 8 8 6 6 10 3 7 4 3 4 1 7 9 3 6 3 6 1 4 9 3 8 1 10 1 4 10 7 7 9 5 3 8 10 2 1 10 8 7 10 8 5 3 1 2 1 10 6 1 5 3 3 5 7 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '100\\r\\n14 7 6 21 12 5 22 23 2 9 8 1 9 2 20 2 24 7 14 24 8 19 15 19 10 24 9 4 21 12 3 21 9 16 9 22 18 4 17 19 19 9 6 1 13 15 23 3 14 3 7 15 17 10 7 24 4 18 21 14 25 20 19 19 14 25 24 21 16 10 2 16 1 21 1 24 13 7 13 20 12 20 2 16 3 6 6 2 19 9 16 4 1 2 7 18 15 14 10 22\\r\\n', 'output': ['2\\r\\n']}, {'input': '100\\r\\n2 46 4 6 38 19 15 34 10 35 37 30 3 25 5 45 40 45 33 31 6 20 10 44 11 9 2 14 35 5 9 23 20 2 48 22 25 35 38 31 24 33 35 16 4 30 27 10 12 22 6 24 12 30 23 21 14 12 32 21 7 12 25 43 18 34 34 28 47 13 28 43 18 39 44 42 35 26 35 14 8 29 32 20 29 3 20 6 20 9 9 27 8 42 10 37 42 27 8 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '100\\r\\n85 50 17 89 65 89 5 20 86 26 16 21 85 14 44 31 87 31 6 2 48 67 8 80 79 1 48 36 97 1 5 30 79 50 78 12 2 55 76 100 54 40 26 81 97 96 68 56 87 14 51 17 54 37 52 33 69 62 38 63 74 15 62 78 9 19 67 2 60 58 93 60 18 96 55 48 34 7 79 82 32 58 90 67 20 50 27 15 7 89 98 10 11 15 99 49 4 51 77 52\\r\\n', 'output': ['5\\r\\n']}, {'input': '100\\r\\n26 171 37 63 189 202 180 210 179 131 43 33 227 5 211 130 105 23 229 48 174 48 182 68 174 146 200 166 246 116 106 86 72 206 216 207 70 148 83 149 94 64 142 8 241 211 27 190 58 116 113 96 210 237 73 240 180 110 34 115 167 4 42 30 162 114 74 131 34 206 174 168 216 101 216 149 212 172 180 220 123 201 25 116 42 143 105 40 30 123 174 220 57 238 145 222 105 184 131 162\\r\\n', 'output': ['26\\r\\n']}, {'input': '100\\r\\n182 9 8 332 494 108 117 203 43 473 451 426 119 408 342 84 88 35 383 84 48 69 31 54 347 363 342 69 422 489 194 16 55 171 71 355 116 142 181 246 275 402 155 282 160 179 240 448 49 101 42 499 434 258 21 327 95 376 38 422 68 381 170 372 427 149 38 48 400 224 246 438 62 43 280 40 108 385 351 379 224 311 66 125 300 41 372 358 5 221 223 341 201 261 455 165 74 379 214 10\\r\\n', 'output': ['9\\r\\n']}, {'input': '100\\r\\n836 969 196 706 812 64 743 262 667 27 227 730 50 510 374 915 124 527 778 528 175 151 439 994 835 87 197 91 121 243 534 634 4 410 936 6 979 227 745 734 492 792 209 95 602 446 299 533 376 595 971 879 36 126 528 759 116 499 571 664 787 820 870 838 604 240 334 872 477 415 57 689 870 690 304 122 487 191 253 610 301 348 358 806 828 911 8 320 414 172 268 867 978 205 812 60 845 395 406 155\\r\\n', 'output': ['121\\r\\n']}, {'input': '250\\r\\n5 3 5 1 3 5 3 4 4 3 1 5 2 2 1 1 5 2 3 3 2 5 4 3 2 4 2 3 5 4 1 2 3 5 2 2 5 4 1 3 3 5 4 4 4 4 4 2 4 2 3 5 1 4 3 3 2 3 5 3 3 4 4 2 3 1 3 4 1 4 5 4 1 2 3 4 1 5 3 3 2 3 5 4 2 5 2 2 3 5 4 3 5 4 2 1 4 1 4 1 1 3 5 1 1 2 1 3 4 5 4 3 2 5 1 3 5 1 1 3 3 5 1 4 5 1 2 1 1 5 5 3 5 1 4 1 4 4 4 4 4 1 4 3 4 5 4 1 2 2 5 2 2 4 2 3 5 3 5 5 3 3 2 2 2 1 1 4 4 4 2 1 4 5 3 1 5 4 4 5 5 5 3 3 5 2 1 4 5 4 1 1 1 5 3 5 2 3 3 2 1 3 4 1 4 1 5 3 1 2 5 5 2 1 4 4 2 3 5 2 4 1 3 4 5 5 4 3 2 2 3 2 4 2 5 3 5 5 1 5 3 2 2 4 2 5 5 5 2 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '1\\r\\n987\\r\\n', 'output': ['987\\r\\n']}, {'input': '1\\r\\n1\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n2 5 5 5 5\\r\\n', 'output': ['2\\r\\n']}, {'input': '1\\r\\n500\\r\\n', 'output': ['500\\r\\n']}]","id":134,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n\\n    ans = 0\\n    for days in range(1, 1001):\\n        if a[0] < days or a[n-1] < days:\\n            break\\n        \\n        reachable = [False] * n\\n        reachable[0] = True\\n        \\n        for i in range(n):\\n            if reachable[i] and a[i] >= days:\\n                if i + 1 < n and a[i+1] >= days:\\n                    reachable[i+1] = True\\n                if i + 2 < n and a[i+2] >= days:\\n                    reachable[i+2] = True\\n        \\n        if reachable[n-1]:\\n            ans = days\\n        else:\\n            break\\n    print(ans)\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n = int(raw_input())\\n    a = map(int, raw_input().split())\\n\\n    ans = 0\\n    for days in range(1, 1001):\\n        if a[0] < days or a[n-1] < days:\\n            break\\n        \\n        reachable = [False] * n\\n        reachable[0] = True\\n        \\n        for i in range(n):\\n            if reachable[i] and a[i] >= days:\\n                if i + 1 < n and a[i+1] >= days:\\n                    reachable[i+1] = True\\n                if i + 2 < n and a[i+2] >= days:\\n                    reachable[i+2] = True\\n        \\n        if reachable[n-1]:\\n            ans = days\\n        else:\\n            break\\n    print ans\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    \\n    ans = 0\\n    for days in range(1, 1001):\\n        if a[0] < days or a[n-1] < days:\\n            break\\n            \\n        possible = True\\n        reachable = [False] * n\\n        reachable[0] = True\\n\\n        for i in range(n):\\n            if reachable[i] and a[i] >= days:\\n                if i + 1 < n and a[i+1] >= days:\\n                    reachable[i+1] = True\\n                if i + 2 < n and a[i+2] >= days:\\n                    reachable[i+2] = True\\n        \\n        if not reachable[n-1]:\\n            break\\n        \\n        ans = days\\n    \\n    print(ans)\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n\\n    ans = 0\\n    for days in range(1, 1001):\\n        if a[0] < days or a[n-1] < days:\\n            break\\n        \\n        reachable = [False] * n\\n        reachable[0] = True\\n        \\n        for i in range(n):\\n            if reachable[i] and a[i] >= days:\\n                if i + 1 < n and a[i+1] >= days:\\n                    reachable[i+1] = True\\n                if i + 2 < n and a[i+2] >= days:\\n                    reachable[i+2] = True\\n        \\n        if reachable[n-1]:\\n            ans = days\\n        else:\\n            break\\n    print(ans)\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n = int(raw_input())\\n    a = map(int, raw_input().split())\\n\\n    ans = 0\\n    for days in range(1, 1001):\\n        if a[0] < days or a[n-1] < days:\\n            break\\n        \\n        reachable = [False] * n\\n        reachable[0] = True\\n        \\n        for i in range(n):\\n            if reachable[i] and a[i] >= days:\\n                if i + 1 < n and a[i+1] >= days:\\n                    reachable[i+1] = True\\n                if i + 2 < n and a[i+2] >= days:\\n                    reachable[i+2] = True\\n        \\n        if reachable[n-1]:\\n            ans = days\\n        else:\\n            break\\n    print ans\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    \\n    ans = 0\\n    for days in range(1, 1001):\\n        if a[0] < days or a[n-1] < days:\\n            break\\n            \\n        possible = True\\n        reachable = [False] * n\\n        reachable[0] = True\\n\\n        for i in range(n):\\n            if reachable[i] and a[i] >= days:\\n                if i + 1 < n and a[i+1] >= days:\\n                    reachable[i+1] = True\\n                if i + 2 < n and a[i+2] >= days:\\n                    reachable[i+2] = True\\n        \\n        if not reachable[n-1]:\\n            break\\n        \\n        ans = days\\n    \\n    print(ans)\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"The Little Elephant loves to play with color cards.He has n cards, each has exactly two colors (the color of the front side and the color of the back side). Initially, all the cards lay on the table with the front side up. In one move the Little Elephant can turn any card to the other side. The Little Elephant thinks that a set of cards on the table is funny if at least half of the cards have the same color (for each card the color of the upper side is considered).Help the Little Elephant to find the minimum number of moves needed to make the set of n cards funny.","input_specification":"The first line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009105) \u2014 the number of the cards. The following n lines contain the description of all cards, one card per line. The cards are described by a pair of positive integers not exceeding 109 \u2014 colors of both sides. The first number in a line is the color of the front of the card, the second one \u2014 of the back. The color of the front of the card may coincide with the color of the back of the card. The numbers in the lines are separated by single spaces.","output_specification":"On a single line print a single integer \u2014 the sought minimum number of moves. If it is impossible to make the set funny, print -1.","notes":"NoteIn the first sample there initially are three cards lying with colors 4, 4, 7. Since two of the three cards are of the same color 4, you do not need to change anything, so the answer is 0.In the second sample, you can turn the first and the fourth cards. After that three of the five cards will be of color 7.","sample_inputs":["3\n4 7\n4 7\n7 4","5\n4 7\n7 4\n2 11\n9 7\n1 1"],"sample_outputs":["0","2"],"src_uid":"5e055bad1da5bdc84599d6f2f89fbd12","lang_cluster":"Python","difficulty":1500,"human_solution":"import math\nn = int(input())\nfront = dict()\nback = dict()\nfor i in range(n):\n    a, b = map(int,input().split())\n    if a in front:\n        front[a] += 1\n    else:\n        front[a] = 1\n\n    if b != a:   \n       if b in back:\n          back[b] += 1\n       else:\n          back[b] = 1\n\nans = -1\nm = dict()\nfor key, value in front.items():\n    if value >= n\/2:\n        ans = 0\n        break\n    elif key in back and front[key] + back[key] >= n\/2:\n        m[key] = math.ceil(n\/2) - front[key]\n\nelse:\n    if len(m) > 0:\n        ans = min(sorted(m.values()))\n    else:\n        for key, value in back.items():\n            if value >= n\/2:\n                ans = math.ceil(n\/2)\n                break\n        else:\n            ans = -1\nprint(ans)\n","testcases":"[{'input': '3\\r\\n4 7\\r\\n4 7\\r\\n7 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n4 7\\r\\n7 4\\r\\n2 11\\r\\n9 7\\r\\n1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1\\r\\n1 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n1 1\\r\\n1 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 8\\r\\n', 'output': ['-1\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n2 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n7 7\\r\\n1 2\\r\\n2 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\n1 1\\r\\n2 5\\r\\n3 6\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4\\r\\n1000000000 1000000000\\r\\n999999999 1000000000\\r\\n999999997 999999998\\r\\n47 74\\r\\n', 'output': ['1\\r\\n']}, {'input': '6\\r\\n1 2\\r\\n3 1\\r\\n4 7\\r\\n4 1\\r\\n9 1\\r\\n7 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '4\\r\\n1 2\\r\\n1 2\\r\\n2 1\\r\\n2 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n4 7\\r\\n7 4\\r\\n4 7\\r\\n1 1\\r\\n2 2\\r\\n3 3\\r\\n4 4\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n1000000000 999999999\\r\\n47 74\\r\\n47474 75785445\\r\\n8798878 458445\\r\\n1 2\\r\\n888888888 777777777\\r\\n99999999 1000000000\\r\\n9999999 1000000000\\r\\n999999 1000000000\\r\\n99999 1000000000\\r\\n', 'output': ['4\\r\\n']}, {'input': '10\\r\\n9 1000000000\\r\\n47 74\\r\\n47474 75785445\\r\\n8798878 458445\\r\\n1 2\\r\\n888888888 777777777\\r\\n99999999 1000000000\\r\\n9999999 1000000000\\r\\n999999 1000000000\\r\\n99999 1000000000\\r\\n', 'output': ['5\\r\\n']}, {'input': '10\\r\\n1 10\\r\\n1 10\\r\\n1 1\\r\\n7 8\\r\\n6 7\\r\\n9 5\\r\\n4 1\\r\\n2 3\\r\\n3 10\\r\\n2 8\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10\\r\\n262253762 715261903\\r\\n414831157 8354405\\r\\n419984358 829693421\\r\\n376600467 175941985\\r\\n367533995 350629286\\r\\n681027822 408529849\\r\\n654503328 717740407\\r\\n539773033 704670473\\r\\n55322828 380422378\\r\\n46174018 186723478\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10\\r\\n2 2\\r\\n1 1\\r\\n1 1\\r\\n1 2\\r\\n1 2\\r\\n2 2\\r\\n2 1\\r\\n1 1\\r\\n1 2\\r\\n1 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '12\\r\\n1 1\\r\\n1 1\\r\\n1 1\\r\\n1 1\\r\\n1 1\\r\\n1 1\\r\\n1 1\\r\\n1 1\\r\\n1 1\\r\\n1 1\\r\\n1 1\\r\\n1 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '47\\r\\n53 63\\r\\n43 57\\r\\n69 52\\r\\n66 47\\r\\n74 5\\r\\n5 2\\r\\n6 56\\r\\n19 27\\r\\n46 27\\r\\n31 45\\r\\n41 38\\r\\n20 20\\r\\n69 43\\r\\n17 74\\r\\n39 43\\r\\n28 70\\r\\n73 24\\r\\n73 59\\r\\n23 11\\r\\n56 49\\r\\n51 37\\r\\n70 16\\r\\n66 36\\r\\n4 7\\r\\n1 49\\r\\n7 65\\r\\n38 5\\r\\n47 74\\r\\n34 38\\r\\n17 22\\r\\n59 3\\r\\n70 40\\r\\n21 15\\r\\n10 5\\r\\n17 30\\r\\n9 12\\r\\n28 48\\r\\n70 42\\r\\n39 70\\r\\n18 53\\r\\n71 49\\r\\n66 25\\r\\n37 51\\r\\n10 62\\r\\n55 7\\r\\n18 53\\r\\n40 50\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100\\r\\n1 2\\r\\n2 1\\r\\n2 1\\r\\n1 2\\r\\n1 1\\r\\n1 2\\r\\n2 1\\r\\n1 1\\r\\n2 2\\r\\n2 1\\r\\n2 1\\r\\n1 1\\r\\n1 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n1 1\\r\\n2 1\\r\\n1 1\\r\\n1 1\\r\\n2 2\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n2 2\\r\\n1 2\\r\\n1 2\\r\\n2 1\\r\\n1 2\\r\\n2 1\\r\\n1 2\\r\\n2 2\\r\\n1 1\\r\\n2 1\\r\\n1 2\\r\\n2 1\\r\\n2 1\\r\\n1 2\\r\\n2 1\\r\\n2 1\\r\\n1 2\\r\\n2 1\\r\\n1 1\\r\\n1 2\\r\\n1 1\\r\\n1 1\\r\\n2 2\\r\\n2 2\\r\\n2 1\\r\\n2 1\\r\\n1 2\\r\\n2 2\\r\\n1 1\\r\\n2 1\\r\\n2 2\\r\\n1 1\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n2 1\\r\\n2 1\\r\\n2 2\\r\\n1 1\\r\\n1 1\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 2\\r\\n2 2\\r\\n2 1\\r\\n1 1\\r\\n1 2\\r\\n2 1\\r\\n2 2\\r\\n2 1\\r\\n1 1\\r\\n2 1\\r\\n2 1\\r\\n1 1\\r\\n1 2\\r\\n1 2\\r\\n2 1\\r\\n2 1\\r\\n2 1\\r\\n2 2\\r\\n1 2\\r\\n1 2\\r\\n2 1\\r\\n1 1\\r\\n1 1\\r\\n1 2\\r\\n2 1\\r\\n1 2\\r\\n2 2\\r\\n1 2\\r\\n2 1\\r\\n2 2\\r\\n2 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n1 1\\r\\n1 1\\r\\n1 1\\r\\n2 3\\r\\n4 5\\r\\n6 7\\r\\n8 9\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n1000000000 999999999\\r\\n1000000000 999999999\\r\\n1000000000 999999999\\r\\n1000000000 999999999\\r\\n1000000000 999999999\\r\\n1000000000 999999999\\r\\n1000000000 999999999\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n2 3\\r\\n', 'output': ['0\\r\\n']}, {'input': '2\\r\\n47 74\\r\\n47 85874\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n5 8\\r\\n9 10\\r\\n5 17\\r\\n5 24\\r\\n1 147\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n1 7\\r\\n2 7\\r\\n3 7\\r\\n4 7\\r\\n5 7\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\n1 10\\r\\n2 10\\r\\n3 10\\r\\n4 10\\r\\n5 10\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n2 1\\r\\n3 1\\r\\n4 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '5\\r\\n1 2\\r\\n1 3\\r\\n4 1\\r\\n5 1\\r\\n6 7\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n4 7\\r\\n4 7\\r\\n2 7\\r\\n9 7\\r\\n1 1\\r\\n', 'output': ['3\\r\\n']}, {'input': '8\\r\\n1 2\\r\\n2 1\\r\\n2 1\\r\\n3 1\\r\\n4 2\\r\\n5 2\\r\\n6 2\\r\\n7 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n98751 197502\\r\\n296253 395004\\r\\n493755 592506\\r\\n', 'output': ['-1\\r\\n']}, {'input': '5\\r\\n1 5\\r\\n2 5\\r\\n3 5\\r\\n4 7\\r\\n2 5\\r\\n', 'output': ['3\\r\\n']}, {'input': '10\\r\\n1 10\\r\\n2 10\\r\\n3 10\\r\\n4 10\\r\\n5 10\\r\\n10 1\\r\\n10 2\\r\\n10 3\\r\\n10 4\\r\\n10 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n1 2\\r\\n1 2\\r\\n1 2\\r\\n3 1\\r\\n3 1\\r\\n3 1\\r\\n2 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n1 6\\r\\n2 6\\r\\n3 6\\r\\n4 6\\r\\n5 6\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\n1 6\\r\\n2 6\\r\\n3 6\\r\\n4 4\\r\\n5 5\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\n1 1\\r\\n1 1\\r\\n2 2\\r\\n2 2\\r\\n3 3\\r\\n', 'output': ['-1\\r\\n']}, {'input': '4\\r\\n1 5\\r\\n2 5\\r\\n3 5\\r\\n4 4\\r\\n', 'output': ['2\\r\\n']}]","id":135,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    cards = []\\n    for _ in range(n):\\n        cards.append(list(map(int, input().split())))\\n\\n    ans = float('inf')\\n\\n    for target_color in set([color for card in cards for color in card]):\\n        moves = 0\\n        count = 0\\n        for i in range(n):\\n            if cards[i][0] == target_color:\\n                count += 1\\n            elif cards[i][1] == target_color:\\n                moves += 1\\n        \\n        if count + moves >= (n + 1) \/\/ 2:\\n            ans = min(ans, moves)\\n\\n    if ans == float('inf'):\\n        print(-1)\\n    else:\\n        print(ans)\\n\\nsolve()\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    cards = []\\n    for _ in range(n):\\n        cards.append(list(map(int, input().split())))\\n\\n    ans = float('inf')\\n\\n    for color in set([card[0] for card in cards] + [card[1] for card in cards]):\\n        moves = 0\\n        count = 0\\n        for card in cards:\\n            if card[0] == color:\\n                count += 1\\n            elif card[1] == color:\\n                moves += 1\\n        \\n        if count + moves >= (n + 1) \/\/ 2:\\n            ans = min(ans, moves)\\n    \\n    if ans == float('inf'):\\n        print(-1)\\n    else:\\n        print(ans)\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n = int(raw_input())\\n    cards = []\\n    for _ in range(n):\\n        cards.append(map(int, raw_input().split()))\\n\\n    ans = float('inf')\\n\\n    colors = set()\\n    for card in cards:\\n        colors.add(card[0])\\n        colors.add(card[1])\\n        \\n    for color in colors:\\n        moves = 0\\n        count = 0\\n        for card in cards:\\n            if card[0] == color:\\n                count += 1\\n            elif card[1] == color:\\n                moves += 1\\n        \\n        if count + moves >= (n + 1) \/\/ 2:\\n            ans = min(ans, moves)\\n    \\n    if ans == float('inf'):\\n        print -1\\n    else:\\n        print ans\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    cards = []\\n    for _ in range(n):\\n        cards.append(list(map(int, input().split())))\\n\\n    ans = float('inf')\\n\\n    for target_color in set([color for card in cards for color in card]):\\n        moves = 0\\n        count = 0\\n        for i in range(n):\\n            if cards[i][0] == target_color:\\n                count += 1\\n            elif cards[i][1] == target_color:\\n                moves += 1\\n        \\n        if count + moves >= (n + 1) \/\/ 2:\\n            ans = min(ans, moves)\\n\\n    if ans == float('inf'):\\n        print(-1)\\n    else:\\n        print(ans)\\n\\nsolve()\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    cards = []\\n    for _ in range(n):\\n        cards.append(list(map(int, input().split())))\\n\\n    ans = float('inf')\\n\\n    for color in set([card[0] for card in cards] + [card[1] for card in cards]):\\n        moves = 0\\n        count = 0\\n        for card in cards:\\n            if card[0] == color:\\n                count += 1\\n            elif card[1] == color:\\n                moves += 1\\n        \\n        if count + moves >= (n + 1) \/\/ 2:\\n            ans = min(ans, moves)\\n    \\n    if ans == float('inf'):\\n        print(-1)\\n    else:\\n        print(ans)\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n = int(raw_input())\\n    cards = []\\n    for _ in range(n):\\n        cards.append(map(int, raw_input().split()))\\n\\n    ans = float('inf')\\n\\n    colors = set()\\n    for card in cards:\\n        colors.add(card[0])\\n        colors.add(card[1])\\n        \\n    for color in colors:\\n        moves = 0\\n        count = 0\\n        for card in cards:\\n            if card[0] == color:\\n                count += 1\\n            elif card[1] == color:\\n                moves += 1\\n        \\n        if count + moves >= (n + 1) \/\/ 2:\\n            ans = min(ans, moves)\\n    \\n    if ans == float('inf'):\\n        print -1\\n    else:\\n        print ans\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"Vasya, like many others, likes to participate in a variety of sweepstakes and lotteries. Now he collects wrappings from a famous chocolate bar \"Jupiter\". According to the sweepstake rules, each wrapping has an integer written on it \u2014 the number of points that the participant adds to his score as he buys the bar. After a participant earns a certain number of points, he can come to the prize distribution center and exchange the points for prizes. When somebody takes a prize, the prize's cost is simply subtracted from the number of his points.Vasya didn't only bought the bars, he also kept a record of how many points each wrapping cost. Also, he remembers that he always stucks to the greedy strategy \u2014 as soon as he could take at least one prize, he went to the prize distribution centre and exchanged the points for prizes. Moreover, if he could choose between multiple prizes, he chose the most expensive one. If after an exchange Vasya had enough points left to get at least one more prize, then he continued to exchange points.The sweepstake has the following prizes (the prizes are sorted by increasing of their cost):   a mug (costs a points),  a towel (costs b points),  a bag (costs c points),  a bicycle (costs d points),  a car (costs e points). Now Vasya wants to recollect what prizes he has received. You know sequence p1,\u2009p2,\u2009...,\u2009pn, where pi is the number of points Vasya got for the i-th bar. The sequence of points is given in the chronological order. You also know numbers a, b, c, d, e. Your task is to find, how many prizes Vasya received, what prizes they are and how many points he's got left after all operations are completed.","input_specification":"The first line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u200950) \u2014 the number of chocolate bar wrappings that brought points to Vasya. The second line contains space-separated integers p1,\u2009p2,\u2009...,\u2009pn (1\u2009\u2264\u2009pi\u2009\u2264\u2009109). The third line contains 5 integers a, b, c, d, e (1\u2009\u2264\u2009a\u2009&lt;\u2009b\u2009&lt;\u2009c\u2009&lt;\u2009d\u2009&lt;\u2009e\u2009\u2264\u2009109) \u2014 the prizes' costs.","output_specification":"Print on the first line 5 integers, separated by a space \u2014 the number of mugs, towels, bags, bicycles and cars that Vasya has got, respectively. On the second line print a single integer \u2014 the number of points Vasya will have left after all operations of exchange are completed. Please, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.","notes":"NoteIn the first sample Vasya gets 3 points after eating the first chocolate bar. Then he exchanges 2 points and gets a mug. Vasya wins a bag after eating the second chocolate bar. Then he wins a towel after eating the third chocolate bar. After all chocolate bars 3\u2009-\u20092\u2009+\u200910\u2009-\u200910\u2009+\u20094\u2009-\u20094\u2009=\u20091 points remains.","sample_inputs":["3\n3 10 4\n2 4 10 15 20","4\n10 4 39 2\n3 5 10 11 12"],"sample_outputs":["1 1 1 0 0 \n1","3 0 1 0 3 \n0"],"src_uid":"1ae2942b72ebb7c55359c41e141900d7","lang_cluster":"Python","difficulty":1200,"human_solution":"n = int(raw_input())\npts = [int(i) for i in raw_input().split()]\ngoods = [int(i) for i in raw_input().split()]\n\nleft = 0\ngets = [0]*5\nfor p in pts:\n    left += p\n    for i in xrange(4, -1, -1):\n        gets[i] += left\/goods[i]\n        left %= goods[i]\nprint gets[0], gets[1], gets[2], gets[3], gets[4]\nprint left\n","testcases":"[{'input': '3\\r\\n3 10 4\\r\\n2 4 10 15 20\\r\\n', 'output': ['1 1 1 0 0 \\r\\n1\\r\\n']}, {'input': '4\\r\\n10 4 39 2\\r\\n3 5 10 11 12\\r\\n', 'output': ['3 0 1 0 3 \\r\\n0\\r\\n']}, {'input': '1\\r\\n45\\r\\n1 2 3 4 5\\r\\n', 'output': ['0 0 0 0 9 \\r\\n0\\r\\n']}, {'input': '1\\r\\n50\\r\\n1 2 4 5 6\\r\\n', 'output': ['0 1 0 0 8 \\r\\n0\\r\\n']}, {'input': '1\\r\\n6\\r\\n1 2 4 6 7\\r\\n', 'output': ['0 0 0 1 0 \\r\\n0\\r\\n']}, {'input': '1\\r\\n11\\r\\n1 2 3 6 8\\r\\n', 'output': ['0 0 1 0 1 \\r\\n0\\r\\n']}, {'input': '45\\r\\n54672703 354223499 798425228 192616902 934526477 130046515 120969797 1128116 221465324 487958664 211577865 653388287 538234 467693667 387627267 811104156 26715905 108515494 288069433 106690737 712686358 683861047 56548860 385125409 178325602 329144983 320699771 611743158 176982141 882718242 574909811 18981354 497482742 126502373 342328066 970474066 352019823 333022487 625437081 18635432 354739941 509867062 781623566 885791347 684953358\\r\\n1 2 3 4 5\\r\\n', 'output': ['10 15 9 7 3554511651 \\r\\n0\\r\\n']}, {'input': '5\\r\\n43 4 16 36 41\\r\\n5 6 7 8 9\\r\\n', 'output': ['0 0 2 0 14 \\r\\n0\\r\\n']}, {'input': '5\\r\\n6 6 47 32 28\\r\\n1 2 6 9 11\\r\\n', 'output': ['2 1 3 1 8 \\r\\n0\\r\\n']}, {'input': '5\\r\\n30 25 31 47 40\\r\\n1 3 6 13 20\\r\\n', 'output': ['6 3 3 0 7 \\r\\n0\\r\\n']}, {'input': '10\\r\\n588141495 24894836 162095938 610922780 767639361 522148294 556163403 302924834 618125209 410537083\\r\\n1 2 3 4 5\\r\\n', 'output': ['2 0 3 3 912718642 \\r\\n0\\r\\n']}, {'input': '10\\r\\n5 37 8 21 10 13 36 4 40 26\\r\\n3 5 6 7 10\\r\\n', 'output': ['1 2 1 3 16 \\r\\n0\\r\\n']}, {'input': '10\\r\\n3 25 17 20 25 26 15 35 47 16\\r\\n5 8 11 14 15\\r\\n', 'output': ['1 1 3 0 12 \\r\\n3\\r\\n']}, {'input': '10\\r\\n1 10 34 9 49 42 45 8 42 7\\r\\n2 6 11 13 14\\r\\n', 'output': ['5 5 1 0 14 \\r\\n0\\r\\n']}, {'input': '15\\r\\n13 44 13 13 38 25 43 25 40 28 5 23 25 41 6\\r\\n1 2 3 4 5\\r\\n', 'output': ['2 0 7 1 71 \\r\\n0\\r\\n']}, {'input': '15\\r\\n195995511 767544072 924890005 342377584 638748004 904551320 222776859 921356712 204326392 225923474 90658415 610365756 971907038 41090763 853207872\\r\\n5 7 8 9 10\\r\\n', 'output': ['3 0 3 2 791571972 \\r\\n0\\r\\n']}, {'input': '15\\r\\n14 19 5 16 11 22 40 7 13 21 24 26 49 22 26\\r\\n1 2 7 8 9\\r\\n', 'output': ['4 19 2 2 27 \\r\\n0\\r\\n']}, {'input': '15\\r\\n5 41 46 48 22 49 5 37 10 4 19 2 16 32 24\\r\\n2 11 15 18 20\\r\\n', 'output': ['30 1 2 1 12 \\r\\n1\\r\\n']}, {'input': '15\\r\\n50 12 36 11 38 28 4 11 29 34 22 46 43 2 29\\r\\n7 8 10 17 23\\r\\n', 'output': ['1 0 6 3 12 \\r\\n1\\r\\n']}, {'input': '15\\r\\n676837988 94471701 777591167 399710490 409807125 414445437 8315750 102835211 36239666 141260442 589733329 572072035 789807197 431009789 123234386\\r\\n20 39 45 46 48\\r\\n', 'output': ['5 2 1 0 115986906 \\r\\n2\\r\\n']}, {'input': '25\\r\\n26 29 17 11 35 21 11 22 17 24 41 44 27 34 42 24 44 3 8 25 23 6 16 41 2\\r\\n1 2 3 4 5\\r\\n', 'output': ['8 6 3 6 108 \\r\\n0\\r\\n']}, {'input': '25\\r\\n46 37 12 28 16 9 26 12 31 49 28 23 39 49 21 40 1 31 8 6 33 46 4 12 20\\r\\n5 6 7 8 10\\r\\n', 'output': ['1 2 2 3 57 \\r\\n2\\r\\n']}, {'input': '25\\r\\n48 3 22 29 40 21 28 31 22 16 17 3 47 37 38 15 16 27 41 48 17 11 22 15 15\\r\\n10 11 12 13 15\\r\\n', 'output': ['1 1 1 2 38 \\r\\n0\\r\\n']}, {'input': '49\\r\\n150841996 278751430 236103841 373294104 702072537 197872718 286517088 985323686 816421587 49928785 500114241 47334350 280942286 86728792 606895563 70696090 770589765 492645787 250574857 747511645 224488546 90659419 587972065 281798558 133719196 726362846 487266436 311413921 795767163 779792904 646907905 87907470 461431159 273590163 584894453 408543297 215247358 47704043 300890973 570589101 134168725 904691113 260042124 834209517 554685974 348043433 100083255 966828009 508031511\\r\\n1 2 3 4 5\\r\\n', 'output': ['12 7 12 7 4111778339 \\r\\n0\\r\\n']}, {'input': '25\\r\\n43 34 26 43 11 13 34 8 6 25 39 41 21 34 27 12 11 1 36 45 47 12 18 43 38\\r\\n1 2 10 24 25\\r\\n', 'output': ['11 46 19 0 15 \\r\\n0\\r\\n']}, {'input': '25\\r\\n38 30 40 7 7 18 43 5 29 49 50 9 4 18 30 35 21 22 15 33 9 31 32 22 6\\r\\n2 14 15 40 48\\r\\n', 'output': ['48 0 22 2 2 \\r\\n1\\r\\n']}, {'input': '50\\r\\n667406402 354775600 95220950 604569294 945922983 82947113 120853697 25192357 911801905 8804755 572528228 687361070 180664274 949243037 5283222 74969288 23627567 882714363 413386071 937062768 916521072 864701923 328941225 17876118 770879655 928962609 331124489 236187404 878629850 202558122 227732104 296494363 555832750 391788125 553472395 587090096 991781042 382982437 764518939 870576820 596491334 48319052 813976810 545209721 619789095 955839818 282149347 476620368 134986392 655856299\\r\\n1 2 3 4 5\\r\\n', 'output': ['3 13 11 9 4954444924 \\r\\n0\\r\\n']}, {'input': '50\\r\\n7 33 16 27 6 26 21 46 28 43 34 28 44 21 40 32 47 47 29 22 25 18 31 18 37 3 47 43 37 25 33 10 29 43 44 33 45 14 43 5 27 25 35 20 9 13 49 9 21 26\\r\\n3 4 5 7 9\\r\\n', 'output': ['4 6 6 15 138 \\r\\n1\\r\\n']}, {'input': '45\\r\\n18 21 6 3 48 23 5 26 37 6 49 6 42 19 8 39 38 47 36 22 13 21 14 32 43 42 5 30 35 36 16 34 32 8 1 37 14 29 39 50 25 26 10 25 39\\r\\n1 6 7 8 14\\r\\n', 'output': ['77 5 4 19 62 \\r\\n0\\r\\n']}, {'input': '45\\r\\n28 28 3 4 7 34 44 2 8 7 20 29 27 49 20 33 11 31 47 38 41 40 11 16 5 20 12 47 49 25 25 6 40 3 2 3 32 38 34 21 28 48 12 39 43\\r\\n9 10 12 14 20\\r\\n', 'output': ['4 5 2 8 44 \\r\\n8\\r\\n']}, {'input': '50\\r\\n17 30 29 29 50 42 15 18 34 10 30 3 44 11 4 35 42 8 14 41 30 4 11 1 3 23 7 28 35 6 24 37 6 12 8 7 36 40 41 26 13 46 15 40 32 34 15 28 46 31\\r\\n20 24 40 46 50\\r\\n', 'output': ['4 11 9 5 5 \\r\\n7\\r\\n']}]","id":136,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    p = list(map(int, input().split()))\\n    a, b, c, d, e = map(int, input().split())\\n    prizes = [a, b, c, d, e]\\n    counts = [0] * 5\\n    points = 0\\n    \\n    for pi in p:\\n        points += pi\\n        while True:\\n            best_prize_index = -1\\n            for i in range(4, -1, -1):\\n                if points >= prizes[i]:\\n                    best_prize_index = i\\n                    break\\n            if best_prize_index == -1:\\n                break\\n            counts[best_prize_index] += 1\\n            points -= prizes[best_prize_index]\\n    \\n    print(*counts)\\n    print(points)\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    p = list(map(int, input().split()))\\n    a, b, c, d, e = map(int, input().split())\\n    prizes = [a, b, c, d, e]\\n    counts = [0] * 5\\n    points = 0\\n    for pi in p:\\n        points += pi\\n        while True:\\n            best_prize_index = -1\\n            for i in range(4, -1, -1):\\n                if points >= prizes[i]:\\n                    best_prize_index = i\\n                    break\\n            if best_prize_index == -1:\\n                break\\n            points -= prizes[best_prize_index]\\n            counts[best_prize_index] += 1\\n    print(*counts)\\n    print(points)\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    p = list(map(int, input().split()))\\n    a, b, c, d, e = map(int, input().split())\\n    prizes = [a, b, c, d, e]\\n    counts = [0] * 5\\n    points = 0\\n    \\n    for pi in p:\\n        points += pi\\n        while True:\\n            best_prize_index = -1\\n            for i in range(4, -1, -1):\\n                if points >= prizes[i]:\\n                    best_prize_index = i\\n                    break\\n            if best_prize_index == -1:\\n                break\\n            counts[best_prize_index] += 1\\n            points -= prizes[best_prize_index]\\n    \\n    print(*counts)\\n    print(points)\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    p = list(map(int, input().split()))\\n    a, b, c, d, e = map(int, input().split())\\n    prizes = [a, b, c, d, e]\\n    counts = [0] * 5\\n    points = 0\\n    for pi in p:\\n        points += pi\\n        while True:\\n            best_prize_index = -1\\n            for i in range(4, -1, -1):\\n                if points >= prizes[i]:\\n                    best_prize_index = i\\n                    break\\n            if best_prize_index == -1:\\n                break\\n            points -= prizes[best_prize_index]\\n            counts[best_prize_index] += 1\\n    print(*counts)\\n    print(points)\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"Vasya's bicycle chain drive consists of two parts: n stars are attached to the pedal axle, m stars are attached to the rear wheel axle. The chain helps to rotate the rear wheel by transmitting the pedal rotation.We know that the i-th star on the pedal axle has ai (0\u2009&lt;\u2009a1\u2009&lt;\u2009a2\u2009&lt;\u2009...\u2009&lt;\u2009an) teeth, and the j-th star on the rear wheel axle has bj (0\u2009&lt;\u2009b1\u2009&lt;\u2009b2\u2009&lt;\u2009...\u2009&lt;\u2009bm) teeth. Any pair (i,\u2009j) (1\u2009\u2264\u2009i\u2009\u2264\u2009n;\u00a01\u2009\u2264\u2009j\u2009\u2264\u2009m) is called a gear and sets the indexes of stars to which the chain is currently attached. Gear (i,\u2009j) has a gear ratio, equal to the value .Since Vasya likes integers, he wants to find such gears (i,\u2009j), that their ratios are integers. On the other hand, Vasya likes fast driving, so among all \"integer\" gears (i,\u2009j) he wants to choose a gear with the maximum ratio. Help him to find the number of such gears.In the problem, fraction  denotes division in real numbers, that is, no rounding is performed.","input_specification":"The first input line contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u200950) \u2014 the number of stars on the bicycle's pedal axle. The second line contains n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009104) in the order of strict increasing. The third input line contains integer m (1\u2009\u2264\u2009m\u2009\u2264\u200950) \u2014 the number of stars on the rear wheel axle. The fourth line contains m integers b1,\u2009b2,\u2009...,\u2009bm (1\u2009\u2264\u2009bi\u2009\u2264\u2009104) in the order of strict increasing. It is guaranteed that there exists at least one gear (i,\u2009j), that its gear ratio is an integer. The numbers on the lines are separated by spaces.","output_specification":"Print the number of \"integer\" gears with the maximum ratio among all \"integer\" gears.","notes":"NoteIn the first sample the maximum \"integer\" gear ratio equals 3. There are two gears that have such gear ratio. For one of them a1\u2009=\u20094,\u2009b1\u2009=\u200912, and for the other a2\u2009=\u20095,\u2009b3\u2009=\u200915.","sample_inputs":["2\n4 5\n3\n12 13 15","4\n1 2 3 4\n5\n10 11 12 13 14"],"sample_outputs":["2","1"],"src_uid":"102667eaa3aee012fef70f4192464674","lang_cluster":"Python","difficulty":900,"human_solution":"import collections as cl\n\n\nn, a = int(input()), map(int, input().split())\nm, b = int(input()), list(map(int, input().split()))\n\nans = cl.Counter([xb \/\/ xa for xa in a for xb in b if xb % xa == 0])\nprint(ans[max(ans.keys())])\n","testcases":"[{'input': '2\\r\\n4 5\\r\\n3\\r\\n12 13 15\\r\\n', 'output': ['2\\r\\n']}, {'input': '4\\r\\n1 2 3 4\\r\\n5\\r\\n10 11 12 13 14\\r\\n', 'output': ['1\\r\\n']}, {'input': '1\\r\\n1\\r\\n1\\r\\n1\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n1\\r\\n1\\r\\n', 'output': ['1\\r\\n']}, {'input': '1\\r\\n1\\r\\n2\\r\\n1 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '4\\r\\n3 7 11 13\\r\\n4\\r\\n51 119 187 221\\r\\n', 'output': ['4\\r\\n']}, {'input': '4\\r\\n2 3 4 5\\r\\n3\\r\\n1 2 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n6 12 13 20 48 53 74 92 96 97\\r\\n10\\r\\n1 21 32 36 47 54 69 75 95 97\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n5 9 10 14 15 17 19 22 24 26\\r\\n10\\r\\n2 11 17 19 21 22 24 25 27 28\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n24 53 56 126 354 432 442 740 795 856\\r\\n10\\r\\n273 438 494 619 689 711 894 947 954 958\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n3 4 6 7 8 10 14 16 19 20\\r\\n10\\r\\n3 4 5 7 8 10 15 16 18 20\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n1 6 8 14 15 17 25 27 34 39\\r\\n10\\r\\n1 8 16 17 19 22 32 39 44 50\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n5 21 22 23 25 32 35 36 38 39\\r\\n10\\r\\n3 7 8 9 18 21 23 24 36 38\\r\\n', 'output': ['4\\r\\n']}, {'input': '50\\r\\n5 8 13 16 19 20 21 22 24 27 28 29 30 32 33 34 35 43 45 48 50 51 54 55 58 59 60 61 62 65 70 71 72 76 78 79 80 81 83 84 85 87 89 91 92 94 97 98 99 100\\r\\n50\\r\\n2 3 5 6 7 10 15 16 17 20 23 28 29 30 31 34 36 37 40 42 45 46 48 54 55 56 58 59 61 62 69 70 71 72 75 76 78 82 84 85 86 87 88 89 90 91 92 97 99 100\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n3 5 6 8 9 11 13 19 21 23 24 32 34 35 42 50 51 52 56 58 59 69 70 72 73 75 76 77 78 80 83 88 90 95 96 100 101 102 108 109 113 119 124 135 138 141 142 143 145 150\\r\\n50\\r\\n5 8 10 11 18 19 23 30 35 43 51 53 55 58 63 68 69 71 77 78 79 82 83 86 88 89 91 92 93 94 96 102 103 105 109 110 113 114 116 123 124 126 127 132 133 135 136 137 142 149\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n6 16 24 25 27 33 36 40 51 60 62 65 71 72 75 77 85 87 91 93 98 102 103 106 117 118 120 121 122 123 125 131 134 136 143 148 155 157 160 161 164 166 170 178 184 187 188 192 194 197\\r\\n50\\r\\n5 9 17 23 27 34 40 44 47 59 62 70 81 82 87 88 89 90 98 101 102 110 113 114 115 116 119 122 124 128 130 137 138 140 144 150 152 155 159 164 166 169 171 175 185 186 187 189 190 193\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n14 22 23 31 32 35 48 63 76 79 88 97 101 102 103 104 106 113 114 115 116 126 136 138 145 152 155 156 162 170 172 173 179 180 182 203 208 210 212 222 226 229 231 232 235 237 245 246 247 248\\r\\n50\\r\\n2 5 6 16 28 44 45 46 54 55 56 63 72 80 87 93 94 96 97 100 101 103 132 135 140 160 164 165 167 168 173 180 182 185 186 192 194 198 199 202 203 211 213 216 217 227 232 233 236 245\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n14 19 33 35 38 41 51 54 69 70 71 73 76 80 84 94 102 104 105 106 107 113 121 128 131 168 180 181 187 191 195 201 205 207 210 216 220 238 249 251 263 271 272 275 281 283 285 286 291 294\\r\\n50\\r\\n2 3 5 20 21 35 38 40 43 48 49 52 55 64 73 77 82 97 109 113 119 121 125 132 137 139 145 146 149 180 182 197 203 229 234 241 244 251 264 271 274 281 284 285 287 291 292 293 294 298\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n2 4 5 16 18 19 22 23 25 26 34 44 48 54 67 79 80 84 92 110 116 133 138 154 163 171 174 202 205 218 228 229 234 245 247 249 250 263 270 272 274 275 277 283 289 310 312 334 339 342\\r\\n50\\r\\n1 5 17 18 25 37 46 47 48 59 67 75 80 83 84 107 115 122 137 141 159 162 175 180 184 204 221 224 240 243 247 248 249 258 259 260 264 266 269 271 274 293 294 306 329 330 334 335 342 350\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n6 9 11 21 28 39 42 56 60 63 81 88 91 95 105 110 117 125 149 165 174 176 185 189 193 196 205 231 233 268 278 279 281 286 289 292 298 303 305 306 334 342 350 353 361 371 372 375 376 378\\r\\n50\\r\\n6 17 20 43 45 52 58 59 82 83 88 102 111 118 121 131 145 173 190 191 200 216 224 225 232 235 243 256 260 271 290 291 321 322 323 329 331 333 334 341 343 348 351 354 356 360 366 379 387 388\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n17 239 443 467 661 1069 1823 2333 3767 4201\\r\\n20\\r\\n51 83 97 457 593 717 997 1329 1401 1459 1471 1983 2371 2539 3207 3251 3329 5469 6637 6999\\r\\n', 'output': ['8\\r\\n']}, {'input': '20\\r\\n179 359 401 467 521 601 919 941 1103 1279 1709 1913 1949 2003 2099 2143 2179 2213 2399 4673\\r\\n20\\r\\n151 181 191 251 421 967 1109 1181 1249 1447 1471 1553 1619 2327 2551 2791 3049 3727 6071 7813\\r\\n', 'output': ['3\\r\\n']}, {'input': '20\\r\\n79 113 151 709 809 983 1291 1399 1409 1429 2377 2659 2671 2897 3217 3511 3557 3797 3823 4363\\r\\n10\\r\\n19 101 659 797 1027 1963 2129 2971 3299 9217\\r\\n', 'output': ['3\\r\\n']}, {'input': '30\\r\\n19 47 109 179 307 331 389 401 461 509 547 569 617 853 883 1249 1361 1381 1511 1723 1741 1783 2459 2531 2621 3533 3821 4091 5557 6217\\r\\n20\\r\\n401 443 563 941 967 997 1535 1567 1655 1747 1787 1945 1999 2251 2305 2543 2735 4415 6245 7555\\r\\n', 'output': ['8\\r\\n']}, {'input': '30\\r\\n3 43 97 179 257 313 353 359 367 389 397 457 547 599 601 647 1013 1021 1063 1433 1481 1531 1669 3181 3373 3559 3769 4157 4549 5197\\r\\n50\\r\\n13 15 17 19 29 79 113 193 197 199 215 223 271 293 359 485 487 569 601 683 895 919 941 967 1283 1285 1289 1549 1565 1765 1795 1835 1907 1931 1945 1985 1993 2285 2731 2735 2995 3257 4049 4139 5105 5315 7165 7405 7655 8345\\r\\n', 'output': ['20\\r\\n']}, {'input': '50\\r\\n11 17 23 53 59 109 137 149 173 251 353 379 419 421 439 503 593 607 661 773 821 877 941 997 1061 1117 1153 1229 1289 1297 1321 1609 1747 2311 2389 2543 2693 3041 3083 3137 3181 3209 3331 3373 3617 3767 4201 4409 4931 6379\\r\\n50\\r\\n55 59 67 73 85 89 101 115 211 263 295 353 545 599 607 685 739 745 997 1031 1255 1493 1523 1667 1709 1895 1949 2161 2195 2965 3019 3035 3305 3361 3373 3673 3739 3865 3881 4231 4253 4385 4985 5305 5585 5765 6145 6445 8045 8735\\r\\n', 'output': ['23\\r\\n']}, {'input': '5\\r\\n33 78 146 3055 4268\\r\\n5\\r\\n2211 2584 5226 9402 9782\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\n35 48 52 86 8001\\r\\n10\\r\\n332 3430 3554 4704 4860 5096 6215 7583 8228 8428\\r\\n', 'output': ['4\\r\\n']}, {'input': '10\\r\\n97 184 207 228 269 2084 4450 6396 7214 9457\\r\\n16\\r\\n338 1179 1284 1545 1570 2444 3167 3395 3397 5550 6440 7245 7804 7980 9415 9959\\r\\n', 'output': ['5\\r\\n']}, {'input': '30\\r\\n25 30 41 57 58 62 70 72 76 79 84 85 88 91 98 101 104 109 119 129 136 139 148 151 926 1372 3093 3936 5423 7350\\r\\n25\\r\\n1600 1920 2624 3648 3712 3968 4480 4608 4864 5056 5376 5440 5632 5824 6272 6464 6656 6934 6976 7616 8256 8704 8896 9472 9664\\r\\n', 'output': ['24\\r\\n']}, {'input': '5\\r\\n33 78 146 3055 4268\\r\\n5\\r\\n2211 2584 5226 9402 9782\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\n35 48 52 86 8001\\r\\n10\\r\\n332 3430 3554 4704 4860 5096 6215 7583 8228 8428\\r\\n', 'output': ['4\\r\\n']}, {'input': '10\\r\\n97 184 207 228 269 2084 4450 6396 7214 9457\\r\\n16\\r\\n338 1179 1284 1545 1570 2444 3167 3395 3397 5550 6440 7245 7804 7980 9415 9959\\r\\n', 'output': ['5\\r\\n']}, {'input': '30\\r\\n25 30 41 57 58 62 70 72 76 79 84 85 88 91 98 101 104 109 119 129 136 139 148 151 926 1372 3093 3936 5423 7350\\r\\n25\\r\\n1600 1920 2624 3648 3712 3968 4480 4608 4864 5056 5376 5440 5632 5824 6272 6464 6656 6934 6976 7616 8256 8704 8896 9472 9664\\r\\n', 'output': ['24\\r\\n']}, {'input': '47\\r\\n66 262 357 457 513 530 538 540 592 691 707 979 1015 1242 1246 1667 1823 1886 1963 2133 2649 2679 2916 2949 3413 3523 3699 3958 4393 4922 5233 5306 5799 6036 6302 6629 7208 7282 7315 7822 7833 7927 8068 8150 8870 8962 9987\\r\\n39\\r\\n167 199 360 528 1515 1643 1986 1988 2154 2397 2856 3552 3656 3784 3980 4096 4104 4240 4320 4736 4951 5266 5656 5849 5850 6169 6517 6875 7244 7339 7689 7832 8120 8716 9503 9509 9933 9936 9968\\r\\n', 'output': ['12\\r\\n']}, {'input': '1\\r\\n94\\r\\n50\\r\\n423 446 485 1214 1468 1507 1853 1930 1999 2258 2271 2285 2425 2543 2715 2743 2992 3196 4074 4108 4448 4475 4652 5057 5250 5312 5356 5375 5731 5986 6298 6501 6521 7146 7255 7276 7332 7481 7998 8141 8413 8665 8908 9221 9336 9491 9504 9677 9693 9706\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n51 67 75 186 194 355 512 561 720 876 1077 1221 1503 1820 2153 2385 2568 2608 2937 2969 3271 3311 3481 4081 4093 4171 4255 4256 4829 5020 5192 5636 5817 6156 6712 6717 7153 7436 7608 7612 7866 7988 8264 8293 8867 9311 9879 9882 9889 9908\\r\\n1\\r\\n5394\\r\\n', 'output': ['1\\r\\n']}, {'input': '50\\r\\n26 367 495 585 675 789 855 1185 1312 1606 2037 2241 2587 2612 2628 2807 2873 2924 3774 4067 4376 4668 4902 5001 5082 5100 5104 5209 5345 5515 5661 5777 5902 5907 6155 6323 6675 6791 7503 8159 8207 8254 8740 8848 8855 8933 9069 9164 9171 9586\\r\\n5\\r\\n1557 6246 7545 8074 8284\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n25 58 91 110 2658\\r\\n50\\r\\n21 372 909 1172 1517 1554 1797 1802 1843 1977 2006 2025 2137 2225 2317 2507 2645 2754 2919 3024 3202 3212 3267 3852 4374 4487 4553 4668 4883 4911 4916 5016 5021 5068 5104 5162 5683 5856 6374 6871 7333 7531 8099 8135 8173 8215 8462 8776 9433 9790\\r\\n', 'output': ['4\\r\\n']}, {'input': '45\\r\\n37 48 56 59 69 70 79 83 85 86 99 114 131 134 135 145 156 250 1739 1947 2116 2315 2449 3104 3666 4008 4406 4723 4829 5345 5836 6262 6296 6870 7065 7110 7130 7510 7595 8092 8442 8574 9032 9091 9355\\r\\n50\\r\\n343 846 893 1110 1651 1837 2162 2331 2596 3012 3024 3131 3294 3394 3528 3717 3997 4125 4347 4410 4581 4977 5030 5070 5119 5229 5355 5413 5418 5474 5763 5940 6151 6161 6164 6237 6506 6519 6783 7182 7413 7534 8069 8253 8442 8505 9135 9308 9828 9902\\r\\n', 'output': ['17\\r\\n']}, {'input': '50\\r\\n17 20 22 28 36 38 46 47 48 50 52 57 58 62 63 69 70 74 75 78 79 81 82 86 87 90 93 95 103 202 292 442 1756 1769 2208 2311 2799 2957 3483 4280 4324 4932 5109 5204 6225 6354 6561 7136 8754 9670\\r\\n40\\r\\n68 214 957 1649 1940 2078 2134 2716 3492 3686 4462 4559 4656 4756 4850 5044 5490 5529 5592 5626 6014 6111 6693 6790 7178 7275 7566 7663 7702 7857 7954 8342 8511 8730 8957 9021 9215 9377 9445 9991\\r\\n', 'output': ['28\\r\\n']}, {'input': '39\\r\\n10 13 21 25 36 38 47 48 58 64 68 69 73 79 86 972 2012 2215 2267 2503 3717 3945 4197 4800 5266 6169 6612 6824 7023 7322 7582 7766 8381 8626 8879 9079 9088 9838 9968\\r\\n50\\r\\n432 877 970 1152 1202 1223 1261 1435 1454 1578 1843 1907 2003 2037 2183 2195 2215 2425 3065 3492 3615 3637 3686 3946 4189 4415 4559 4656 4665 4707 4886 4887 5626 5703 5955 6208 6521 6581 6596 6693 6985 7013 7081 7343 7663 8332 8342 8637 9207 9862\\r\\n', 'output': ['15\\r\\n']}, {'input': '50\\r\\n7 144 269 339 395 505 625 688 709 950 1102 1152 1350 1381 1641 1830 1977 1999 2093 2180 2718 3308 3574 4168 4232 4259 4393 4689 4982 5154 5476 5581 5635 5721 6159 6302 6741 7010 7152 7315 7417 7482 8116 8239 8640 9347 9395 9614 9661 9822\\r\\n20\\r\\n84 162 292 1728 1866 2088 3228 3470 4068 5318 5470 6060 6380 6929 7500 8256 8399 8467 8508 9691\\r\\n', 'output': ['8\\r\\n']}, {'input': '50\\r\\n159 880 1070 1139 1358 1608 1691 1841 2073 2171 2213 2597 2692 2759 2879 2931 3173 3217 3441 4201 4878 5106 5129 5253 5395 5647 5968 6019 6130 6276 6286 6330 6409 6728 7488 7713 7765 7828 7899 8064 8264 8457 8483 8685 8900 8946 8965 9133 9187 9638\\r\\n45\\r\\n57 159 1070 1139 1391 1608 1691 1841 2171 2213 2692 2759 2931 3173 3217 3441 4201 4878 5106 5129 5253 5647 5968 6130 6276 6286 6409 7488 7694 7713 7765 7828 7899 8003 8064 8081 8244 8264 8685 8900 8946 8965 9133 9638 9673\\r\\n', 'output': ['38\\r\\n']}, {'input': '3\\r\\n3 4 5\\r\\n3\\r\\n6 20 25\\r\\n', 'output': ['2\\r\\n']}, {'input': '4\\r\\n2 3 5 8\\r\\n4\\r\\n2 6 8 10\\r\\n', 'output': ['1\\r\\n']}, {'input': '4\\r\\n3 5 7 11\\r\\n4\\r\\n3 5 7 22\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n2 3\\r\\n3\\r\\n20 30 50\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n4\\r\\n2 4 6 49\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n4 5\\r\\n3\\r\\n12 15 20\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\n2 5 7\\r\\n3\\r\\n4 5 7\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\n3 5 8\\r\\n3\\r\\n6 8 10\\r\\n', 'output': ['2\\r\\n']}, {'input': '2\\r\\n2 3\\r\\n4\\r\\n4 6 9 33\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n2 3\\r\\n4\\r\\n4 6 21 40\\r\\n', 'output': ['1\\r\\n']}, {'input': '3\\r\\n4 9 10\\r\\n3\\r\\n8 9 10\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n1 5 6 9 51\\r\\n5\\r\\n5 12 18 27 10000\\r\\n', 'output': ['1\\r\\n']}, {'input': '13\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\r\\n1\\r\\n14\\r\\n', 'output': ['1\\r\\n']}]","id":137,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\nm = int(input())\\nb = list(map(int, input().split()))\\n\\nmax_ratio = 0\\ncount = 0\\n\\nfor i in range(n):\\n    for j in range(m):\\n        if b[j] % a[i] == 0:\\n            ratio = b[j] \/\/ a[i]\\n            if ratio > max_ratio:\\n                max_ratio = ratio\\n                count = 1\\n            elif ratio == max_ratio:\\n                count += 1\\n\\nprint(count)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\na = map(int, raw_input().split())\\nm = int(raw_input())\\nb = map(int, raw_input().split())\\n\\nmax_ratio = 0\\ncount = 0\\n\\nfor i in range(n):\\n    for j in range(m):\\n        if b[j] % a[i] == 0:\\n            ratio = b[j] \/ a[i]\\n            if ratio > max_ratio:\\n                max_ratio = ratio\\n                count = 1\\n            elif ratio == max_ratio:\\n                count += 1\\n\\nprint count\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\nm = int(input())\\nb = list(map(int, input().split()))\\n\\nmax_ratio = 0\\ncount = 0\\n\\nfor i in range(n):\\n    for j in range(m):\\n        ratio = float(a[i]) \/ b[j]\\n        if ratio.is_integer():\\n            if int(ratio) > max_ratio:\\n                max_ratio = int(ratio)\\n                count = 1\\n            elif int(ratio) == max_ratio:\\n                count += 1\\n\\nprint(count)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\na = map(int, raw_input().split())\\nm = int(raw_input())\\nb = map(int, raw_input().split())\\n\\nmax_ratio = 0\\ncount = 0\\n\\nfor i in range(n):\\n    for j in range(m):\\n        ratio = float(a[i]) \/ b[j]\\n        if ratio == int(ratio):\\n            if int(ratio) > max_ratio:\\n                max_ratio = int(ratio)\\n                count = 1\\n            elif int(ratio) == max_ratio:\\n                count += 1\\n\\nprint count\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\nm = int(input())\\nb = list(map(int, input().split()))\\n\\nmax_ratio = 0\\ncount = 0\\n\\nfor i in range(n):\\n    for j in range(m):\\n        if b[j] % a[i] == 0:\\n            ratio = b[j] \/\/ a[i]\\n            if ratio > max_ratio:\\n                max_ratio = ratio\\n                count = 1\\n            elif ratio == max_ratio:\\n                count += 1\\n\\nprint(count)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\na = map(int, raw_input().split())\\nm = int(raw_input())\\nb = map(int, raw_input().split())\\n\\nmax_ratio = 0\\ncount = 0\\n\\nfor i in range(n):\\n    for j in range(m):\\n        if b[j] % a[i] == 0:\\n            ratio = b[j] \/ a[i]\\n            if ratio > max_ratio:\\n                max_ratio = ratio\\n                count = 1\\n            elif ratio == max_ratio:\\n                count += 1\\n\\nprint count\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\nm = int(input())\\nb = list(map(int, input().split()))\\n\\nmax_ratio = 0\\ncount = 0\\n\\nfor i in range(n):\\n    for j in range(m):\\n        ratio = float(a[i]) \/ b[j]\\n        if ratio.is_integer():\\n            if int(ratio) > max_ratio:\\n                max_ratio = int(ratio)\\n                count = 1\\n            elif int(ratio) == max_ratio:\\n                count += 1\\n\\nprint(count)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\na = map(int, raw_input().split())\\nm = int(raw_input())\\nb = map(int, raw_input().split())\\n\\nmax_ratio = 0\\ncount = 0\\n\\nfor i in range(n):\\n    for j in range(m):\\n        ratio = float(a[i]) \/ b[j]\\n        if ratio == int(ratio):\\n            if int(ratio) > max_ratio:\\n                max_ratio = int(ratio)\\n                count = 1\\n            elif int(ratio) == max_ratio:\\n                count += 1\\n\\nprint count\"\n  }\n]\n```"}
{"description":"Bajtek is learning to skate on ice. He's a beginner, so his only mode of transportation is pushing off from a snow drift to the north, east, south or west and sliding until he lands in another snow drift. He has noticed that in this way it's impossible to get from some snow drifts to some other by any sequence of moves. He now wants to heap up some additional snow drifts, so that he can get from any snow drift to any other one. He asked you to find the minimal number of snow drifts that need to be created.We assume that Bajtek can only heap up snow drifts at integer coordinates.","input_specification":"The first line of input contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 the number of snow drifts. Each of the following n lines contains two integers xi and yi (1\u2009\u2264\u2009xi,\u2009yi\u2009\u2264\u20091000) \u2014 the coordinates of the i-th snow drift. Note that the north direction coin\u0441ides with the direction of Oy axis, so the east direction coin\u0441ides with the direction of the Ox axis. All snow drift's locations are distinct.","output_specification":"Output the minimal number of snow drifts that need to be created in order for Bajtek to be able to reach any snow drift from any other one.","notes":null,"sample_inputs":["2\n2 1\n1 2","2\n2 1\n4 1"],"sample_outputs":["1","0"],"src_uid":"cb4dbff31d967c3dab8fe0495eb871dc","lang_cluster":"Python","difficulty":1200,"human_solution":"n = int(input())\n\ncoodenadas = []\nfor i in range(n):\n    x, y = [ int(i) for i in input().split() ]\n    coodenadas.append({\n        'x': { x },\n        'y': { y }\n    })\n\nfor i in range(n-1, -1, -1):\n    j = i - 1\n    while j >= 0 and i < len(coodenadas):\n        if len(coodenadas[j]['x'].intersection(coodenadas[i]['x'])) or len(coodenadas[j]['y'].intersection(coodenadas[i]['y'])):\n            coodenadas[i]['x'].update(coodenadas[j]['x'])\n            coodenadas[i]['y'].update(coodenadas[j]['y'])\n            coodenadas.pop(j)\n        j -= 1\n\nprint(len(coodenadas) - 1)","testcases":"[{'input': '2\\r\\n2 1\\r\\n1 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n2 1\\r\\n4 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '24\\r\\n171 35\\r\\n261 20\\r\\n4 206\\r\\n501 446\\r\\n961 912\\r\\n581 748\\r\\n946 978\\r\\n463 514\\r\\n841 889\\r\\n341 466\\r\\n842 967\\r\\n54 102\\r\\n235 261\\r\\n925 889\\r\\n682 672\\r\\n623 636\\r\\n268 94\\r\\n635 710\\r\\n474 510\\r\\n697 794\\r\\n586 663\\r\\n182 184\\r\\n806 663\\r\\n468 459\\r\\n', 'output': ['21\\r\\n']}, {'input': '17\\r\\n660 646\\r\\n440 442\\r\\n689 618\\r\\n441 415\\r\\n922 865\\r\\n950 972\\r\\n312 366\\r\\n203 229\\r\\n873 860\\r\\n219 199\\r\\n344 308\\r\\n169 176\\r\\n961 992\\r\\n153 84\\r\\n201 230\\r\\n987 938\\r\\n834 815\\r\\n', 'output': ['16\\r\\n']}, {'input': '11\\r\\n798 845\\r\\n722 911\\r\\n374 270\\r\\n629 537\\r\\n748 856\\r\\n831 885\\r\\n486 641\\r\\n751 829\\r\\n609 492\\r\\n98 27\\r\\n654 663\\r\\n', 'output': ['10\\r\\n']}, {'input': '1\\r\\n321 88\\r\\n', 'output': ['0\\r\\n']}, {'input': '9\\r\\n811 859\\r\\n656 676\\r\\n76 141\\r\\n945 951\\r\\n497 455\\r\\n18 55\\r\\n335 294\\r\\n267 275\\r\\n656 689\\r\\n', 'output': ['7\\r\\n']}, {'input': '7\\r\\n948 946\\r\\n130 130\\r\\n761 758\\r\\n941 938\\r\\n971 971\\r\\n387 385\\r\\n509 510\\r\\n', 'output': ['6\\r\\n']}, {'input': '6\\r\\n535 699\\r\\n217 337\\r\\n508 780\\r\\n180 292\\r\\n393 112\\r\\n732 888\\r\\n', 'output': ['5\\r\\n']}, {'input': '14\\r\\n25 23\\r\\n499 406\\r\\n193 266\\r\\n823 751\\r\\n219 227\\r\\n101 138\\r\\n978 992\\r\\n43 74\\r\\n997 932\\r\\n237 189\\r\\n634 538\\r\\n774 740\\r\\n842 767\\r\\n742 802\\r\\n', 'output': ['13\\r\\n']}, {'input': '12\\r\\n548 506\\r\\n151 198\\r\\n370 380\\r\\n655 694\\r\\n654 690\\r\\n407 370\\r\\n518 497\\r\\n819 827\\r\\n765 751\\r\\n802 771\\r\\n741 752\\r\\n653 662\\r\\n', 'output': ['11\\r\\n']}, {'input': '40\\r\\n685 711\\r\\n433 403\\r\\n703 710\\r\\n491 485\\r\\n616 619\\r\\n288 282\\r\\n884 871\\r\\n367 352\\r\\n500 511\\r\\n977 982\\r\\n51 31\\r\\n576 564\\r\\n508 519\\r\\n755 762\\r\\n22 20\\r\\n368 353\\r\\n232 225\\r\\n953 955\\r\\n452 436\\r\\n311 330\\r\\n967 988\\r\\n369 364\\r\\n791 803\\r\\n150 149\\r\\n651 661\\r\\n118 93\\r\\n398 387\\r\\n748 766\\r\\n852 852\\r\\n230 228\\r\\n555 545\\r\\n515 519\\r\\n667 678\\r\\n867 862\\r\\n134 146\\r\\n859 863\\r\\n96 99\\r\\n486 469\\r\\n303 296\\r\\n780 786\\r\\n', 'output': ['38\\r\\n']}, {'input': '3\\r\\n175 201\\r\\n907 909\\r\\n388 360\\r\\n', 'output': ['2\\r\\n']}, {'input': '7\\r\\n312 298\\r\\n86 78\\r\\n73 97\\r\\n619 594\\r\\n403 451\\r\\n538 528\\r\\n71 86\\r\\n', 'output': ['6\\r\\n']}, {'input': '19\\r\\n802 820\\r\\n368 248\\r\\n758 794\\r\\n455 378\\r\\n876 888\\r\\n771 814\\r\\n245 177\\r\\n586 555\\r\\n844 842\\r\\n364 360\\r\\n820 856\\r\\n731 624\\r\\n982 975\\r\\n825 856\\r\\n122 121\\r\\n862 896\\r\\n42 4\\r\\n792 841\\r\\n828 820\\r\\n', 'output': ['16\\r\\n']}, {'input': '32\\r\\n643 877\\r\\n842 614\\r\\n387 176\\r\\n99 338\\r\\n894 798\\r\\n652 728\\r\\n611 648\\r\\n622 694\\r\\n579 781\\r\\n243 46\\r\\n322 305\\r\\n198 438\\r\\n708 579\\r\\n246 325\\r\\n536 459\\r\\n874 593\\r\\n120 277\\r\\n989 907\\r\\n223 110\\r\\n35 130\\r\\n761 692\\r\\n690 661\\r\\n518 766\\r\\n226 93\\r\\n678 597\\r\\n725 617\\r\\n661 574\\r\\n775 496\\r\\n56 416\\r\\n14 189\\r\\n358 359\\r\\n898 901\\r\\n', 'output': ['31\\r\\n']}, {'input': '32\\r\\n325 327\\r\\n20 22\\r\\n72 74\\r\\n935 933\\r\\n664 663\\r\\n726 729\\r\\n785 784\\r\\n170 171\\r\\n315 314\\r\\n577 580\\r\\n984 987\\r\\n313 317\\r\\n434 435\\r\\n962 961\\r\\n55 54\\r\\n46 44\\r\\n743 742\\r\\n434 433\\r\\n617 612\\r\\n332 332\\r\\n883 886\\r\\n940 936\\r\\n793 792\\r\\n645 644\\r\\n611 607\\r\\n418 418\\r\\n465 465\\r\\n219 218\\r\\n167 164\\r\\n56 54\\r\\n403 405\\r\\n210 210\\r\\n', 'output': ['29\\r\\n']}, {'input': '32\\r\\n652 712\\r\\n260 241\\r\\n27 154\\r\\n188 16\\r\\n521 351\\r\\n518 356\\r\\n452 540\\r\\n790 827\\r\\n339 396\\r\\n336 551\\r\\n897 930\\r\\n828 627\\r\\n27 168\\r\\n180 113\\r\\n134 67\\r\\n794 671\\r\\n812 711\\r\\n100 241\\r\\n686 813\\r\\n138 289\\r\\n384 506\\r\\n884 932\\r\\n913 959\\r\\n470 508\\r\\n730 734\\r\\n373 478\\r\\n788 862\\r\\n392 426\\r\\n148 68\\r\\n113 49\\r\\n713 852\\r\\n924 894\\r\\n', 'output': ['29\\r\\n']}, {'input': '14\\r\\n685 808\\r\\n542 677\\r\\n712 747\\r\\n832 852\\r\\n187 410\\r\\n399 338\\r\\n626 556\\r\\n530 635\\r\\n267 145\\r\\n215 209\\r\\n559 684\\r\\n944 949\\r\\n753 596\\r\\n601 823\\r\\n', 'output': ['13\\r\\n']}, {'input': '5\\r\\n175 158\\r\\n16 2\\r\\n397 381\\r\\n668 686\\r\\n957 945\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n312 284\\r\\n490 509\\r\\n730 747\\r\\n504 497\\r\\n782 793\\r\\n', 'output': ['4\\r\\n']}, {'input': '2\\r\\n802 903\\r\\n476 348\\r\\n', 'output': ['1\\r\\n']}, {'input': '4\\r\\n325 343\\r\\n425 442\\r\\n785 798\\r\\n275 270\\r\\n', 'output': ['3\\r\\n']}, {'input': '28\\r\\n462 483\\r\\n411 401\\r\\n118 94\\r\\n111 127\\r\\n5 6\\r\\n70 52\\r\\n893 910\\r\\n73 63\\r\\n818 818\\r\\n182 201\\r\\n642 633\\r\\n900 886\\r\\n893 886\\r\\n684 700\\r\\n157 173\\r\\n953 953\\r\\n671 660\\r\\n224 225\\r\\n832 801\\r\\n152 157\\r\\n601 585\\r\\n115 101\\r\\n739 722\\r\\n611 606\\r\\n659 642\\r\\n461 469\\r\\n702 689\\r\\n649 653\\r\\n', 'output': ['25\\r\\n']}, {'input': '36\\r\\n952 981\\r\\n885 900\\r\\n803 790\\r\\n107 129\\r\\n670 654\\r\\n143 132\\r\\n66 58\\r\\n813 819\\r\\n849 837\\r\\n165 198\\r\\n247 228\\r\\n15 39\\r\\n619 618\\r\\n105 138\\r\\n868 855\\r\\n965 957\\r\\n293 298\\r\\n613 599\\r\\n227 212\\r\\n745 754\\r\\n723 704\\r\\n877 858\\r\\n503 487\\r\\n678 697\\r\\n592 595\\r\\n155 135\\r\\n962 982\\r\\n93 89\\r\\n660 673\\r\\n225 212\\r\\n967 987\\r\\n690 680\\r\\n804 813\\r\\n489 518\\r\\n240 221\\r\\n111 124\\r\\n', 'output': ['34\\r\\n']}, {'input': '30\\r\\n89 3\\r\\n167 156\\r\\n784 849\\r\\n943 937\\r\\n144 95\\r\\n24 159\\r\\n80 120\\r\\n657 683\\r\\n585 596\\r\\n43 147\\r\\n909 964\\r\\n131 84\\r\\n345 389\\r\\n333 321\\r\\n91 126\\r\\n274 325\\r\\n859 723\\r\\n866 922\\r\\n622 595\\r\\n690 752\\r\\n902 944\\r\\n127 170\\r\\n426 383\\r\\n905 925\\r\\n172 284\\r\\n793 810\\r\\n414 510\\r\\n890 884\\r\\n123 24\\r\\n267 255\\r\\n', 'output': ['29\\r\\n']}, {'input': '5\\r\\n664 666\\r\\n951 941\\r\\n739 742\\r\\n844 842\\r\\n2 2\\r\\n', 'output': ['4\\r\\n']}, {'input': '3\\r\\n939 867\\r\\n411 427\\r\\n757 708\\r\\n', 'output': ['2\\r\\n']}, {'input': '36\\r\\n429 424\\r\\n885 972\\r\\n442 386\\r\\n512 511\\r\\n751 759\\r\\n4 115\\r\\n461 497\\r\\n496 408\\r\\n8 23\\r\\n542 562\\r\\n296 331\\r\\n448 492\\r\\n412 395\\r\\n109 166\\r\\n622 640\\r\\n379 355\\r\\n251 262\\r\\n564 586\\r\\n66 115\\r\\n275 291\\r\\n666 611\\r\\n629 534\\r\\n510 567\\r\\n635 666\\r\\n738 803\\r\\n420 369\\r\\n92 17\\r\\n101 144\\r\\n141 92\\r\\n258 258\\r\\n184 235\\r\\n492 456\\r\\n311 210\\r\\n394 357\\r\\n531 512\\r\\n634 636\\r\\n', 'output': ['34\\r\\n']}, {'input': '29\\r\\n462 519\\r\\n871 825\\r\\n127 335\\r\\n156 93\\r\\n576 612\\r\\n885 830\\r\\n634 779\\r\\n340 105\\r\\n744 795\\r\\n716 474\\r\\n93 139\\r\\n563 805\\r\\n137 276\\r\\n177 101\\r\\n333 14\\r\\n391 437\\r\\n873 588\\r\\n817 518\\r\\n460 597\\r\\n572 670\\r\\n140 303\\r\\n392 441\\r\\n273 120\\r\\n862 578\\r\\n670 639\\r\\n410 161\\r\\n544 577\\r\\n193 116\\r\\n252 195\\r\\n', 'output': ['28\\r\\n']}, {'input': '23\\r\\n952 907\\r\\n345 356\\r\\n812 807\\r\\n344 328\\r\\n242 268\\r\\n254 280\\r\\n1000 990\\r\\n80 78\\r\\n424 396\\r\\n595 608\\r\\n755 813\\r\\n383 380\\r\\n55 56\\r\\n598 633\\r\\n203 211\\r\\n508 476\\r\\n600 593\\r\\n206 192\\r\\n855 882\\r\\n517 462\\r\\n967 994\\r\\n642 657\\r\\n493 488\\r\\n', 'output': ['22\\r\\n']}, {'input': '10\\r\\n579 816\\r\\n806 590\\r\\n830 787\\r\\n120 278\\r\\n677 800\\r\\n16 67\\r\\n188 251\\r\\n559 560\\r\\n87 67\\r\\n104 235\\r\\n', 'output': ['8\\r\\n']}, {'input': '23\\r\\n420 424\\r\\n280 303\\r\\n515 511\\r\\n956 948\\r\\n799 803\\r\\n441 455\\r\\n362 369\\r\\n299 289\\r\\n823 813\\r\\n982 967\\r\\n876 878\\r\\n185 157\\r\\n529 551\\r\\n964 989\\r\\n655 656\\r\\n1 21\\r\\n114 112\\r\\n45 56\\r\\n935 937\\r\\n1000 997\\r\\n934 942\\r\\n360 366\\r\\n648 621\\r\\n', 'output': ['22\\r\\n']}, {'input': '23\\r\\n102 84\\r\\n562 608\\r\\n200 127\\r\\n952 999\\r\\n465 496\\r\\n322 367\\r\\n728 690\\r\\n143 147\\r\\n855 867\\r\\n861 866\\r\\n26 59\\r\\n300 273\\r\\n255 351\\r\\n192 246\\r\\n70 111\\r\\n365 277\\r\\n32 104\\r\\n298 319\\r\\n330 354\\r\\n241 141\\r\\n56 125\\r\\n315 298\\r\\n412 461\\r\\n', 'output': ['22\\r\\n']}, {'input': '7\\r\\n429 506\\r\\n346 307\\r\\n99 171\\r\\n853 916\\r\\n322 263\\r\\n115 157\\r\\n906 924\\r\\n', 'output': ['6\\r\\n']}, {'input': '3\\r\\n1 1\\r\\n2 1\\r\\n2 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '4\\r\\n1 1\\r\\n1 2\\r\\n2 1\\r\\n2 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n3 1\\r\\n3 3\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n3 1\\r\\n3 2\\r\\n3 3\\r\\n', 'output': ['0\\r\\n']}, {'input': '20\\r\\n1 1\\r\\n2 2\\r\\n3 3\\r\\n3 9\\r\\n4 4\\r\\n5 2\\r\\n5 5\\r\\n5 7\\r\\n5 8\\r\\n6 2\\r\\n6 6\\r\\n6 9\\r\\n7 7\\r\\n8 8\\r\\n9 4\\r\\n9 7\\r\\n9 9\\r\\n10 2\\r\\n10 9\\r\\n10 10\\r\\n', 'output': ['1\\r\\n']}, {'input': '21\\r\\n1 1\\r\\n1 9\\r\\n2 1\\r\\n2 2\\r\\n2 5\\r\\n2 6\\r\\n2 9\\r\\n3 3\\r\\n3 8\\r\\n4 1\\r\\n4 4\\r\\n5 5\\r\\n5 8\\r\\n6 6\\r\\n7 7\\r\\n8 8\\r\\n9 9\\r\\n10 4\\r\\n10 10\\r\\n11 5\\r\\n11 11\\r\\n', 'output': ['1\\r\\n']}, {'input': '22\\r\\n1 1\\r\\n1 3\\r\\n1 4\\r\\n1 8\\r\\n1 9\\r\\n1 11\\r\\n2 2\\r\\n3 3\\r\\n4 4\\r\\n4 5\\r\\n5 5\\r\\n6 6\\r\\n6 8\\r\\n7 7\\r\\n8 3\\r\\n8 4\\r\\n8 8\\r\\n9 9\\r\\n10 10\\r\\n11 4\\r\\n11 9\\r\\n11 11\\r\\n', 'output': ['3\\r\\n']}, {'input': '50\\r\\n1 1\\r\\n2 2\\r\\n2 9\\r\\n3 3\\r\\n4 4\\r\\n4 9\\r\\n4 16\\r\\n4 24\\r\\n5 5\\r\\n6 6\\r\\n7 7\\r\\n8 8\\r\\n8 9\\r\\n8 20\\r\\n9 9\\r\\n10 10\\r\\n11 11\\r\\n12 12\\r\\n13 13\\r\\n14 7\\r\\n14 14\\r\\n14 16\\r\\n14 25\\r\\n15 4\\r\\n15 6\\r\\n15 15\\r\\n15 22\\r\\n16 6\\r\\n16 16\\r\\n17 17\\r\\n18 18\\r\\n19 6\\r\\n19 19\\r\\n20 20\\r\\n21 21\\r\\n22 6\\r\\n22 22\\r\\n23 23\\r\\n24 6\\r\\n24 7\\r\\n24 8\\r\\n24 9\\r\\n24 24\\r\\n25 1\\r\\n25 3\\r\\n25 5\\r\\n25 7\\r\\n25 23\\r\\n25 24\\r\\n25 25\\r\\n', 'output': ['7\\r\\n']}, {'input': '55\\r\\n1 1\\r\\n1 14\\r\\n2 2\\r\\n2 19\\r\\n3 1\\r\\n3 3\\r\\n3 8\\r\\n3 14\\r\\n3 23\\r\\n4 1\\r\\n4 4\\r\\n5 5\\r\\n5 8\\r\\n5 15\\r\\n6 2\\r\\n6 3\\r\\n6 4\\r\\n6 6\\r\\n7 7\\r\\n8 8\\r\\n8 21\\r\\n9 9\\r\\n10 1\\r\\n10 10\\r\\n11 9\\r\\n11 11\\r\\n12 12\\r\\n13 13\\r\\n14 14\\r\\n15 15\\r\\n15 24\\r\\n16 5\\r\\n16 16\\r\\n17 5\\r\\n17 10\\r\\n17 17\\r\\n17 18\\r\\n17 22\\r\\n17 27\\r\\n18 18\\r\\n19 19\\r\\n20 20\\r\\n21 20\\r\\n21 21\\r\\n22 22\\r\\n23 23\\r\\n24 14\\r\\n24 24\\r\\n25 25\\r\\n26 8\\r\\n26 11\\r\\n26 26\\r\\n27 3\\r\\n27 27\\r\\n28 28\\r\\n', 'output': ['5\\r\\n']}, {'input': '3\\r\\n1 2\\r\\n2 1\\r\\n2 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n4 4\\r\\n3 4\\r\\n5 4\\r\\n4 5\\r\\n4 3\\r\\n3 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '4\\r\\n1 1\\r\\n1 2\\r\\n2 1\\r\\n2 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n1 1\\r\\n2 2\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '8\\r\\n1 3\\r\\n1 1\\r\\n4 1\\r\\n2 2\\r\\n2 5\\r\\n5 9\\r\\n5 1\\r\\n5 4\\r\\n', 'output': ['1\\r\\n']}, {'input': '10\\r\\n1 1\\r\\n1 2\\r\\n1 3\\r\\n1 4\\r\\n5 5\\r\\n6 6\\r\\n7 7\\r\\n8 8\\r\\n9 9\\r\\n100 100\\r\\n', 'output': ['6\\r\\n']}, {'input': '7\\r\\n1 1\\r\\n2 2\\r\\n3 3\\r\\n4 4\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n1 1\\r\\n2 1\\r\\n2 2\\r\\n2 4\\r\\n4 3\\r\\n2 3\\r\\n', 'output': ['0\\r\\n']}, {'input': '4\\r\\n3 1\\r\\n2 1\\r\\n2 2\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n1 1\\r\\n2 2\\r\\n2 1\\r\\n2 4\\r\\n4 3\\r\\n2 3\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n1 2\\r\\n1 3\\r\\n1 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '4\\r\\n1 1\\r\\n2 2\\r\\n1 2\\r\\n2 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '4\\r\\n1 3\\r\\n2 1\\r\\n3 2\\r\\n3 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '7\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n3 3\\r\\n3 4\\r\\n4 4\\r\\n1 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '21\\r\\n12 12\\r\\n13 12\\r\\n12 11\\r\\n13 13\\r\\n10 10\\r\\n11 10\\r\\n11 11\\r\\n501 500\\r\\n501 501\\r\\n503 502\\r\\n500 500\\r\\n503 503\\r\\n502 501\\r\\n502 502\\r\\n700 700\\r\\n702 702\\r\\n703 702\\r\\n701 701\\r\\n702 701\\r\\n703 703\\r\\n701 700\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n1 11\\r\\n6 8\\r\\n11 10\\r\\n1 10\\r\\n11 11\\r\\n6 9\\r\\n', 'output': ['1\\r\\n']}, {'input': '4\\r\\n1 1\\r\\n2 2\\r\\n3 2\\r\\n3 1\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n1 2\\r\\n3 4\\r\\n3 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '4\\r\\n5 5\\r\\n5 4\\r\\n6 3\\r\\n6 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n1 1\\r\\n2 2\\r\\n2 1\\r\\n', 'output': ['0\\r\\n']}]","id":138,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    points = []\\n    for _ in range(n):\\n        points.append(list(map(int, input().split())))\\n\\n    def can_reach(p1, p2):\\n        return p1[0] == p2[0] or p1[1] == p2[1]\\n\\n    adj = [[] for _ in range(n)]\\n    for i in range(n):\\n        for j in range(i + 1, n):\\n            if can_reach(points[i], points[j]):\\n                adj[i].append(j)\\n                adj[j].append(i)\\n\\n    visited = [False] * n\\n    count = 0\\n\\n    def dfs(u):\\n        visited[u] = True\\n        for v in adj[u]:\\n            if not visited[v]:\\n                dfs(v)\\n\\n    for i in range(n):\\n        if not visited[i]:\\n            dfs(i)\\n            count += 1\\n\\n    print(count - 1)\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    points = []\\n    for _ in range(n):\\n        points.append(list(map(int, input().split())))\\n    \\n    def can_reach(p1, p2):\\n        return p1[0] == p2[0] or p1[1] == p2[1]\\n    \\n    adj = [[] for _ in range(n)]\\n    for i in range(n):\\n        for j in range(n):\\n            if i != j and can_reach(points[i], points[j]):\\n                adj[i].append(j)\\n                \\n    visited = [False] * n\\n    count = 0\\n    \\n    def dfs(u):\\n        visited[u] = True\\n        for v in adj[u]:\\n            if not visited[v]:\\n                dfs(v)\\n                \\n    for i in range(n):\\n        if not visited[i]:\\n            dfs(i)\\n            count += 1\\n    \\n    print(count - 1)\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    points = []\\n    for _ in range(n):\\n        points.append(list(map(int, input().split())))\\n\\n    def can_reach(p1, p2):\\n        return p1[0] == p2[0] or p1[1] == p2[1]\\n\\n    adj = [[] for _ in range(n)]\\n    for i in range(n):\\n        for j in range(i + 1, n):\\n            if can_reach(points[i], points[j]):\\n                adj[i].append(j)\\n                adj[j].append(i)\\n\\n    visited = [False] * n\\n    count = 0\\n\\n    def dfs(u):\\n        visited[u] = True\\n        for v in adj[u]:\\n            if not visited[v]:\\n                dfs(v)\\n\\n    for i in range(n):\\n        if not visited[i]:\\n            dfs(i)\\n            count += 1\\n\\n    print(count - 1)\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    points = []\\n    for _ in range(n):\\n        points.append(list(map(int, input().split())))\\n    \\n    def can_reach(p1, p2):\\n        return p1[0] == p2[0] or p1[1] == p2[1]\\n    \\n    adj = [[] for _ in range(n)]\\n    for i in range(n):\\n        for j in range(n):\\n            if i != j and can_reach(points[i], points[j]):\\n                adj[i].append(j)\\n                \\n    visited = [False] * n\\n    count = 0\\n    \\n    def dfs(u):\\n        visited[u] = True\\n        for v in adj[u]:\\n            if not visited[v]:\\n                dfs(v)\\n                \\n    for i in range(n):\\n        if not visited[i]:\\n            dfs(i)\\n            count += 1\\n    \\n    print(count - 1)\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"Peter likes to travel by train. He likes it so much that on the train he falls asleep. Once in summer Peter was going by train from city A to city B, and as usual, was sleeping. Then he woke up, started to look through the window and noticed that every railway station has a flag of a particular colour.The boy started to memorize the order of the flags' colours that he had seen. But soon he fell asleep again. Unfortunately, he didn't sleep long, he woke up and went on memorizing the colours. Then he fell asleep again, and that time he slept till the end of the journey.At the station he told his parents about what he was doing, and wrote two sequences of the colours that he had seen before and after his sleep, respectively.Peter's parents know that their son likes to fantasize. They give you the list of the flags' colours at the stations that the train passes sequentially on the way from A to B, and ask you to find out if Peter could see those sequences on the way from A to B, or from B to A. Remember, please, that Peter had two periods of wakefulness.Peter's parents put lowercase Latin letters for colours. The same letter stands for the same colour, different letters \u2014 for different colours.","input_specification":"The input data contains three lines. The first line contains a non-empty string, whose length does not exceed 105, the string consists of lowercase Latin letters \u2014 the flags' colours at the stations on the way from A to B. On the way from B to A the train passes the same stations, but in reverse order.  The second line contains the sequence, written by Peter during the first period of wakefulness. The third line contains the sequence, written during the second period of wakefulness. Both sequences are non-empty, consist of lowercase Latin letters, and the length of each does not exceed 100 letters. Each of the sequences is written in chronological order. ","output_specification":"Output one of the four words without inverted commas:    \u00abforward\u00bb \u2014 if Peter could see such sequences only on the way from A to B;  \u00abbackward\u00bb \u2014 if Peter could see such sequences on the way from B to A;  \u00abboth\u00bb \u2014 if Peter could see such sequences both on the way from A to B, and on the way from B to A;  \u00abfantasy\u00bb \u2014 if Peter could not see such sequences. ","notes":"NoteIt is assumed that the train moves all the time, so one flag cannot be seen twice. There are no flags at stations A and B.","sample_inputs":["atob\na\nb","aaacaaa\naca\naa"],"sample_outputs":["forward","both"],"src_uid":"c3244e952830643938d51ce14f043d7d","lang_cluster":"Python","difficulty":1200,"human_solution":"\"\"\"\nPeter likes to travel by train. He likes it so much that on the train he falls asleep.\n\nOnce in summer Peter was going by train from city A to city B, and as usual, was sleeping. Then he woke up, started to look through the window and noticed that every railway station has a flag of a particular colour.\n\nThe boy started to memorize the order of the flags' colours that he had seen. But soon he fell asleep again. Unfortunately, he didn't sleep long, he woke up and went on memorizing the colours. Then he fell asleep again, and that time he slept till the end of the journey.\n\nAt the station he told his parents about what he was doing, and wrote two sequences of the colours that he had seen before and after his sleep, respectively.\n\nPeter's parents know that their son likes to fantasize. They give you the list of the flags' colours at the stations that the train passes sequentially on the way from A to B, and ask you to find out if Peter could see those sequences on the way from A to B, or from B to A. Remember, please, that Peter had two periods of wakefulness.\n\nPeter's parents put lowercase Latin letters for colours. The same letter stands for the same colour, different letters \u2014 for different colours.\n\nInput\nThe input data contains three lines. The first line contains a non-empty string, whose length does not exceed 105, the string consists of lowercase Latin letters \u2014 the flags' colours at the stations on the way from A to B. On the way from B to A the train passes the same stations, but in reverse order.\n\nThe second line contains the sequence, written by Peter during the first period of wakefulness. The third line contains the sequence, written during the second period of wakefulness. Both sequences are non-empty, consist of lowercase Latin letters, and the length of each does not exceed 100 letters. Each of the sequences is written in chronological order.\n\nOutput\nOutput one of the four words without inverted commas:\n\n\u00abforward\u00bb \u2014 if Peter could see such sequences only on the way from A to B;\n\u00abbackward\u00bb \u2014 if Peter could see such sequences on the way from B to A;\n\u00abboth\u00bb \u2014 if Peter could see such sequences both on the way from A to B, and on the way from B to A;\n\u00abfantasy\u00bb \u2014 if Peter could not see such sequences.\n\"\"\"\n\n\nx = input()\nx_reversed = ''.join(list(reversed(x)))\n\n# print(x)\n# print(x_reversed)\n\nseq1 = input()\nseq2 = input()\n\nif len(seq1) + len(seq2) > len(x):\n\tprint('fantasy')\nelse:\n\tforward = False\n\tbackward = False\n\n\tx_find_seq1 = x.find(seq1)\n\tif x_find_seq1 > -1:\n\t\tx_find_seq2 = x[x_find_seq1 + len(seq1):].find(seq2)\n\t\tif x_find_seq2 > -1:\n\t\t\tx_find_seq2 += x_find_seq1 + len(seq1)\n\telse:\n\t\tx_find_seq2 = -1\n\n\tx_reversed_find_seq1 = x_reversed.find(seq1)\n\tif x_reversed_find_seq1 > -1:\n\t\tx_reversed_find_seq2 = x_reversed[x_reversed_find_seq1 + len(seq1):].find(seq2)\n\t\tif x_reversed_find_seq2 > -1:\n\t\t\tx_reversed_find_seq2 += x_reversed_find_seq1 + len(seq1)\n\telse:\n\t\tx_reversed_find_seq2 = -1\n\n\t# print('x_find_seq1:', x_find_seq1)\n\t# print('x_find_seq2:', x_find_seq2)\n\n\t# print(\"--------\")\n\t# print(x_reversed)\n\t# print('x_reversed_find_seq1:', x_reversed_find_seq1)\n\t# print('x_reversed_find_seq2:', x_reversed_find_seq2)\n\n\tif (x_find_seq1 != -1 and x_find_seq1 != -1):\n\t\tif x_find_seq1 <= x_find_seq2:\n\t\t\tforward = True\n\n\tif (x_reversed_find_seq1 != -1 and x_reversed_find_seq1 != -1):\n\t\tif x_reversed_find_seq1 <= x_reversed_find_seq2:\n\t\t\tbackward = True\n\n\tif forward and backward:\n\t\tprint('both')\n\telif forward:\n\t\tprint(\"forward\")\n\telif backward:\n\t\tprint(\"backward\")\n\telse:\n\t\tprint('fantasy')\n\n\"\"\"\nx = [1,2,3,4]\nprint(x[1:])\n\n\nseq1_list = list(seq1)\nseq1_len = len(seq1)\n\nseq2_list = list(seq2)\nseq2_len = len(seq2)\n\nx_len = len(x)\n\nseq1_found = False\nfor elm, i in enumerate(x):\n\tif elm == seq1_list[0] and x_len-i >= seq1_len:\n\t\tfor j in seq2_list:\n\t\t\tif j != \n\"\"\"","testcases":"[{'input': 'atob\\r\\na\\r\\nb\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'aaacaaa\\r\\naca\\r\\naa\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aaa\\r\\naa\\r\\naa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'astalavista\\r\\nastla\\r\\nlavista\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'abacabadabacaba\\r\\nabacaba\\r\\nabacaba\\r\\n', 'output': ['both\\r\\n']}, {'input': 'a\\r\\na\\r\\na\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'ab\\r\\nb\\r\\na\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'aaa\\r\\naaaa\\r\\naaaa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'bbabbbbababbaabaabaa\\r\\nabb\\r\\nbaab\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'bbbbbbbbbbbbbbbbbbbbbbbbb\\r\\nbbbb\\r\\nbbbbb\\r\\n', 'output': ['both\\r\\n']}, {'input': 'babaabababaaaababaabababaabababababababbababbbabbaabababaababbaabbababaababaaabababaabbaababaaababaa\\r\\nabaabababaa\\r\\nabaabbaa\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'bbbbbbbbbbbbbbbbbbbbbbbbb\\r\\nbbbb\\r\\nbbbbb\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aababaaababaabbaabababaaababaabababbaabbabaabababaabbabbbababbababababababaabababaababaaaabababaabab\\r\\nabaabababaa\\r\\nabaabbaa\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'aaaa\\r\\naaa\\r\\naa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzz\\r\\nzzz\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzzzz\\r\\nzzzz\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'zzzz\\r\\nzz\\r\\nzz\\r\\n', 'output': ['both\\r\\n']}, {'input': 'aabaa\\r\\naab\\r\\nbaa\\r\\n', 'output': ['fantasy\\r\\n']}, {'input': 'aabaab\\r\\naba\\r\\nab\\r\\n', 'output': ['forward\\r\\n']}, {'input': 'aab\\r\\nb\\r\\naa\\r\\n', 'output': ['backward\\r\\n']}, {'input': 'abacaba\\r\\naca\\r\\nba\\r\\n', 'output': ['both\\r\\n']}]","id":139,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    s = input()\\n    s1 = input()\\n    s2 = input()\\n\\n    def check_forward(s, s1, s2):\\n        n = len(s)\\n        n1 = len(s1)\\n        n2 = len(s2)\\n\\n        for i in range(n - n1 + 1):\\n            if s[i:i+n1] == s1:\\n                for j in range(i + n1, n - n2 + 1):\\n                    if s[j:j+n2] == s2:\\n                        return True\\n        return False\\n\\n    def check_backward(s, s1, s2):\\n        s_reversed = s[::-1]\\n        n = len(s)\\n        n1 = len(s1)\\n        n2 = len(s2)\\n\\n        for i in range(n - n1 + 1):\\n            if s_reversed[i:i+n1] == s1:\\n                for j in range(i + n1, n - n2 + 1):\\n                    if s_reversed[j:j+n2] == s2:\\n                        return True\\n        return False\\n\\n    forward = check_forward(s, s1, s2)\\n    backward = check_backward(s, s1, s2)\\n\\n    if forward and backward:\\n        print(\\\"both\\\")\\n    elif forward:\\n        print(\\\"forward\\\")\\n    elif backward:\\n        print(\\\"backward\\\")\\n    else:\\n        print(\\\"fantasy\\\")\\n\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    s = input()\\n    s1 = input()\\n    s2 = input()\\n\\n    def check_forward(s, s1, s2):\\n        n = len(s)\\n        n1 = len(s1)\\n        n2 = len(s2)\\n        \\n        for i in range(n - n1 + 1):\\n            if s[i:i+n1] == s1:\\n                for j in range(i + n1, n - n2 + 1):\\n                    if s[j:j+n2] == s2:\\n                        return True\\n        return False\\n\\n    def check_backward(s, s1, s2):\\n        s_rev = s[::-1]\\n        n = len(s_rev)\\n        n1 = len(s1)\\n        n2 = len(s2)\\n        \\n        for i in range(n - n1 + 1):\\n            if s_rev[i:i+n1] == s1:\\n                for j in range(i + n1, n - n2 + 1):\\n                    if s_rev[j:j+n2] == s2:\\n                        return True\\n        return False\\n\\n    forward = check_forward(s, s1, s2)\\n    backward = check_backward(s, s1, s2)\\n\\n    if forward and backward:\\n        print(\\\"both\\\")\\n    elif forward:\\n        print(\\\"forward\\\")\\n    elif backward:\\n        print(\\\"backward\\\")\\n    else:\\n        print(\\\"fantasy\\\")\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    s = input()\\n    s1 = input()\\n    s2 = input()\\n\\n    def check_forward(s, s1, s2):\\n        n = len(s)\\n        n1 = len(s1)\\n        n2 = len(s2)\\n\\n        for i in range(n - n1 + 1):\\n            if s[i:i+n1] == s1:\\n                for j in range(i + n1, n - n2 + 1):\\n                    if s[j:j+n2] == s2:\\n                        return True\\n        return False\\n\\n    def check_backward(s, s1, s2):\\n        s_reversed = s[::-1]\\n        n = len(s)\\n        n1 = len(s1)\\n        n2 = len(s2)\\n\\n        for i in range(n - n1 + 1):\\n            if s_reversed[i:i+n1] == s1:\\n                for j in range(i + n1, n - n2 + 1):\\n                    if s_reversed[j:j+n2] == s2:\\n                        return True\\n        return False\\n\\n    forward = check_forward(s, s1, s2)\\n    backward = check_backward(s, s1, s2)\\n\\n    if forward and backward:\\n        print(\\\"both\\\")\\n    elif forward:\\n        print(\\\"forward\\\")\\n    elif backward:\\n        print(\\\"backward\\\")\\n    else:\\n        print(\\\"fantasy\\\")\\n\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    s = input()\\n    s1 = input()\\n    s2 = input()\\n\\n    def check_forward(s, s1, s2):\\n        n = len(s)\\n        n1 = len(s1)\\n        n2 = len(s2)\\n        \\n        for i in range(n - n1 + 1):\\n            if s[i:i+n1] == s1:\\n                for j in range(i + n1, n - n2 + 1):\\n                    if s[j:j+n2] == s2:\\n                        return True\\n        return False\\n\\n    def check_backward(s, s1, s2):\\n        s_rev = s[::-1]\\n        n = len(s_rev)\\n        n1 = len(s1)\\n        n2 = len(s2)\\n        \\n        for i in range(n - n1 + 1):\\n            if s_rev[i:i+n1] == s1:\\n                for j in range(i + n1, n - n2 + 1):\\n                    if s_rev[j:j+n2] == s2:\\n                        return True\\n        return False\\n\\n    forward = check_forward(s, s1, s2)\\n    backward = check_backward(s, s1, s2)\\n\\n    if forward and backward:\\n        print(\\\"both\\\")\\n    elif forward:\\n        print(\\\"forward\\\")\\n    elif backward:\\n        print(\\\"backward\\\")\\n    else:\\n        print(\\\"fantasy\\\")\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"And again a misfortune fell on Poor Student. He is being late for an exam.Having rushed to a bus stop that is in point (0,\u20090), he got on a minibus and they drove along a straight line, parallel to axis OX, in the direction of increasing x.Poor Student knows the following:   during one run the minibus makes n stops, the i-th stop is in point (xi,\u20090)  coordinates of all the stops are different  the minibus drives at a constant speed, equal to vb  it can be assumed the passengers get on and off the minibus at a bus stop momentarily  Student can get off the minibus only at a bus stop  Student will have to get off the minibus at a terminal stop, if he does not get off earlier  the University, where the exam will be held, is in point (xu,\u2009yu)  Student can run from a bus stop to the University at a constant speed vs as long as needed  a distance between two points can be calculated according to the following formula:   Student is already on the minibus, so, he cannot get off at the first bus stop Poor Student wants to get to the University as soon as possible. Help him to choose the bus stop, where he should get off. If such bus stops are multiple, choose the bus stop closest to the University.","input_specification":"The first line contains three integer numbers: 2\u2009\u2264\u2009n\u2009\u2264\u2009100, 1\u2009\u2264\u2009vb,\u2009vs\u2009\u2264\u20091000. The second line contains n non-negative integers in ascending order: coordinates xi of the bus stop with index i. It is guaranteed that x1 equals to zero, and xn\u2009\u2264\u2009105. The third line contains the coordinates of the University, integers xu and yu, not exceeding 105 in absolute value. ","output_specification":"In the only line output the answer to the problem \u2014 index of the optimum bus stop.","notes":"NoteAs you know, students are a special sort of people, and minibuses usually do not hurry. That's why you should not be surprised, if Student's speed is higher than the speed of the minibus.","sample_inputs":["4 5 2\n0 2 4 6\n4 1","2 1 1\n0 100000\n100000 100000"],"sample_outputs":["3","2"],"src_uid":"15fa49860e978d3b3fb7a20bf9f8aa86","lang_cluster":"Python","difficulty":1200,"human_solution":"from math import sqrt\n\nn, v1, v2 = [int(i) for i in input().split()]\nx = [int(i) for i in input().split()]\nx1, y1 = [int(i) for i in input().split()]\n\nminim = x[1] \/ v1 + sqrt((x1-x[1])**2 + (y1)**2) \/ v2 #\u0412\u0440\u0435\u043c\u044f, \u0435\u0441\u043b\u0438 \u0441\u0442\u0443\u0434\u0435\u043d \u0432\u044b\u0439\u0434\u0435\u0442 \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0438 \u043f\u043e\u0431\u0435\u0436\u0438\u0442 (\u0435\u0441\u043b\u0438 \u043e\u043d \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430)\nres = 2\nfor i in range(2, n):\n    t = x[i] \/ v1 + sqrt((x1-x[i])**2 + (y1)**2) \/ v2\n    if t < minim:\n        minim = t\n        res = i + 1\n    elif t == minim and sqrt((x1-x[res-1])**2 + (y1)**2) > sqrt((x1-x[i])**2 + (y1)**2):\n        res = i+1\nprint(res)","testcases":"[{'input': '4 5 2\\r\\n0 2 4 6\\r\\n4 1\\r\\n', 'output': ['3']}, {'input': '2 1 1\\r\\n0 100000\\r\\n100000 100000\\r\\n', 'output': ['2']}, {'input': '6 5 1\\r\\n0 1 2 3 4 5\\r\\n0 0\\r\\n', 'output': ['2']}, {'input': '4 100 10\\r\\n0 118 121 178\\r\\n220 220\\r\\n', 'output': ['4']}, {'input': '4 3 3\\r\\n0 6 8 10\\r\\n7 -4\\r\\n', 'output': ['2']}, {'input': '5 900 1\\r\\n0 37474 80030 85359 97616\\r\\n-1 -1\\r\\n', 'output': ['2']}, {'input': '5 200 400\\r\\n0 8068 28563 51720 66113\\r\\n5423 -34\\r\\n', 'output': ['2']}, {'input': '6 10 3\\r\\n0 12 14 16 19 20\\r\\n14 0\\r\\n', 'output': ['3']}, {'input': '6 13 11\\r\\n0 16 27 31 39 42\\r\\n54 3\\r\\n', 'output': ['6']}, {'input': '11 853 721\\r\\n0 134 1971 2369 3381 3997 4452 6875 8983 9360 9399\\r\\n7345 333\\r\\n', 'output': ['8']}, {'input': '35 35 12\\r\\n0 90486 90543 90763 91127 91310 92047 92405 93654 93814 94633 94752 94969 94994 95287 96349 96362 96723 96855 96883 97470 97482 97683 97844 97926 98437 98724 98899 98921 99230 99253 99328 99444 99691 99947\\r\\n96233 -7777\\r\\n', 'output': ['9']}, {'input': '55 11 44\\r\\n0 3343 3387 3470 3825 3832 3971 4026 4043 4389 4492 4886 5015 5084 5161 5436 5595 5616 5677 5987 6251 6312 6369 6469 6487 6493 6507 6641 6928 7067 7159 7280 7303 7385 7387 7465 7536 7572 7664 7895 7921 7955 8110 8191 8243 8280 8523 8525 8581 8877 9221 9462 9505 9594 9596\\r\\n8000 0\\r\\n', 'output': ['2']}, {'input': '72 1000 777\\r\\n0 215 2814 5104 5226 5925 6734 9213 11697 13739 14015 16101 17234 19013 19566 19683 20283 20837 21332 21432 25490 26284 27728 29911 30112 30133 31494 31595 32499 32932 33289 36611 37736 43548 44440 44537 47656 47699 48327 50942 52178 53759 56925 57671 62024 65441 67958 70346 71606 75235 75466 75553 75905 76173 76512 77784 78183 80425 81339 81543 84537 88384 89953 90214 92107 92274 93328 93550 93987 97546 99459 99532\\r\\n63421 35\\r\\n', 'output': ['45']}, {'input': '76 1 1\\r\\n0 1000 1754 2749 3687 4983 8121 10299 11043 12986 14125 15910 17070 17189 17551 17953 17973 20816 25436 26150 27446 27788 28466 28941 29537 33965 37566 40845 40930 41304 41614 41615 43042 45098 45844 49878 50453 50936 55480 58410 59258 59287 62789 64127 64333 64450 64862 65404 66451 67626 69294 69804 71988 72165 74196 74560 75407 76611 77055 77344 79470 83566 84550 87458 87627 88205 89880 90255 90586 91970 93795 95308 99032 99442 99547 99549\\r\\n0 0\\r\\n', 'output': ['2']}, {'input': '94 2 1\\r\\n0 5000 5001 5002 5003 5004 5005 5006 5007 5008 5009 5010 5011 5012 5013 5014 5015 5016 5017 5018 5019 5020 5021 5022 5023 5024 5025 5026 5027 5028 5029 5030 5031 5032 5033 5034 5035 5036 5037 5038 5040 5041 5042 5043 5044 5045 5046 5047 5048 5049 5050 5051 5052 5053 5054 5055 5056 5057 5058 5059 5060 5061 5062 5063 5064 5065 5066 5067 5068 5069 5070 5071 5072 5073 5074 5075 5076 5077 5078 5079 5080 5081 5082 5083 5084 5085 5086 5087 5088 5089 5090 5091 5092 5093\\r\\n5050 -100000\\r\\n', 'output': ['2']}, {'input': '100 1 2\\r\\n0 1 2 3 4 5 6 7 8 9 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\r\\n100 0\\r\\n', 'output': ['2']}, {'input': '100 1000 1\\r\\n0 505 506 514 515 520 523 527 529 530 538 547 550 554 559 562 566 568 569 580 582 584 588 597 609 621 624 629 630 631 634 641 646 653 657 666 673 678 680 683 685 690 695 698 699 700 705 709 716 731 734 735 736 738 756 761 762 765 769 772 776 779 784 790 794 812 814 816 833 837 842 845 850 854 855 863 868 872 882 892 893 898 899 900 901 902 915 916 917 932 936 954 962 968 975 978 983 992 996 998\\r\\n600 7778\\r\\n', 'output': ['23']}, {'input': '2 1 1\\r\\n0 100000\\r\\n-100000 -100000\\r\\n', 'output': ['2']}, {'input': '2 1000 1000\\r\\n0 1\\r\\n1 0\\r\\n', 'output': ['2']}, {'input': '3 1 1\\r\\n0 1 2\\r\\n2 0\\r\\n', 'output': ['3']}]","id":140,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"import math\\n\\nn, vb, vs = map(int, input().split())\\nx_stops = list(map(int, input().split()))\\nxu, yu = map(int, input().split())\\n\\nbest_stop_index = -1\\nmin_time = float('inf')\\nmin_dist_to_uni = float('inf')\\n\\nfor i in range(1, n):\\n    bus_time = x_stops[i] \/ vb\\n    dist_to_uni = math.sqrt((x_stops[i] - xu)**2 + yu**2)\\n    student_time = dist_to_uni \/ vs\\n    total_time = bus_time + student_time\\n\\n    if total_time < min_time:\\n        min_time = total_time\\n        best_stop_index = i + 1\\n        min_dist_to_uni = dist_to_uni\\n    elif total_time == min_time:\\n        dist_to_uni_current = math.sqrt((x_stops[i] - xu)**2 + yu**2)\\n        if dist_to_uni_current < min_dist_to_uni:\\n            best_stop_index = i + 1\\n            min_dist_to_uni = dist_to_uni_current\\n\\nprint(best_stop_index)\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"import math\\n\\ndef solve():\\n    n, vb, vs = map(int, input().split())\\n    x_stops = list(map(int, input().split()))\\n    xu, yu = map(int, input().split())\\n\\n    best_stop_index = -1\\n    min_time = float('inf')\\n    min_dist_to_uni = float('inf')\\n\\n    for i in range(1, n):\\n        bus_time = x_stops[i] \/ vb\\n        dist_to_uni = math.sqrt((xu - x_stops[i])**2 + yu**2)\\n        walk_time = dist_to_uni \/ vs\\n        total_time = bus_time + walk_time\\n\\n        if total_time < min_time:\\n            min_time = total_time\\n            best_stop_index = i + 1\\n            min_dist_to_uni = dist_to_uni\\n        elif total_time == min_time:\\n            if dist_to_uni < min_dist_to_uni:\\n                best_stop_index = i + 1\\n                min_dist_to_uni = dist_to_uni\\n\\n    print(best_stop_index)\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"import math\\n\\nn, vb, vs = map(int, input().split())\\nx_stops = list(map(int, input().split()))\\nxu, yu = map(int, input().split())\\n\\nbest_stop_index = -1\\nmin_time = float('inf')\\nmin_dist_to_uni = float('inf')\\n\\nfor i in range(1, n):\\n    bus_time = x_stops[i] \/ vb\\n    dist_to_uni = math.sqrt((x_stops[i] - xu)**2 + yu**2)\\n    student_time = dist_to_uni \/ vs\\n    total_time = bus_time + student_time\\n\\n    if total_time < min_time:\\n        min_time = total_time\\n        best_stop_index = i + 1\\n        min_dist_to_uni = dist_to_uni\\n    elif total_time == min_time:\\n        dist_to_uni_current = math.sqrt((x_stops[i] - xu)**2 + yu**2)\\n        if dist_to_uni_current < min_dist_to_uni:\\n            best_stop_index = i + 1\\n            min_dist_to_uni = dist_to_uni_current\\n\\nprint(best_stop_index)\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"import math\\n\\ndef solve():\\n    n, vb, vs = map(int, input().split())\\n    x_stops = list(map(int, input().split()))\\n    xu, yu = map(int, input().split())\\n\\n    best_stop_index = -1\\n    min_time = float('inf')\\n    min_dist_to_uni = float('inf')\\n\\n    for i in range(1, n):\\n        bus_time = x_stops[i] \/ vb\\n        dist_to_uni = math.sqrt((xu - x_stops[i])**2 + yu**2)\\n        walk_time = dist_to_uni \/ vs\\n        total_time = bus_time + walk_time\\n\\n        if total_time < min_time:\\n            min_time = total_time\\n            best_stop_index = i + 1\\n            min_dist_to_uni = dist_to_uni\\n        elif total_time == min_time:\\n            if dist_to_uni < min_dist_to_uni:\\n                best_stop_index = i + 1\\n                min_dist_to_uni = dist_to_uni\\n\\n    print(best_stop_index)\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"A new cottage village called \u00abFlatville\u00bb is being built in Flatland. By now they have already built in \u00abFlatville\u00bb n square houses with the centres on the \u041ex-axis. The houses' sides are parallel to the coordinate axes. It's known that no two houses overlap, but they can touch each other.The architect bureau, where Peter works, was commissioned to build a new house in \u00abFlatville\u00bb. The customer wants his future house to be on the \u041ex-axis, to be square in shape, have a side t, and touch at least one of the already built houses. For sure, its sides should be parallel to the coordinate axes, its centre should be on the Ox-axis and it shouldn't overlap any of the houses in the village.Peter was given a list of all the houses in \u00abFlatville\u00bb. Would you help him find the amount of possible positions of the new house?","input_specification":"The first line of the input data contains numbers n and t (1\u2009\u2264\u2009n,\u2009t\u2009\u2264\u20091000). Then there follow n lines, each of them contains two space-separated integer numbers: xi ai, where xi \u2014 x-coordinate of the centre of the i-th house, and ai \u2014 length of its side (\u2009-\u20091000\u2009\u2264\u2009xi\u2009\u2264\u20091000, 1\u2009\u2264\u2009ai\u2009\u2264\u20091000).","output_specification":"Output the amount of possible positions of the new house.","notes":"NoteIt is possible for the x-coordinate of the new house to have non-integer value.","sample_inputs":["2 2\n0 4\n6 2","2 2\n0 4\n5 2","2 3\n0 4\n5 2"],"sample_outputs":["4","3","2"],"src_uid":"c31fed523230af1f904218b2fe0d663d","lang_cluster":"Python","difficulty":1200,"human_solution":"#15A - Cottage Village\n# n - how many square houses we have on the x-axis\n# t - the side of the main house\nn, t = map(int, input().split())\n#Variable that sorts square houses by x-axis coordinates in ascending order\n#Input: house's center on the x-axis and the house's side length\nhouses = sorted([list(map(int, input().split())) for i in range(n)], key=lambda x: x[0])\n#Because there's at least 1 other house in the village, we have 2 possibilities\n#by default, cause the main house can touch one of the 2 exposed sides of the other house\nans = 2\n#The next loop computes the number of houses that fit between 2 adjacent houses \nfor i in range(n - 1):\n    x = houses[i][0] + houses[i][1] \/ 2\n    y = houses[i + 1][0] - houses[i + 1][1] \/ 2\n    #If the space between the 2 houses is equal to the main house's side,\n    #the only way we can place our house is to touch both houses at the same time\n    if y - x == t:\n        ans += 1\n    #If the space between the houses is bigger than the main house's side, \n    #then we consider the 2 houses as 2 separate cases, each with 2 possibilities\n        #of their own\n    elif y - x > t:\n        ans += 2\n \nprint(ans)","testcases":"[{'input': '2 2\\r\\n0 4\\r\\n6 2\\r\\n', 'output': ['4\\r\\n']}, {'input': '2 2\\r\\n0 4\\r\\n5 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '2 3\\r\\n0 4\\r\\n5 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '1 1\\r\\n1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '1 2\\r\\n2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 1\\r\\n2 1\\r\\n1 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '2 2\\r\\n0 4\\r\\n7 4\\r\\n', 'output': ['4\\r\\n']}, {'input': '4 1\\r\\n-12 1\\r\\n-14 1\\r\\n4 1\\r\\n-11 1\\r\\n', 'output': ['5\\r\\n']}, {'input': '6 15\\r\\n19 1\\r\\n2 3\\r\\n6 2\\r\\n-21 2\\r\\n-15 2\\r\\n23 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '10 21\\r\\n-61 6\\r\\n55 2\\r\\n-97 1\\r\\n37 1\\r\\n-39 1\\r\\n26 2\\r\\n21 1\\r\\n64 3\\r\\n-68 1\\r\\n-28 6\\r\\n', 'output': ['6\\r\\n']}, {'input': '26 51\\r\\n783 54\\r\\n-850 6\\r\\n-997 59\\r\\n573 31\\r\\n-125 20\\r\\n472 52\\r\\n101 5\\r\\n-561 4\\r\\n625 35\\r\\n911 14\\r\\n-47 33\\r\\n677 55\\r\\n-410 54\\r\\n13 53\\r\\n173 31\\r\\n968 30\\r\\n-497 7\\r\\n832 42\\r\\n271 59\\r\\n-638 52\\r\\n-301 51\\r\\n378 36\\r\\n-813 7\\r\\n-206 22\\r\\n-737 37\\r\\n-911 9\\r\\n', 'output': ['35\\r\\n']}, {'input': '14 101\\r\\n121 88\\r\\n-452 91\\r\\n635 28\\r\\n-162 59\\r\\n-872 26\\r\\n-996 8\\r\\n468 86\\r\\n742 63\\r\\n892 89\\r\\n-249 107\\r\\n300 51\\r\\n-753 17\\r\\n-620 31\\r\\n-13 34\\r\\n', 'output': ['16\\r\\n']}, {'input': '3 501\\r\\n827 327\\r\\n-85 480\\r\\n-999 343\\r\\n', 'output': ['6\\r\\n']}, {'input': '2 999\\r\\n-999 471\\r\\n530 588\\r\\n', 'output': ['4\\r\\n']}, {'input': '22 54\\r\\n600 43\\r\\n806 19\\r\\n-269 43\\r\\n-384 78\\r\\n222 34\\r\\n392 10\\r\\n318 30\\r\\n488 73\\r\\n-756 49\\r\\n-662 22\\r\\n-568 50\\r\\n-486 16\\r\\n-470 2\\r\\n96 66\\r\\n864 16\\r\\n934 15\\r\\n697 43\\r\\n-154 30\\r\\n775 5\\r\\n-876 71\\r\\n-33 78\\r\\n-991 31\\r\\n', 'output': ['30\\r\\n']}, {'input': '17 109\\r\\n52 7\\r\\n216 24\\r\\n-553 101\\r\\n543 39\\r\\n391 92\\r\\n-904 67\\r\\n95 34\\r\\n132 14\\r\\n730 103\\r\\n952 118\\r\\n-389 41\\r\\n-324 36\\r\\n-74 2\\r\\n-147 99\\r\\n-740 33\\r\\n233 1\\r\\n-995 3\\r\\n', 'output': ['16\\r\\n']}, {'input': '4 512\\r\\n-997 354\\r\\n-568 216\\r\\n-234 221\\r\\n603 403\\r\\n', 'output': ['4\\r\\n']}, {'input': '3 966\\r\\n988 5\\r\\n15 2\\r\\n-992 79\\r\\n', 'output': ['6\\r\\n']}, {'input': '2 1000\\r\\n-995 201\\r\\n206 194\\r\\n', 'output': ['4\\r\\n']}, {'input': '50 21\\r\\n-178 1\\r\\n49 1\\r\\n-98 1\\r\\n-220 1\\r\\n152 1\\r\\n-160 3\\r\\n17 2\\r\\n77 1\\r\\n-24 1\\r\\n214 2\\r\\n-154 2\\r\\n-141 1\\r\\n79 1\\r\\n206 1\\r\\n8 1\\r\\n-208 1\\r\\n36 1\\r\\n231 3\\r\\n-2 2\\r\\n-130 2\\r\\n-14 2\\r\\n34 1\\r\\n-187 2\\r\\n14 1\\r\\n-83 2\\r\\n-241 1\\r\\n149 2\\r\\n73 1\\r\\n-233 3\\r\\n-45 1\\r\\n197 1\\r\\n145 2\\r\\n-127 2\\r\\n-229 4\\r\\n-85 1\\r\\n-66 1\\r\\n-76 2\\r\\n104 1\\r\\n175 1\\r\\n70 1\\r\\n131 3\\r\\n-108 1\\r\\n-5 4\\r\\n140 1\\r\\n33 1\\r\\n248 3\\r\\n-36 3\\r\\n134 1\\r\\n-183 1\\r\\n56 2\\r\\n', 'output': ['9\\r\\n']}, {'input': '50 1\\r\\n37 1\\r\\n-38 1\\r\\n7 1\\r\\n47 1\\r\\n-4 1\\r\\n24 1\\r\\n-32 1\\r\\n-23 1\\r\\n-3 1\\r\\n-19 1\\r\\n5 1\\r\\n-50 1\\r\\n11 1\\r\\n-11 1\\r\\n49 1\\r\\n-39 1\\r\\n0 1\\r\\n43 1\\r\\n-10 1\\r\\n6 1\\r\\n19 1\\r\\n1 1\\r\\n27 1\\r\\n29 1\\r\\n-47 1\\r\\n-40 1\\r\\n-46 1\\r\\n-26 1\\r\\n-42 1\\r\\n-37 1\\r\\n13 1\\r\\n-29 1\\r\\n-30 1\\r\\n3 1\\r\\n44 1\\r\\n10 1\\r\\n4 1\\r\\n-14 1\\r\\n-2 1\\r\\n34 1\\r\\n18 1\\r\\n-33 1\\r\\n-44 1\\r\\n9 1\\r\\n-36 1\\r\\n-7 1\\r\\n25 1\\r\\n22 1\\r\\n-20 1\\r\\n-41 1\\r\\n', 'output': ['43\\r\\n']}, {'input': '50 1\\r\\n-967 7\\r\\n696 7\\r\\n-366 4\\r\\n557 1\\r\\n978 2\\r\\n800 4\\r\\n-161 2\\r\\n-773 2\\r\\n-248 2\\r\\n134 3\\r\\n869 6\\r\\n-932 2\\r\\n-262 14\\r\\n191 3\\r\\n669 2\\r\\n72 5\\r\\n0 1\\r\\n757 8\\r\\n859 2\\r\\n-131 8\\r\\n-169 3\\r\\n543 10\\r\\n-120 2\\r\\n-87 8\\r\\n-936 6\\r\\n-620 3\\r\\n-281 11\\r\\n684 3\\r\\n886 10\\r\\n497 4\\r\\n380 4\\r\\n833 1\\r\\n-727 6\\r\\n470 11\\r\\n584 9\\r\\n66 6\\r\\n-609 12\\r\\n-661 4\\r\\n-57 8\\r\\n628 7\\r\\n635 4\\r\\n-924 3\\r\\n-982 4\\r\\n-201 7\\r\\n-9 8\\r\\n-560 9\\r\\n712 7\\r\\n-330 8\\r\\n-191 1\\r\\n-892 7\\r\\n', 'output': ['96\\r\\n']}, {'input': '1 1000\\r\\n0 1000\\r\\n', 'output': ['2\\r\\n']}]","id":141,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, t = map(int, input().split())\\n    houses = []\\n    for _ in range(n):\\n        houses.append(list(map(int, input().split())))\\n    \\n    houses.sort(key=lambda x: x[0])\\n    \\n    possible_positions = set()\\n    \\n    for i in range(n):\\n        x, a = houses[i]\\n        \\n        # Left side touch\\n        left_x = x - a \/ 2.0 - t \/ 2.0\\n        if i == 0 or left_x > houses[i-1][0] + houses[i-1][1] \/ 2.0 + t \/ 2.0: # Check if not overlapping with previous house\\n            possible_positions.add(left_x)\\n        \\n        # Right side touch\\n        right_x = x + a \/ 2.0 + t \/ 2.0\\n        if i == n -1 or right_x < houses[i+1][0] - houses[i+1][1] \/ 2.0 - t \/ 2.0: # Check if not overlapping with next house\\n            possible_positions.add(right_x)\\n        \\n    \\n    # Check between houses\\n    for i in range(n - 1):\\n        x1, a1 = houses[i]\\n        x2, a2 = houses[i+1]\\n        \\n        gap = (x2 - a2 \/ 2.0) - (x1 + a1 \/ 2.0)\\n        if gap > t:\\n            possible_positions.add(x1 + a1 \/ 2.0 + t \/ 2.0)\\n            possible_positions.add(x2 - a2 \/ 2.0 - t \/ 2.0)\\n    \\n    count = 0\\n    for pos in possible_positions:\\n        valid = True\\n        for x, a in houses:\\n            if abs(pos - x) < (a + t) \/ 2.0:\\n                valid = False\\n                break\\n        if valid:\\n            count += 1\\n    \\n    print(len(possible_positions))\\n\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, t = map(int, input().split())\\n    houses = []\\n    for _ in range(n):\\n        houses.append(list(map(int, input().split())))\\n    \\n    houses.sort(key=lambda x: x[0])\\n    \\n    possible_positions = set()\\n    \\n    for x, a in houses:\\n        # Left side contact\\n        left_x = x - a \/ 2.0\\n        new_house_left = left_x - t \/ 2.0\\n        \\n        valid = True\\n        for other_x, other_a in houses:\\n            if other_x + other_a \/ 2.0 > new_house_left + t and other_x - other_a \/ 2.0 < new_house_left + t:\\n                valid = False\\n                break\\n        if valid:\\n            possible_positions.add(new_house_left)\\n        \\n        # Right side contact\\n        right_x = x + a \/ 2.0\\n        new_house_right = right_x + t \/ 2.0\\n        \\n        valid = True\\n        for other_x, other_a in houses:\\n            if other_x + other_a \/ 2.0 > new_house_right - t and other_x - other_a \/ 2.0 < new_house_right - t:\\n                valid = False\\n                break\\n        if valid:\\n            possible_positions.add(new_house_right)\\n    \\n    # Check between houses\\n    for i in range(len(houses) - 1):\\n        x1, a1 = houses[i]\\n        x2, a2 = houses[i+1]\\n        \\n        gap = (x2 - a2 \/ 2.0) - (x1 + a1 \/ 2.0)\\n        \\n        if gap > t:\\n            possible_positions.add((x1 + a1 \/ 2.0) + t \/ 2.0 + (gap - t) \/ 2.0) # left contact with house i+1\\n            possible_positions.add((x2 - a2 \/ 2.0) - t \/ 2.0 - (gap - t) \/ 2.0) # right contact with house i\\n        elif gap == t:\\n            pass\\n        \\n    print(len(possible_positions))\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, t = map(int, input().split())\\n    houses = []\\n    for _ in range(n):\\n        houses.append(list(map(int, input().split())))\\n    \\n    houses.sort(key=lambda x: x[0])\\n    \\n    possible_positions = set()\\n    \\n    for i in range(n):\\n        x, a = houses[i]\\n        \\n        # Left side touch\\n        left_x = x - a \/ 2.0 - t \/ 2.0\\n        if i == 0 or left_x > houses[i-1][0] + houses[i-1][1] \/ 2.0 + t \/ 2.0: # Check if not overlapping with previous house\\n            possible_positions.add(left_x)\\n        \\n        # Right side touch\\n        right_x = x + a \/ 2.0 + t \/ 2.0\\n        if i == n -1 or right_x < houses[i+1][0] - houses[i+1][1] \/ 2.0 - t \/ 2.0: # Check if not overlapping with next house\\n            possible_positions.add(right_x)\\n        \\n    \\n    # Check between houses\\n    for i in range(n - 1):\\n        x1, a1 = houses[i]\\n        x2, a2 = houses[i+1]\\n        \\n        gap = (x2 - a2 \/ 2.0) - (x1 + a1 \/ 2.0)\\n        if gap > t:\\n            possible_positions.add(x1 + a1 \/ 2.0 + t \/ 2.0)\\n            possible_positions.add(x2 - a2 \/ 2.0 - t \/ 2.0)\\n    \\n    count = 0\\n    for pos in possible_positions:\\n        valid = True\\n        for x, a in houses:\\n            if abs(pos - x) < (a + t) \/ 2.0:\\n                valid = False\\n                break\\n        if valid:\\n            count += 1\\n    \\n    print(len(possible_positions))\\n\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, t = map(int, input().split())\\n    houses = []\\n    for _ in range(n):\\n        houses.append(list(map(int, input().split())))\\n    \\n    houses.sort(key=lambda x: x[0])\\n    \\n    possible_positions = set()\\n    \\n    for x, a in houses:\\n        # Left side contact\\n        left_x = x - a \/ 2.0\\n        new_house_left = left_x - t \/ 2.0\\n        \\n        valid = True\\n        for other_x, other_a in houses:\\n            if other_x + other_a \/ 2.0 > new_house_left + t and other_x - other_a \/ 2.0 < new_house_left + t:\\n                valid = False\\n                break\\n        if valid:\\n            possible_positions.add(new_house_left)\\n        \\n        # Right side contact\\n        right_x = x + a \/ 2.0\\n        new_house_right = right_x + t \/ 2.0\\n        \\n        valid = True\\n        for other_x, other_a in houses:\\n            if other_x + other_a \/ 2.0 > new_house_right - t and other_x - other_a \/ 2.0 < new_house_right - t:\\n                valid = False\\n                break\\n        if valid:\\n            possible_positions.add(new_house_right)\\n    \\n    # Check between houses\\n    for i in range(len(houses) - 1):\\n        x1, a1 = houses[i]\\n        x2, a2 = houses[i+1]\\n        \\n        gap = (x2 - a2 \/ 2.0) - (x1 + a1 \/ 2.0)\\n        \\n        if gap > t:\\n            possible_positions.add((x1 + a1 \/ 2.0) + t \/ 2.0 + (gap - t) \/ 2.0) # left contact with house i+1\\n            possible_positions.add((x2 - a2 \/ 2.0) - t \/ 2.0 - (gap - t) \/ 2.0) # right contact with house i\\n        elif gap == t:\\n            pass\\n        \\n    print(len(possible_positions))\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"Phone number in Berland is a sequence of n digits. Often, to make it easier to memorize the number, it is divided into groups of two or three digits. For example, the phone number 1198733 is easier to remember as 11-987-33. Your task is to find for a given phone number any of its divisions into groups of two or three digits.","input_specification":"The first line contains integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 amount of digits in the phone number. The second line contains n digits \u2014 the phone number to divide into groups.","output_specification":"Output any of divisions of the given phone number into groups of two or three digits. Separate groups by single character -. If the answer is not unique, output any.","notes":null,"sample_inputs":["6\n549871","7\n1198733"],"sample_outputs":["54-98-71","11-987-33"],"src_uid":"6f6859aabc1c9cbb9ee0d910064d87c2","lang_cluster":"Python","difficulty":1100,"human_solution":"import sys\n\n\ndef digits(phone_number):\n    if phone_number:\n        phone_number = phone_number.rstrip('\\r|\\n')\n        length = len(phone_number)\n\n        # Not even.\n        if length in [2, 3]:\n            return phone_number\n        elif length % 2:\n            return phone_number[0:3] + \"-\" + digits(phone_number[3:])\n        return phone_number[0:2] + \"-\" + digits(phone_number[2:])\n    else:\n        return phone_number\n\nif __name__ == '__main__':\n    data = []\n    for line in sys.stdin:\n        data.append(line)\n\n    for l in data[1::2]:\n        print(digits(l))\n","testcases":"[{'input': '6\\r\\n549871\\r\\n', 'output': ['54-98-71']}, {'input': '7\\r\\n1198733\\r\\n', 'output': ['119-87-33']}, {'input': '2\\r\\n74\\r\\n', 'output': ['74']}, {'input': '2\\r\\n33\\r\\n', 'output': ['33']}, {'input': '3\\r\\n074\\r\\n', 'output': ['074']}, {'input': '3\\r\\n081\\r\\n', 'output': ['081']}, {'input': '4\\r\\n3811\\r\\n', 'output': ['38-11']}, {'input': '5\\r\\n21583\\r\\n', 'output': ['215-83']}, {'input': '8\\r\\n33408349\\r\\n', 'output': ['33-40-83-49']}, {'input': '9\\r\\n988808426\\r\\n', 'output': ['988-80-84-26']}, {'input': '10\\r\\n0180990956\\r\\n', 'output': ['01-80-99-09-56']}, {'input': '15\\r\\n433488906230138\\r\\n', 'output': ['433-48-89-06-23-01-38']}, {'input': '22\\r\\n7135498415686025907059\\r\\n', 'output': ['71-35-49-84-15-68-60-25-90-70-59']}, {'input': '49\\r\\n2429965524999668169991253653390090510755018570235\\r\\n', 'output': ['242-99-65-52-49-99-66-81-69-99-12-53-65-33-90-09-05-10-75-50-18-57-02-35']}, {'input': '72\\r\\n491925337784111770500147619881727525570039735507439360627744863794794290\\r\\n', 'output': ['49-19-25-33-77-84-11-17-70-50-01-47-61-98-81-72-75-25-57-00-39-73-55-07-43-93-60-62-77-44-86-37-94-79-42-90']}, {'input': '95\\r\\n32543414456047900690980198395035321172843693417425457554204776648220562494524275489599199209210\\r\\n', 'output': ['325-43-41-44-56-04-79-00-69-09-80-19-83-95-03-53-21-17-28-43-69-34-17-42-54-57-55-42-04-77-66-48-22-05-62-49-45-24-27-54-89-59-91-99-20-92-10']}, {'input': '97\\r\\n9362344595153688016434451101547661156123505108492010669557671355055642365998461003851354321478898\\r\\n', 'output': ['936-23-44-59-51-53-68-80-16-43-44-51-10-15-47-66-11-56-12-35-05-10-84-92-01-06-69-55-76-71-35-50-55-64-23-65-99-84-61-00-38-51-35-43-21-47-88-98']}, {'input': '98\\r\\n65521815795893886057122984634320900545031770769333931308009346017867969790810907868670369236928568\\r\\n', 'output': ['65-52-18-15-79-58-93-88-60-57-12-29-84-63-43-20-90-05-45-03-17-70-76-93-33-93-13-08-00-93-46-01-78-67-96-97-90-81-09-07-86-86-70-36-92-36-92-85-68']}, {'input': '99\\r\\n455213856470326729480192345541970106407563996625458559297407682539801838244443866898560852503660390\\r\\n', 'output': ['455-21-38-56-47-03-26-72-94-80-19-23-45-54-19-70-10-64-07-56-39-96-62-54-58-55-92-97-40-76-82-53-98-01-83-82-44-44-38-66-89-85-60-85-25-03-66-03-90']}, {'input': '100\\r\\n4004223124942730640235383244438257614581534320356060987241659784249551110165034719443327659510644224\\r\\n', 'output': ['40-04-22-31-24-94-27-30-64-02-35-38-32-44-43-82-57-61-45-81-53-43-20-35-60-60-98-72-41-65-97-84-24-95-51-11-01-65-03-47-19-44-33-27-65-95-10-64-42-24']}]","id":142,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nnumber = input()\\nresult = []\\ni = 0\\nwhile i < n:\\n    if n - i == 2:\\n        result.append(number[i:i+2])\\n        i += 2\\n    else:\\n        result.append(number[i:i+3])\\n        i += 3\\nprint('-'.join(result))\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nnumber = raw_input()\\nresult = []\\ni = 0\\nwhile i < n:\\n    if n - i == 2:\\n        result.append(number[i:i+2])\\n        i += 2\\n    else:\\n        result.append(number[i:i+3])\\n        i += 3\\nprint '-'.join(result)\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nnumber = input()\\nresult = []\\ni = 0\\nwhile i < n:\\n    if n - i == 2:\\n        result.append(number[i:i+2])\\n        i += 2\\n    else:\\n        result.append(number[i:i+3])\\n        i += 3\\nprint(\\\"-\\\".join(result))\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nnumber = raw_input()\\nresult = []\\ni = 0\\nwhile i < n:\\n    if n - i == 2:\\n        result.append(number[i:i+2])\\n        i += 2\\n    else:\\n        result.append(number[i:i+3])\\n        i += 3\\nprint \\\"-\\\".join(result)\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nnumber = input()\\nresult = []\\ni = 0\\nwhile i < n:\\n    if n - i == 2:\\n        result.append(number[i:i+2])\\n        i += 2\\n    else:\\n        result.append(number[i:i+3])\\n        i += 3\\nprint('-'.join(result))\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nnumber = raw_input()\\nresult = []\\ni = 0\\nwhile i < n:\\n    if n - i == 2:\\n        result.append(number[i:i+2])\\n        i += 2\\n    else:\\n        result.append(number[i:i+3])\\n        i += 3\\nprint '-'.join(result)\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nnumber = input()\\nresult = []\\ni = 0\\nwhile i < n:\\n    if n - i == 2:\\n        result.append(number[i:i+2])\\n        i += 2\\n    else:\\n        result.append(number[i:i+3])\\n        i += 3\\nprint(\\\"-\\\".join(result))\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nnumber = raw_input()\\nresult = []\\ni = 0\\nwhile i < n:\\n    if n - i == 2:\\n        result.append(number[i:i+2])\\n        i += 2\\n    else:\\n        result.append(number[i:i+3])\\n        i += 3\\nprint \\\"-\\\".join(result)\"\n  }\n]\n```"}
{"description":"A long time ago in some far country lived king Copa. After the recent king's reform, he got so large powers that started to keep the books by himself.The total income A of his kingdom during 0-th year is known, as well as the total income B during n-th year (these numbers can be negative \u2014 it means that there was a loss in the correspondent year). King wants to show financial stability. To do this, he needs to find common coefficient X \u2014 the coefficient of income growth during one year. This coefficient should satisfy the equation:A\u00b7Xn\u2009=\u2009B.Surely, the king is not going to do this job by himself, and demands you to find such number X.It is necessary to point out that the fractional numbers are not used in kingdom's economy. That's why all input numbers as well as coefficient X must be integers. The number X may be zero or negative.","input_specification":"The input contains three integers A, B, n (|A|,\u2009|B|\u2009\u2264\u20091000, 1\u2009\u2264\u2009n\u2009\u2264\u200910).","output_specification":"Output the required integer coefficient X, or \u00abNo solution\u00bb, if such a coefficient does not exist or it is fractional. If there are several possible solutions, output any of them.","notes":null,"sample_inputs":["2 18 2","-1 8 3","0 0 10","1 16 5"],"sample_outputs":["3","-2","5","No solution"],"src_uid":"8a9adc116abbd387a6a64dd754436f8a","lang_cluster":"Python","difficulty":1400,"human_solution":"a,b,n = map(int,input().split())\nans = \"No solution\"\n\nif a == 0 and b == 0:\n    ans =5\nelif a == 0 and b!= 0:\n    ans\nelif a != 0 and b == 0:\n    ans = 0\nelif b%a != 0:\n    ans\nelse:\n    a = b \/ a\n    if a < 0 :\n        a = abs(a)\n        b = 0\n    for i in range(1001):\n        if i ** n == a:\n            ans = i\n\n    if b == 0 :ans = - ans\n\nprint(ans)\n","testcases":"[{'input': '2 18 2\\r\\n', 'output': ['3']}, {'input': '-1 8 3\\r\\n', 'output': ['-2']}, {'input': '0 0 10\\r\\n', 'output': ['5']}, {'input': '1 16 5\\r\\n', 'output': ['No solution']}, {'input': '0 1 2\\r\\n', 'output': ['No solution']}, {'input': '3 0 4\\r\\n', 'output': ['0']}, {'input': '1 1000 1\\r\\n', 'output': ['1000']}, {'input': '7 896 7\\r\\n', 'output': ['2']}, {'input': '4 972 1\\r\\n', 'output': ['243']}, {'input': '-1 -1 5\\r\\n', 'output': ['1']}, {'input': '-1 0 4\\r\\n', 'output': ['0']}, {'input': '-7 0 1\\r\\n', 'output': ['0']}, {'input': '-5 -5 3\\r\\n', 'output': ['1']}, {'input': '-5 -5 9\\r\\n', 'output': ['1']}, {'input': '-5 -5 6\\r\\n', 'output': ['1']}, {'input': '-4 0 1\\r\\n', 'output': ['0']}, {'input': '-5 0 3\\r\\n', 'output': ['0']}, {'input': '-4 4 9\\r\\n', 'output': ['-1']}, {'input': '10 0 6\\r\\n', 'output': ['0']}, {'input': '-5 3 4\\r\\n', 'output': ['No solution']}, {'input': '0 3 6\\r\\n', 'output': ['No solution']}, {'input': '3 6 10\\r\\n', 'output': ['No solution']}, {'input': '-3 7 5\\r\\n', 'output': ['No solution']}, {'input': '-526 526 1\\r\\n', 'output': ['-1']}, {'input': '-373 373 3\\r\\n', 'output': ['-1']}, {'input': '-141 0 8\\r\\n', 'output': ['0']}, {'input': '7 175 1\\r\\n', 'output': ['25']}, {'input': '-5 -560 1\\r\\n', 'output': ['112']}, {'input': '-1 -512 10\\r\\n', 'output': ['No solution']}, {'input': '-3 -768 8\\r\\n', 'output': ['2']}, {'input': '-3 -768 7\\r\\n', 'output': ['No solution']}, {'input': '-3 -768 9\\r\\n', 'output': ['No solution']}, {'input': '-3 -768 4\\r\\n', 'output': ['4']}, {'input': '4 972 4\\r\\n', 'output': ['No solution']}, {'input': '4 972 5\\r\\n', 'output': ['3']}, {'input': '4 972 6\\r\\n', 'output': ['No solution']}, {'input': '4 972 1\\r\\n', 'output': ['243']}, {'input': '4 972 2\\r\\n', 'output': ['No solution']}, {'input': '1 1000 1\\r\\n', 'output': ['1000']}, {'input': '1 961 2\\r\\n', 'output': ['31']}, {'input': '1 1000 3\\r\\n', 'output': ['10']}, {'input': '1 625 4\\r\\n', 'output': ['5']}, {'input': '4 972 5\\r\\n', 'output': ['3']}, {'input': '1 729 6\\r\\n', 'output': ['3']}, {'input': '7 896 7\\r\\n', 'output': ['2']}, {'input': '3 768 8\\r\\n', 'output': ['2']}, {'input': '1 512 9\\r\\n', 'output': ['2']}, {'input': '1 1000 1\\r\\n', 'output': ['1000']}, {'input': '1 961 2\\r\\n', 'output': ['31']}, {'input': '1 1000 3\\r\\n', 'output': ['10']}, {'input': '1 625 4\\r\\n', 'output': ['5']}, {'input': '4 972 5\\r\\n', 'output': ['3']}, {'input': '1 729 6\\r\\n', 'output': ['3']}, {'input': '7 896 7\\r\\n', 'output': ['2']}, {'input': '3 768 8\\r\\n', 'output': ['2']}, {'input': '1 512 9\\r\\n', 'output': ['2']}, {'input': '1 1000 1\\r\\n', 'output': ['1000']}, {'input': '1 961 2\\r\\n', 'output': ['31']}, {'input': '1 1000 3\\r\\n', 'output': ['10']}, {'input': '1 625 4\\r\\n', 'output': ['5']}, {'input': '4 972 5\\r\\n', 'output': ['3']}, {'input': '1 729 6\\r\\n', 'output': ['3']}, {'input': '7 896 7\\r\\n', 'output': ['2']}, {'input': '3 768 8\\r\\n', 'output': ['2']}, {'input': '1 512 9\\r\\n', 'output': ['2']}, {'input': '1 1 5\\r\\n', 'output': ['1']}, {'input': '1 1 4\\r\\n', 'output': ['1']}, {'input': '1 -1 1\\r\\n', 'output': ['-1']}]","id":143,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n  a, b, n = map(int, input().split())\\n  if a == 0:\\n    if b == 0:\\n      print(0)\\n    else:\\n      print(\\\"No solution\\\")\\n    return\\n  \\n  for x in range(-1001, 1001):\\n    if a * (x**n) == b:\\n      print(x)\\n      return\\n  print(\\\"No solution\\\")\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n  a, b, n = map(int, raw_input().split())\\n  if a == 0:\\n    if b == 0:\\n      print 0\\n    else:\\n      print \\\"No solution\\\"\\n    return\\n  \\n  for x in range(-1001, 1001):\\n    if a * (x**n) == b:\\n      print x\\n      return\\n  print \\\"No solution\\\"\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    a, b, n = map(int, input().split())\\n    if a == 0:\\n        if b == 0:\\n            print(0)\\n        else:\\n            print(\\\"No solution\\\")\\n        return\\n    \\n    if n == 0:\\n        if a == b:\\n            print(1)\\n        else:\\n            print(\\\"No solution\\\")\\n        return\\n    \\n    for x in range(-1001, 1001):\\n        if a * (x**n) == b:\\n            print(x)\\n            return\\n    print(\\\"No solution\\\")\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    a, b, n = map(int, raw_input().split())\\n    if a == 0:\\n        if b == 0:\\n            print 0\\n        else:\\n            print \\\"No solution\\\"\\n        return\\n    \\n    if n == 0:\\n        if a == b:\\n            print 1\\n        else:\\n            print \\\"No solution\\\"\\n        return\\n    \\n    for x in range(-1001, 1001):\\n        if a * (x**n) == b:\\n            print x\\n            return\\n    print \\\"No solution\\\"\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n  a, b, n = map(int, input().split())\\n  if a == 0:\\n    if b == 0:\\n      print(0)\\n    else:\\n      print(\\\"No solution\\\")\\n    return\\n  \\n  for x in range(-1001, 1001):\\n    if a * (x**n) == b:\\n      print(x)\\n      return\\n  print(\\\"No solution\\\")\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n  a, b, n = map(int, raw_input().split())\\n  if a == 0:\\n    if b == 0:\\n      print 0\\n    else:\\n      print \\\"No solution\\\"\\n    return\\n  \\n  for x in range(-1001, 1001):\\n    if a * (x**n) == b:\\n      print x\\n      return\\n  print \\\"No solution\\\"\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    a, b, n = map(int, input().split())\\n    if a == 0:\\n        if b == 0:\\n            print(0)\\n        else:\\n            print(\\\"No solution\\\")\\n        return\\n    \\n    if n == 0:\\n        if a == b:\\n            print(1)\\n        else:\\n            print(\\\"No solution\\\")\\n        return\\n    \\n    for x in range(-1001, 1001):\\n        if a * (x**n) == b:\\n            print(x)\\n            return\\n    print(\\\"No solution\\\")\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    a, b, n = map(int, raw_input().split())\\n    if a == 0:\\n        if b == 0:\\n            print 0\\n        else:\\n            print \\\"No solution\\\"\\n        return\\n    \\n    if n == 0:\\n        if a == b:\\n            print 1\\n        else:\\n            print \\\"No solution\\\"\\n        return\\n    \\n    for x in range(-1001, 1001):\\n        if a * (x**n) == b:\\n            print x\\n            return\\n    print \\\"No solution\\\"\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"In a strategic computer game \"Settlers II\" one has to build defense structures to expand and protect the territory. Let's take one of these buildings. At the moment the defense structure accommodates exactly n soldiers. Within this task we can assume that the number of soldiers in the defense structure won't either increase or decrease.Every soldier has a rank \u2014 some natural number from 1 to k. 1 stands for a private and k stands for a general. The higher the rank of the soldier is, the better he fights. Therefore, the player profits from having the soldiers of the highest possible rank.To increase the ranks of soldiers they need to train. But the soldiers won't train for free, and each training session requires one golden coin. On each training session all the n soldiers are present.At the end of each training session the soldiers' ranks increase as follows. First all the soldiers are divided into groups with the same rank, so that the least possible number of groups is formed. Then, within each of the groups where the soldiers below the rank k are present, exactly one soldier increases his rank by one.You know the ranks of all n soldiers at the moment. Determine the number of golden coins that are needed to increase the ranks of all the soldiers to the rank k.","input_specification":"The first line contains two integers n and k (1\u2009\u2264\u2009n,\u2009k\u2009\u2264\u2009100). They represent the number of soldiers and the number of different ranks correspondingly. The second line contains n numbers in the non-decreasing order. The i-th of them, ai, represents the rank of the i-th soldier in the defense building (1\u2009\u2264\u2009i\u2009\u2264\u2009n, 1\u2009\u2264\u2009ai\u2009\u2264\u2009k).","output_specification":"Print a single integer \u2014 the number of golden coins needed to raise all the soldiers to the maximal rank.","notes":"NoteIn the first example the ranks will be raised in the following manner:1 2 2 3 \u2009\u2192\u2009 2 2 3 4 \u2009\u2192\u2009 2 3 4 4 \u2009\u2192\u2009 3 4 4 4 \u2009\u2192\u2009 4 4 4 4Thus totals to 4 training sessions that require 4 golden coins.","sample_inputs":["4 4\n1 2 2 3","4 3\n1 1 1 1"],"sample_outputs":["4","5"],"src_uid":"3d6411d67c85f6293f1999ccff2cd8ba","lang_cluster":"Python","difficulty":1200,"human_solution":"# -*- coding: utf-8 -*-\n\nN , K = [int(n) for n in raw_input().split(\" \")]\nr = []\nnum = raw_input().split(\" \")\n#N , K = 100 , 100\n#num = [1 for i in xrange(100)]\n\nfor i in xrange(K):\n    r.append(0)\nfor n in num:\n    t = int(n)\n    r[t - 1] += 1\ncnt = 0\nwhile True:\n    i = 0\n    while i < K - 1 and r[i] == 0:\n        i += 1\n    if i == K - 1:\n        break\n    for i in xrange(K - 2 , -1 , -1):\n        #print i,\n        if r[i] != 0:\n            r[i] -= 1\n            r[i + 1] += 1\n    #print\n    cnt += 1\nprint cnt\n","testcases":"[{'input': '4 4\\r\\n1 2 2 3\\r\\n', 'output': ['4']}, {'input': '4 3\\r\\n1 1 1 1\\r\\n', 'output': ['5']}, {'input': '3 3\\r\\n1 2 3\\r\\n', 'output': ['2']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['0']}, {'input': '1 5\\r\\n1\\r\\n', 'output': ['4']}, {'input': '1 5\\r\\n4\\r\\n', 'output': ['1']}, {'input': '2 6\\r\\n2 5\\r\\n', 'output': ['4']}, {'input': '6 10\\r\\n1 1 3 4 9 9\\r\\n', 'output': ['10']}, {'input': '7 7\\r\\n1 1 1 1 1 1 7\\r\\n', 'output': ['11']}, {'input': '10 10\\r\\n1 1 1 3 3 4 7 8 8 8\\r\\n', 'output': ['11']}, {'input': '10 13\\r\\n1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['21']}, {'input': '10 13\\r\\n2 6 6 7 9 9 9 10 12 12\\r\\n', 'output': ['11']}, {'input': '17 9\\r\\n2 3 4 5 5 5 5 5 6 6 7 7 8 8 8 8 8\\r\\n', 'output': ['17']}, {'input': '18 24\\r\\n3 3 3 4 5 7 8 8 9 9 9 9 10 10 11 11 11 11\\r\\n', 'output': ['30']}, {'input': '23 2\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\\r\\n', 'output': ['12']}, {'input': '37 42\\r\\n1 1 1 1 1 2 2 2 2 2 3 4 4 4 4 5 5 5 5 6 6 6 6 6 6 6 6 7 7 7 7 7 8 8 8 8 8\\r\\n', 'output': ['70']}, {'input': '44 50\\r\\n38 38 38 38 38 38 38 39 39 39 39 39 39 39 40 40 40 40 40 41 41 41 41 41 41 41 42 42 42 43 43 43 44 44 44 44 45 45 45 46 46 46 46 46\\r\\n', 'output': ['47']}, {'input': '57 100\\r\\n2 2 4 7 8 10 12 12 14 15 16 18 19 21 21 22 25 26 26 33 38 40 44 44 44 45 47 47 50 51 51 54 54 54 54 55 56 58 61 65 67 68 68 70 74 75 78 79 83 86 89 90 92 95 96 96 97\\r\\n', 'output': ['99']}, {'input': '78 10\\r\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\\r\\n', 'output': ['78']}, {'input': '96 78\\r\\n20 20 20 20 20 21 21 21 22 23 23 24 24 25 25 27 28 29 30 30 30 32 32 32 33 33 33 33 34 34 35 36 37 37 39 39 41 41 41 41 42 42 43 43 43 44 44 45 46 46 48 48 49 50 51 51 51 52 53 55 55 56 56 56 56 57 58 59 60 61 61 61 62 62 62 63 63 64 64 64 65 65 65 66 66 67 68 69 71 72 72 73 73 75 75 75\\r\\n', 'output': ['98']}, {'input': '100 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['0']}, {'input': '100 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['198']}, {'input': '100 100\\r\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\r\\n', 'output': ['0']}, {'input': '100 100\\r\\n1 1 4 4 5 5 7 9 10 10 11 11 12 12 12 13 14 15 16 16 16 17 18 18 19 20 22 25 26 27 29 32 33 34 34 35 35 35 36 36 37 37 38 39 39 40 41 42 44 44 46 47 47 47 47 50 53 53 53 55 56 56 57 57 58 58 59 59 62 64 64 64 64 68 68 68 69 70 70 71 74 77 77 77 79 80 80 81 84 86 88 88 91 93 94 96 96 99 99 99\\r\\n', 'output': ['108']}, {'input': '100 100\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 7 7 7 7 8 8 8 8 8 9 9 9 9 9 9 9 10 10 10 10 10 11 11 11 11 11 12 12 12 12 12 12 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15\\r\\n', 'output': ['184']}, {'input': '100 100\\r\\n20 20 20 21 21 21 21 21 22 23 23 23 23 23 23 24 24 25 25 26 26 26 26 26 27 27 27 27 28 28 28 28 29 29 29 29 29 30 30 30 30 31 32 32 34 34 34 34 34 34 34 34 35 35 35 36 36 37 37 37 37 37 37 38 38 38 39 40 41 41 42 42 42 42 42 43 43 43 44 44 44 44 44 45 45 45 45 45 46 46 46 46 46 47 47 47 48 48 48 50\\r\\n', 'output': ['150']}, {'input': '100 2\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n', 'output': ['59']}, {'input': '30 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 49\\r\\n', 'output': ['77']}, {'input': '40 20\\r\\n5 5 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 20 20 20 20 20 20 20 20 20 20\\r\\n', 'output': ['31']}, {'input': '81 90\\r\\n1 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90\\r\\n', 'output': ['89']}, {'input': '100 20\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 13 13 13 13 13 13 13 13 13\\r\\n', 'output': ['106']}, {'input': '100 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 100\\r\\n', 'output': ['197']}, {'input': '100 100\\r\\n49 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 51\\r\\n', 'output': ['148']}, {'input': '1 100\\r\\n1\\r\\n', 'output': ['99']}, {'input': '4 3\\r\\n1 1 2 2\\r\\n', 'output': ['4']}, {'input': '10 100\\r\\n98 99 99 99 99 99 99 100 100 100\\r\\n', 'output': ['7']}, {'input': '5 100\\r\\n1 2 2 100 100\\r\\n', 'output': ['100']}]","id":144,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, k = map(int, input().split())\\n    a = list(map(int, input().split()))\\n    coins = 0\\n    while any(x < k for x in a):\\n        coins += 1\\n        counts = {}\\n        for x in a:\\n            counts[x] = counts.get(x, 0) + 1\\n        \\n        increased = False\\n        for i in range(len(a)):\\n            if a[i] < k:\\n                a[i] += 1\\n                increased = True\\n        \\n    print(coins)\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n, k = map(int, raw_input().split())\\n    a = map(int, raw_input().split())\\n    coins = 0\\n    while any(x < k for x in a):\\n        coins += 1\\n        counts = {}\\n        for x in a:\\n            counts[x] = counts.get(x, 0) + 1\\n        \\n        increased = False\\n        for i in range(len(a)):\\n            if a[i] < k:\\n                a[i] += 1\\n                increased = True\\n        \\n    print coins\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, k = map(int, input().split())\\n    a = list(map(int, input().split()))\\n    coins = 0\\n    while any(x < k for x in a):\\n        coins += 1\\n        counts = {}\\n        for x in a:\\n            counts[x] = counts.get(x, 0) + 1\\n        \n        increased = False\\n        for i in range(len(a)):\\n            if a[i] < k:\\n                a[i] += 1\\n                increased = True\\n                \\n    print(coins)\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n, k = map(int, raw_input().split())\\n    a = map(int, raw_input().split())\\n    coins = 0\\n    while any(x < k for x in a):\\n        coins += 1\\n        counts = {}\\n        for x in a:\\n            counts[x] = counts.get(x, 0) + 1\\n        \\n        increased = False\\n        for i in range(len(a)):\\n            if a[i] < k:\\n                a[i] += 1\\n                increased = True\\n                \\n    print coins\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, k = map(int, input().split())\\n    a = list(map(int, input().split()))\\n    coins = 0\\n    while any(x < k for x in a):\\n        coins += 1\\n        counts = {}\\n        for x in a:\\n            counts[x] = counts.get(x, 0) + 1\\n        \\n        increased = False\\n        for i in range(len(a)):\\n            if a[i] < k:\\n                a[i] += 1\\n                increased = True\\n        \\n    print(coins)\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n, k = map(int, raw_input().split())\\n    a = map(int, raw_input().split())\\n    coins = 0\\n    while any(x < k for x in a):\\n        coins += 1\\n        counts = {}\\n        for x in a:\\n            counts[x] = counts.get(x, 0) + 1\\n        \\n        increased = False\\n        for i in range(len(a)):\\n            if a[i] < k:\\n                a[i] += 1\\n                increased = True\\n        \\n    print coins\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, k = map(int, input().split())\\n    a = list(map(int, input().split()))\\n    coins = 0\\n    while any(x < k for x in a):\\n        coins += 1\\n        counts = {}\\n        for x in a:\\n            counts[x] = counts.get(x, 0) + 1\\n        \n        increased = False\\n        for i in range(len(a)):\\n            if a[i] < k:\\n                a[i] += 1\\n                increased = True\\n                \\n    print(coins)\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n, k = map(int, raw_input().split())\\n    a = map(int, raw_input().split())\\n    coins = 0\\n    while any(x < k for x in a):\\n        coins += 1\\n        counts = {}\\n        for x in a:\\n            counts[x] = counts.get(x, 0) + 1\\n        \\n        increased = False\\n        for i in range(len(a)):\\n            if a[i] < k:\\n                a[i] += 1\\n                increased = True\\n                \\n    print coins\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"Little Petya often travels to his grandmother in the countryside. The grandmother has a large garden, which can be represented as a rectangle 1\u2009\u00d7\u2009n in size, when viewed from above. This rectangle is divided into n equal square sections. The garden is very unusual as each of the square sections possesses its own fixed height and due to the newest irrigation system we can create artificial rain above each section.Creating artificial rain is an expensive operation. That's why we limit ourselves to creating the artificial rain only above one section. At that, the water from each watered section will flow into its neighbouring sections if their height does not exceed the height of the section. That is, for example, the garden can be represented by a 1\u2009\u00d7\u20095 rectangle, where the section heights are equal to 4, 2, 3, 3, 2. Then if we create an artificial rain over any of the sections with the height of 3, the water will flow over all the sections, except the ones with the height of 4. See the illustration of this example at the picture:  As Petya is keen on programming, he decided to find such a section that if we create artificial rain above it, the number of watered sections will be maximal. Help him. ","input_specification":"The first line contains a positive integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091000). The second line contains n positive integers which are the height of the sections. All the numbers are no less than 1 and not more than 1000.","output_specification":"Print a single number, the maximal number of watered sections if we create artificial rain above exactly one section.","notes":null,"sample_inputs":["1\n2","5\n1 2 1 2 1","8\n1 2 1 1 1 3 3 4"],"sample_outputs":["1","3","6"],"src_uid":"5d11fa8528f1dc873d50b3417bef8c79","lang_cluster":"Python","difficulty":1100,"human_solution":"t = int(raw_input())\nN = []\nN.append(10000)\n[N.append(int(i)) for i in raw_input().split()]\nsol = 0\ndpx, dpy = [0]*2000, [0]*2000\n\nN.append(10000)\nfor i in range(1, t+1):\n    if N[i] >= N[i - 1]:\n        dpy[i] = dpy[i - 1] + 1\n    else:\n        dpy[i] = 1\n\nfor i in range(t, 0, -1):\n    if N[i] >= N[i + 1]:\n        dpx[i] = dpx[i + 1] + 1\n    else:\n        dpx[i] = 1\n\nfor i in range(1, t+1):\n    if dpy[i] + dpx[i] - 1 > sol:\n        sol = dpx[i] + dpy[i] - 1\n\nprint sol\n","testcases":"[{'input': '1\\r\\n2\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n1 2 1 2 1\\r\\n', 'output': ['3\\r\\n']}, {'input': '8\\r\\n1 2 1 1 1 3 3 4\\r\\n', 'output': ['6\\r\\n']}, {'input': '10\\r\\n1 2 3 4 5 6 7 8 9 10\\r\\n', 'output': ['10\\r\\n']}, {'input': '10\\r\\n10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['10\\r\\n']}, {'input': '2\\r\\n100 100\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n100 100 100\\r\\n', 'output': ['3\\r\\n']}, {'input': '11\\r\\n1 2 3 4 5 6 5 4 3 2 1\\r\\n', 'output': ['11\\r\\n']}, {'input': '100\\r\\n1 2 3 4 5 6 7 8 9 10 11 100 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 1 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['61\\r\\n']}, {'input': '100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 1 82 83 84 85 86 87 88 89 90 91 92 93 94 100 5 4 3 2 1\\r\\n', 'output': ['81\\r\\n']}, {'input': '100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 1 86 87 88 89 90 91 92 93 100 6 5 4 3 2 1\\r\\n', 'output': ['85\\r\\n']}, {'input': '100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 1 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 100 7 6 5 4 3 2 1\\r\\n', 'output': ['61\\r\\n']}, {'input': '100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 100 8 7 6 1 4 3 2 1\\r\\n', 'output': ['96\\r\\n']}, {'input': '100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 100 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['100\\r\\n']}, {'input': '100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 1 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 100 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['55\\r\\n']}, {'input': '100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 1 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 100 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['59\\r\\n']}, {'input': '100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 1 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 100 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['86\\r\\n']}, {'input': '100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 100 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['83\\r\\n']}, {'input': '100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 100 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 1 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['74\\r\\n']}, {'input': '100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 100 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['100\\r\\n']}, {'input': '100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 100 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 1 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\r\\n', 'output': ['52\\r\\n']}, {'input': '100\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 100 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 1 2 1\\r\\n', 'output': ['98\\r\\n']}, {'input': '10\\r\\n1 4 4 4 4 4 1 2 4 3\\r\\n', 'output': ['7\\r\\n']}]","id":145,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    heights = list(map(int, input().split()))\\n    \\n    max_watered = 0\\n    for i in range(n):\\n        watered = [False] * n\\n        watered[i] = True\\n        \\n        # Left\\n        left = i - 1\\n        while left >= 0 and heights[left] <= heights[left+1] : \\n            watered[left] = True\\n            left -= 1\\n        \\n        # Right\\n        right = i + 1\\n        while right < n and heights[right] <= heights[right-1]:\\n            watered[right] = True\\n            right += 1\\n        \\n        max_watered = max(max_watered, sum(watered))\\n    \\n    print(max_watered)\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    heights = list(map(int, input().split()))\\n    \\n    max_watered = 0\\n    for i in range(n):\\n        watered = [False] * n\\n        watered[i] = True\\n        \\n        # Flow left\\n        left = i - 1\\n        while left >= 0 and heights[left] <= heights[left+1]:\\n            watered[left] = True\\n            left -= 1\\n            \\n        # Flow right\\n        right = i + 1\\n        while right < n and heights[right] <= heights[right-1]:\\n            watered[right] = True\\n            right += 1\\n            \\n        max_watered = max(max_watered, sum(watered))\\n    \\n    print(max_watered)\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    heights = list(map(int, input().split()))\\n    \\n    max_watered = 0\\n    for i in range(n):\\n        watered = [False] * n\\n        watered[i] = True\\n        \\n        # Left\\n        left = i - 1\\n        while left >= 0 and heights[left] <= heights[left+1] : \\n            watered[left] = True\\n            left -= 1\\n        \\n        # Right\\n        right = i + 1\\n        while right < n and heights[right] <= heights[right-1]:\\n            watered[right] = True\\n            right += 1\\n        \\n        max_watered = max(max_watered, sum(watered))\\n    \\n    print(max_watered)\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    heights = list(map(int, input().split()))\\n    \\n    max_watered = 0\\n    for i in range(n):\\n        watered = [False] * n\\n        watered[i] = True\\n        \\n        # Flow left\\n        left = i - 1\\n        while left >= 0 and heights[left] <= heights[left+1]:\\n            watered[left] = True\\n            left -= 1\\n            \\n        # Flow right\\n        right = i + 1\\n        while right < n and heights[right] <= heights[right-1]:\\n            watered[right] = True\\n            right += 1\\n            \\n        max_watered = max(max_watered, sum(watered))\\n    \\n    print(max_watered)\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"n soldiers stand in a circle. For each soldier his height ai is known. A reconnaissance unit can be made of such two neighbouring soldiers, whose heights difference is minimal, i.e. |ai\u2009-\u2009aj| is minimal. So each of them will be less noticeable with the other. Output any pair of soldiers that can form a reconnaissance unit.","input_specification":"The first line contains integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100) \u2014 amount of soldiers. Then follow the heights of the soldiers in their order in the circle \u2014 n space-separated integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u20091000). The soldier heights are given in clockwise or counterclockwise direction.","output_specification":"Output two integers \u2014 indexes of neighbouring soldiers, who should form a reconnaissance unit. If there are many optimum solutions, output any of them. Remember, that the soldiers stand in a circle.","notes":null,"sample_inputs":["5\n10 12 13 15 10","4\n10 20 30 40"],"sample_outputs":["5 1","1 2"],"src_uid":"facd9cd4fc1e53f50a1e6f947d78e942","lang_cluster":"Python","difficulty":800,"human_solution":"n = int(input())\nl = list(map(int,input().split()))\nl.append(l[0])\n# print(l)\nm = abs(l[1]-l[0])\n# print(m)\na = 1\nfor i in range(2,n+1):\n    if(abs(l[i]-l[i-1]))<m:\n        # print(abs(l[i]-l[i-1])\n        m = abs(l[i]-l[i-1])\n        a = i\nif(a==n):\n    print(a,1)\nelse:\n    print(a,a+1)\n","testcases":"[{'input': '5\\r\\n10 12 13 15 10\\r\\n', 'output': ['5 1\\r\\n']}, {'input': '4\\r\\n10 20 30 40\\r\\n', 'output': ['1 2\\r\\n']}, {'input': '6\\r\\n744 359 230 586 944 442\\r\\n', 'output': ['2 3\\r\\n']}, {'input': '5\\r\\n826 747 849 687 437\\r\\n', 'output': ['1 2\\r\\n']}, {'input': '5\\r\\n999 999 993 969 999\\r\\n', 'output': ['1 2\\r\\n']}, {'input': '5\\r\\n4 24 6 1 15\\r\\n', 'output': ['3 4\\r\\n']}, {'input': '2\\r\\n511 32\\r\\n', 'output': ['1 2\\r\\n']}, {'input': '3\\r\\n907 452 355\\r\\n', 'output': ['2 3\\r\\n']}, {'input': '4\\r\\n303 872 764 401\\r\\n', 'output': ['4 1\\r\\n']}, {'input': '10\\r\\n684 698 429 694 956 812 594 170 937 764\\r\\n', 'output': ['1 2\\r\\n']}, {'input': '20\\r\\n646 840 437 946 640 564 936 917 487 752 844 734 468 969 674 646 728 642 514 695\\r\\n', 'output': ['7 8\\r\\n']}, {'input': '30\\r\\n996 999 998 984 989 1000 996 993 1000 983 992 999 999 1000 979 992 987 1000 996 1000 1000 989 981 996 995 999 999 989 999 1000\\r\\n', 'output': ['12 13\\r\\n']}, {'input': '50\\r\\n93 27 28 4 5 78 59 24 19 134 31 128 118 36 90 32 32 1 44 32 33 13 31 10 12 25 38 50 25 12 4 22 28 53 48 83 4 25 57 31 71 24 8 7 28 86 23 80 101 58\\r\\n', 'output': ['16 17\\r\\n']}, {'input': '88\\r\\n1000 1000 1000 1000 1000 998 998 1000 1000 1000 1000 999 999 1000 1000 1000 999 1000 997 999 997 1000 999 998 1000 999 1000 1000 1000 999 1000 999 999 1000 1000 999 1000 999 1000 1000 998 1000 1000 1000 998 998 1000 1000 999 1000 1000 1000 1000 1000 1000 1000 998 1000 1000 1000 999 1000 1000 999 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 998 1000 1000 1000 998 1000 1000 998 1000 999 1000 1000 1000 1000\\r\\n', 'output': ['1 2\\r\\n']}, {'input': '99\\r\\n4 4 21 6 5 3 13 2 6 1 3 4 1 3 1 9 11 1 6 17 4 5 20 4 1 9 5 11 3 4 14 1 3 3 1 4 3 5 27 1 1 2 10 7 11 4 19 7 11 6 11 13 3 1 10 7 2 1 16 1 9 4 29 13 2 12 14 2 21 1 9 8 26 12 12 5 2 14 7 8 8 8 9 4 12 2 6 6 7 16 8 14 2 10 20 15 3 7 4\\r\\n', 'output': ['1 2\\r\\n']}, {'input': '100\\r\\n713 572 318 890 577 657 646 146 373 783 392 229 455 871 20 593 573 336 26 381 280 916 907 732 820 713 111 840 570 446 184 711 481 399 788 647 492 15 40 530 549 506 719 782 126 20 778 996 712 761 9 74 812 418 488 175 103 585 900 3 604 521 109 513 145 708 990 361 682 827 791 22 596 780 596 385 450 643 158 496 876 975 319 783 654 895 891 361 397 81 682 899 347 623 809 557 435 279 513 438\\r\\n', 'output': ['86 87\\r\\n']}, {'input': '100\\r\\n31 75 86 68 111 27 22 22 26 30 54 163 107 75 160 122 14 23 17 26 27 20 43 58 59 71 21 148 9 32 43 91 133 286 132 70 90 156 84 14 77 93 23 18 13 72 18 131 33 28 72 175 30 86 249 20 14 208 28 57 63 199 6 10 24 30 62 267 43 479 60 28 138 1 45 3 19 47 7 166 116 117 50 140 28 14 95 85 93 43 61 15 2 70 10 51 7 95 9 25\\r\\n', 'output': ['7 8\\r\\n']}, {'input': '100\\r\\n896 898 967 979 973 709 961 968 806 967 896 967 826 975 936 903 986 856 851 931 852 971 786 837 949 978 686 936 952 909 965 749 908 916 943 973 983 975 939 886 964 928 960 976 907 788 994 773 949 871 947 980 945 985 726 981 887 943 907 990 931 874 840 867 948 951 961 904 888 901 976 967 994 921 828 970 972 722 755 970 860 855 914 869 714 899 969 978 898 862 642 939 904 936 819 934 884 983 955 964\\r\\n', 'output': ['1 2\\r\\n']}, {'input': '100\\r\\n994 927 872 970 815 986 952 996 965 1000 877 986 978 999 950 990 936 997 993 960 921 860 895 869 943 998 983 968 973 953 999 990 995 871 853 979 973 963 953 938 997 989 993 964 960 973 946 975 1000 962 920 746 989 957 904 965 920 979 966 961 1000 993 975 952 846 971 991 979 985 969 984 973 956 1000 952 778 983 974 956 927 995 997 980 997 1000 970 960 970 988 983 947 904 935 972 1000 863 992 996 932 967\\r\\n', 'output': ['81 82\\r\\n']}, {'input': '100\\r\\n48 108 63 21 27 8 49 21 75 8 24 42 149 18 8 28 21 18 25 35 59 70 59 33 40 1 67 34 120 82 4 115 72 87 3 15 15 63 37 12 40 27 83 14 38 20 14 58 93 10 31 3 39 6 197 77 54 16 31 146 9 49 14 8 77 82 5 11 80 116 8 61 50 24 7 103 29 11 3 3 1 12 46 24 21 131 39 29 36 2 107 40 16 99 31 41 29 48 17 17\\r\\n', 'output': ['36 37\\r\\n']}]","id":146,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\nmin_diff = float('inf')\\nresult = (0, 0)\\nfor i in range(n):\\n    diff = abs(a[i] - a[(i + 1) % n])\\n    if diff < min_diff:\\n        min_diff = diff\\n        result = (i + 1, (i + 1) % n + 1)\\nprint(result[0], result[1])\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\na = map(int, raw_input().split())\\nmin_diff = float('inf')\\nresult = (0, 0)\\nfor i in range(n):\\n    diff = abs(a[i] - a[(i + 1) % n])\\n    if diff < min_diff:\\n        min_diff = diff\\n        result = (i + 1, (i + 1) % n + 1)\\nprint result[0], result[1]\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\nmin_diff = float('inf')\\nresult = (0, 0)\\nfor i in range(n):\\n    diff = abs(a[i] - a[(i + 1) % n])\\n    if diff < min_diff:\\n        min_diff = diff\\n        result = (i + 1, (i + 1) % n + 1)\\nprint(result[0], result[1])\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\na = map(int, raw_input().split())\\nmin_diff = float('inf')\\nresult = (0, 0)\\nfor i in range(n):\\n    diff = abs(a[i] - a[(i + 1) % n])\\n    if diff < min_diff:\\n        min_diff = diff\\n        result = (i + 1, (i + 1) % n + 1)\\nprint result[0], result[1]\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\nmin_diff = float('inf')\\nresult = (0, 0)\\nfor i in range(n):\\n    diff = abs(a[i] - a[(i + 1) % n])\\n    if diff < min_diff:\\n        min_diff = diff\\n        result = (i + 1, (i + 1) % n + 1)\\nprint(result[0], result[1])\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\na = map(int, raw_input().split())\\nmin_diff = float('inf')\\nresult = (0, 0)\\nfor i in range(n):\\n    diff = abs(a[i] - a[(i + 1) % n])\\n    if diff < min_diff:\\n        min_diff = diff\\n        result = (i + 1, (i + 1) % n + 1)\\nprint result[0], result[1]\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\nmin_diff = float('inf')\\nresult = (0, 0)\\nfor i in range(n):\\n    diff = abs(a[i] - a[(i + 1) % n])\\n    if diff < min_diff:\\n        min_diff = diff\\n        result = (i + 1, (i + 1) % n + 1)\\nprint(result[0], result[1])\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\na = map(int, raw_input().split())\\nmin_diff = float('inf')\\nresult = (0, 0)\\nfor i in range(n):\\n    diff = abs(a[i] - a[(i + 1) % n])\\n    if diff < min_diff:\\n        min_diff = diff\\n        result = (i + 1, (i + 1) % n + 1)\\nprint result[0], result[1]\"\n  }\n]\n```"}
{"description":"The Berland Armed Forces System consists of n ranks that are numbered using natural numbers from 1 to n, where 1 is the lowest rank and n is the highest rank.One needs exactly di years to rise from rank i to rank i\u2009+\u20091. Reaching a certain rank i having not reached all the previous i\u2009-\u20091 ranks is impossible.Vasya has just reached a new rank of a, but he dreams of holding the rank of b. Find for how many more years Vasya should serve in the army until he can finally realize his dream.","input_specification":"The first input line contains an integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100). The second line contains n\u2009-\u20091 integers di (1\u2009\u2264\u2009di\u2009\u2264\u2009100). The third input line contains two integers a and b (1\u2009\u2264\u2009a\u2009&lt;\u2009b\u2009\u2264\u2009n). The numbers on the lines are space-separated.","output_specification":"Print the single number which is the number of years that Vasya needs to rise from rank a to rank b.","notes":null,"sample_inputs":["3\n5 6\n1 2","3\n5 6\n1 3"],"sample_outputs":["5","11"],"src_uid":"69850c2af99d60711bcff5870575e15e","lang_cluster":"Python","difficulty":800,"human_solution":"n = int(input())\nd = [int(x) for x in input().split()]\na, b = [int(x) for x in input().split()]\nprint(d[a-1]+sum(d[a:b-1]))","testcases":"[{'input': '3\\r\\n5 6\\r\\n1 2\\r\\n', 'output': ['5\\r\\n']}, {'input': '3\\r\\n5 6\\r\\n1 3\\r\\n', 'output': ['11\\r\\n']}, {'input': '2\\r\\n55\\r\\n1 2\\r\\n', 'output': ['55\\r\\n']}, {'input': '3\\r\\n85 78\\r\\n1 3\\r\\n', 'output': ['163\\r\\n']}, {'input': '4\\r\\n63 4 49\\r\\n2 3\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n93 83 42 56\\r\\n2 5\\r\\n', 'output': ['181\\r\\n']}, {'input': '6\\r\\n22 9 87 89 57\\r\\n1 6\\r\\n', 'output': ['264\\r\\n']}, {'input': '7\\r\\n52 36 31 23 74 78\\r\\n2 7\\r\\n', 'output': ['242\\r\\n']}, {'input': '8\\r\\n82 14 24 5 91 49 94\\r\\n3 8\\r\\n', 'output': ['263\\r\\n']}, {'input': '9\\r\\n12 40 69 39 59 21 59 5\\r\\n4 6\\r\\n', 'output': ['98\\r\\n']}, {'input': '10\\r\\n95 81 32 59 71 30 50 61 100\\r\\n1 6\\r\\n', 'output': ['338\\r\\n']}, {'input': '15\\r\\n89 55 94 4 15 69 19 60 91 77 3 94 91 62\\r\\n3 14\\r\\n', 'output': ['617\\r\\n']}, {'input': '20\\r\\n91 1 41 51 95 67 92 35 23 70 44 91 57 50 21 8 9 71 40\\r\\n8 17\\r\\n', 'output': ['399\\r\\n']}, {'input': '25\\r\\n70 95 21 84 97 39 12 98 53 24 78 29 84 65 70 22 100 17 69 27 62 48 35 80\\r\\n8 23\\r\\n', 'output': ['846\\r\\n']}, {'input': '30\\r\\n35 69 50 44 19 56 86 56 98 24 21 2 61 24 85 30 2 22 57 35 59 84 12 77 92 53 50 92 9\\r\\n1 16\\r\\n', 'output': ['730\\r\\n']}, {'input': '35\\r\\n2 34 47 15 27 61 6 88 67 20 53 65 29 68 77 5 78 86 44 98 32 81 91 79 54 84 95 23 65 97 22 33 42 87\\r\\n8 35\\r\\n', 'output': ['1663\\r\\n']}, {'input': '40\\r\\n32 88 59 36 95 45 28 78 73 30 97 13 13 47 48 100 43 21 22 45 88 25 15 13 63 25 72 92 29 5 25 11 50 5 54 51 48 84 23\\r\\n7 26\\r\\n', 'output': ['862\\r\\n']}, {'input': '45\\r\\n83 74 73 95 10 31 100 26 29 15 80 100 22 70 31 88 9 56 19 70 2 62 48 30 27 47 52 50 94 44 21 94 23 85 15 3 95 72 43 62 94 89 68 88\\r\\n17 40\\r\\n', 'output': ['1061\\r\\n']}, {'input': '50\\r\\n28 8 16 29 19 82 70 51 96 84 74 72 17 69 12 21 37 21 39 3 18 66 19 49 86 96 94 93 2 90 96 84 59 88 58 15 61 33 55 22 35 54 51 29 64 68 29 38 40\\r\\n23 28\\r\\n', 'output': ['344\\r\\n']}, {'input': '60\\r\\n24 28 25 21 43 71 64 73 71 90 51 83 69 43 75 43 78 72 56 61 99 7 23 86 9 16 16 94 23 74 18 56 20 72 13 31 75 34 35 86 61 49 4 72 84 7 65 70 66 52 21 38 6 43 69 40 73 46 5\\r\\n28 60\\r\\n', 'output': ['1502\\r\\n']}, {'input': '70\\r\\n69 95 34 14 67 61 6 95 94 44 28 94 73 66 39 13 19 71 73 71 28 48 26 22 32 88 38 95 43 59 88 77 80 55 17 95 40 83 67 1 38 95 58 63 56 98 49 2 41 4 73 8 78 41 64 71 60 71 41 61 67 4 4 19 97 14 39 20 27\\r\\n9 41\\r\\n', 'output': ['1767\\r\\n']}, {'input': '80\\r\\n65 15 43 6 43 98 100 16 69 98 4 54 25 40 2 35 12 23 38 29 10 89 30 6 4 8 7 96 64 43 11 49 89 38 20 59 54 85 46 16 16 89 60 54 28 37 32 34 67 9 78 30 50 87 58 53 99 48 77 3 5 6 19 99 16 20 31 10 80 76 82 56 56 83 72 81 84 60 28\\r\\n18 24\\r\\n', 'output': ['219\\r\\n']}, {'input': '90\\r\\n61 35 100 99 67 87 42 90 44 4 81 65 29 63 66 56 53 22 55 87 39 30 34 42 27 80 29 97 85 28 81 22 50 22 24 75 67 86 78 79 94 35 13 97 48 76 68 66 94 13 82 1 22 85 5 36 86 73 65 97 43 56 35 26 87 25 74 47 81 67 73 75 99 75 53 38 70 21 66 78 38 17 57 40 93 57 68 55 1\\r\\n12 44\\r\\n', 'output': ['1713\\r\\n']}, {'input': '95\\r\\n37 74 53 96 65 84 65 72 95 45 6 77 91 35 58 50 51 51 97 30 51 20 79 81 92 10 89 34 40 76 71 54 26 34 73 72 72 28 53 19 95 64 97 10 44 15 12 38 5 63 96 95 86 8 36 96 45 53 81 5 18 18 47 97 65 9 33 53 41 86 37 53 5 40 15 76 83 45 33 18 26 5 19 90 46 40 100 42 10 90 13 81 40 53\\r\\n6 15\\r\\n', 'output': ['570\\r\\n']}, {'input': '96\\r\\n51 32 95 75 23 54 70 89 67 3 1 51 4 100 97 30 9 35 56 38 54 77 56 98 43 17 60 43 72 46 87 61 100 65 81 22 74 38 16 96 5 10 54 22 23 22 10 91 9 54 49 82 29 73 33 98 75 8 4 26 24 90 71 42 90 24 94 74 94 10 41 98 56 63 18 43 56 21 26 64 74 33 22 38 67 66 38 60 64 76 53 10 4 65 76\\r\\n21 26\\r\\n', 'output': ['328\\r\\n']}, {'input': '97\\r\\n18 90 84 7 33 24 75 55 86 10 96 72 16 64 37 9 19 71 62 97 5 34 85 15 46 72 82 51 52 16 55 68 27 97 42 72 76 97 32 73 14 56 11 86 2 81 59 95 60 93 1 22 71 37 77 100 6 16 78 47 78 62 94 86 16 91 56 46 47 35 93 44 7 86 70 10 29 45 67 62 71 61 74 39 36 92 24 26 65 14 93 92 15 28 79 59\\r\\n6 68\\r\\n', 'output': ['3385\\r\\n']}, {'input': '98\\r\\n32 47 26 86 43 42 79 72 6 68 40 46 29 80 24 89 29 7 21 56 8 92 13 33 50 79 5 7 84 85 24 23 1 80 51 21 26 55 96 51 24 2 68 98 81 88 57 100 64 84 54 10 14 2 74 1 89 71 1 20 84 85 17 31 42 58 69 67 48 60 97 90 58 10 21 29 2 21 60 61 68 89 77 39 57 18 61 44 67 100 33 74 27 40 83 29 6\\r\\n8 77\\r\\n', 'output': ['3319\\r\\n']}, {'input': '99\\r\\n46 5 16 66 53 12 84 89 26 27 35 68 41 44 63 17 88 43 80 15 59 1 42 50 53 34 75 16 16 55 92 30 28 11 12 71 27 65 11 28 86 47 24 10 60 47 7 53 16 75 6 49 56 66 70 3 20 78 75 41 38 57 89 23 16 74 30 39 1 32 49 84 9 33 25 95 75 45 54 59 17 17 29 40 79 96 47 11 69 86 73 56 91 4 87 47 31 24\\r\\n23 36\\r\\n', 'output': ['514\\r\\n']}, {'input': '100\\r\\n63 65 21 41 95 23 3 4 12 23 95 50 75 63 58 34 71 27 75 31 23 94 96 74 69 34 43 25 25 55 44 19 43 86 68 17 52 65 36 29 72 96 84 25 84 23 71 54 6 7 71 7 21 100 99 58 93 35 62 47 36 70 68 9 75 13 35 70 76 36 62 22 52 51 2 87 66 41 54 35 78 62 30 35 65 44 74 93 78 37 96 70 26 32 71 27 85 85 63\\r\\n43 92\\r\\n', 'output': ['2599\\r\\n']}, {'input': '51\\r\\n85 38 22 38 42 36 55 24 36 80 49 15 66 91 88 61 46 82 1 61 89 92 6 56 28 8 46 80 56 90 91 38 38 17 69 64 57 68 13 44 45 38 8 72 61 39 87 2 73 88\\r\\n15 27\\r\\n', 'output': ['618\\r\\n']}, {'input': '2\\r\\n3\\r\\n1 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\n6 8 22 22\\r\\n2 3\\r\\n', 'output': ['8\\r\\n']}, {'input': '6\\r\\n3 12 27 28 28\\r\\n3 4\\r\\n', 'output': ['27\\r\\n']}, {'input': '9\\r\\n1 2 2 2 2 3 3 5\\r\\n3 7\\r\\n', 'output': ['9\\r\\n']}, {'input': '10\\r\\n1 1 1 1 1 1 1 1 1\\r\\n6 8\\r\\n', 'output': ['2\\r\\n']}, {'input': '20\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 3\\r\\n5 17\\r\\n', 'output': ['23\\r\\n']}, {'input': '25\\r\\n1 1 1 4 5 6 8 11 11 11 11 12 13 14 14 14 15 16 16 17 17 17 19 19\\r\\n4 8\\r\\n', 'output': ['23\\r\\n']}, {'input': '35\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\r\\n30 31\\r\\n', 'output': ['2\\r\\n']}, {'input': '45\\r\\n1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 4 5 5 5 5 6 6 6 6 6 6 6 7 7 7 7 8 8 8 9 9 9 9 9 10 10 10\\r\\n42 45\\r\\n', 'output': ['30\\r\\n']}, {'input': '50\\r\\n1 8 8 13 14 15 15 16 19 21 22 24 26 31 32 37 45 47 47 47 50 50 51 54 55 56 58 61 61 61 63 63 64 66 66 67 67 70 71 80 83 84 85 92 92 94 95 95 100\\r\\n4 17\\r\\n', 'output': ['285\\r\\n']}, {'input': '60\\r\\n1 2 4 4 4 6 6 8 9 10 10 13 14 18 20 20 21 22 23 23 26 29 30 32 33 34 35 38 40 42 44 44 46 48 52 54 56 56 60 60 66 67 68 68 69 73 73 74 80 80 81 81 82 84 86 86 87 89 89\\r\\n56 58\\r\\n', 'output': ['173\\r\\n']}, {'input': '70\\r\\n1 2 3 3 4 5 5 7 7 7 8 8 8 8 9 9 10 12 12 12 12 13 16 16 16 16 16 16 17 17 18 18 20 20 21 23 24 25 25 26 29 29 29 29 31 32 32 34 35 36 36 37 37 38 39 39 40 40 40 40 41 41 42 43 44 44 44 45 45\\r\\n62 65\\r\\n', 'output': ['126\\r\\n']}, {'input': '80\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 5 5 5 5 5 5 5 6 7 7 7 7 7 7 8 8 8 8 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12\\r\\n17 65\\r\\n', 'output': ['326\\r\\n']}, {'input': '90\\r\\n1 1 3 5 8 9 10 11 11 11 11 12 13 14 15 15 15 16 16 19 19 20 22 23 24 25 25 28 29 29 30 31 33 34 35 37 37 38 41 43 43 44 45 47 51 54 55 56 58 58 59 59 60 62 66 67 67 67 68 68 69 70 71 72 73 73 76 77 77 78 78 78 79 79 79 82 83 84 85 85 87 87 89 93 93 93 95 99 99\\r\\n28 48\\r\\n', 'output': ['784\\r\\n']}, {'input': '95\\r\\n2 2 3 3 4 6 6 7 7 7 9 10 12 12 12 12 13 14 15 16 17 18 20 20 20 20 21 21 21 21 22 22 22 22 22 23 23 23 25 26 26 27 27 27 28 29 29 30 30 31 32 33 34 36 37 37 38 39 39 39 42 43 43 43 45 47 48 50 50 51 52 53 54 54 54 55 55 55 58 59 60 61 61 61 61 62 62 63 64 65 66 67 67 67\\r\\n64 93\\r\\n', 'output': ['1636\\r\\n']}, {'input': '96\\r\\n1 1 2 3 3 5 8 9 9 10 10 10 11 11 11 11 11 12 13 13 13 14 15 15 16 16 17 17 17 17 18 18 20 20 20 21 21 21 23 24 24 25 25 26 27 27 27 27 29 29 29 30 30 30 32 32 32 32 32 32 33 33 34 34 34 35 35 35 36 36 37 37 37 38 39 40 41 41 41 41 42 42 43 43 45 45 45 46 46 47 47 49 50 52 52\\r\\n76 96\\r\\n', 'output': ['898\\r\\n']}, {'input': '98\\r\\n2 3 4 4 5 7 8 10 10 10 11 11 12 12 12 12 13 14 15 15 16 16 18 19 19 20 21 21 21 21 22 23 24 25 26 26 27 27 27 27 29 29 30 30 31 31 37 40 40 40 41 41 41 42 43 44 44 44 46 46 47 49 49 50 50 50 51 53 55 55 56 56 56 56 56 57 57 58 59 60 60 60 62 62 63 64 64 64 65 66 66 67 68 70 70 71 71\\r\\n8 90\\r\\n', 'output': ['3016\\r\\n']}, {'input': '99\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n66 95\\r\\n', 'output': ['29\\r\\n']}, {'input': '100\\r\\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 12 12 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 15 15 15 15 15 15 16 16 16 17 17\\r\\n39 52\\r\\n', 'output': ['82\\r\\n']}, {'input': '51\\r\\n5 7 9 16 19 25 26 29 29 30 31 32 32 41 43 44 47 49 50 50 51 52 54 55 56 63 64 66 67 70 74 74 77 78 79 80 80 85 86 87 89 89 90 92 93 94 94 95 95 97\\r\\n3 44\\r\\n', 'output': ['2268\\r\\n']}]","id":147,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nd = list(map(int, input().split()))\\na, b = map(int, input().split())\\n\\nyears = 0\\nfor i in range(a - 1, b - 1):\\n    years += d[i]\\n\\nprint(years)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nd = map(int, raw_input().split())\\na, b = map(int, raw_input().split())\\n\\nyears = 0\\nfor i in range(a - 1, b - 1):\\n    years += d[i]\\n\\nprint years\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nd = list(map(int, input().split()))\\na, b = map(int, input().split())\\n\\nresult = 0\\nfor i in range(a - 1, b - 1):\\n    result += d[i]\\n\\nprint(result)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nd = map(int, raw_input().split())\\na, b = map(int, raw_input().split())\\n\\nresult = 0\\nfor i in range(a - 1, b - 1):\\n    result += d[i]\\n\\nprint result\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nd = list(map(int, input().split()))\\na, b = map(int, input().split())\\n\\nyears = 0\\nfor i in range(a - 1, b - 1):\\n    years += d[i]\\n\\nprint(years)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nd = map(int, raw_input().split())\\na, b = map(int, raw_input().split())\\n\\nyears = 0\\nfor i in range(a - 1, b - 1):\\n    years += d[i]\\n\\nprint years\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nd = list(map(int, input().split()))\\na, b = map(int, input().split())\\n\\nresult = 0\\nfor i in range(a - 1, b - 1):\\n    result += d[i]\\n\\nprint(result)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nd = map(int, raw_input().split())\\na, b = map(int, raw_input().split())\\n\\nresult = 0\\nfor i in range(a - 1, b - 1):\\n    result += d[i]\\n\\nprint result\"\n  }\n]\n```"}
{"description":"The blinds are known to consist of opaque horizontal stripes that can be rotated thus regulating the amount of light flowing in the room. There are n blind stripes with the width of 1 in the factory warehouse for blind production. The problem is that all of them are spare details from different orders, that is, they may not have the same length (it is even possible for them to have different lengths)Every stripe can be cut into two or more parts. The cuttings are made perpendicularly to the side along which the length is measured. Thus the cuttings do not change the width of a stripe but each of the resulting pieces has a lesser length (the sum of which is equal to the length of the initial stripe)After all the cuttings the blinds are constructed through consecutive joining of several parts, similar in length, along sides, along which length is measured. Also, apart from the resulting pieces an initial stripe can be used as a blind if it hasn't been cut. It is forbidden to construct blinds in any other way.Thus, if the blinds consist of k pieces each d in length, then they are of form of a rectangle of k\u2009\u00d7\u2009d bourlemeters. Your task is to find for what window possessing the largest possible area the blinds can be made from the given stripes if on technical grounds it is forbidden to use pieces shorter than l bourlemeter. The window is of form of a rectangle with side lengths as positive integers.","input_specification":"The first output line contains two space-separated integers n and l (1\u2009\u2264\u2009n,\u2009l\u2009\u2264\u2009100). They are the number of stripes in the warehouse and the minimal acceptable length of a blind stripe in bourlemeters. The second line contains space-separated n integers ai. They are the lengths of initial stripes in bourlemeters (1\u2009\u2264\u2009ai\u2009\u2264\u2009100).","output_specification":"Print the single number \u2014 the maximal area of the window in square bourlemeters that can be completely covered. If no window with a positive area that can be covered completely without breaking any of the given rules exist, then print the single number 0.","notes":"NoteIn the first sample test the required window is 2\u2009\u00d7\u20094 in size and the blinds for it consist of 4 parts, each 2 bourlemeters long. One of the parts is the initial stripe with the length of 2, the other one is a part of a cut stripe with the length of 3 and the two remaining stripes are parts of a stripe with the length of 4 cut in halves.","sample_inputs":["4 2\n1 2 3 4","5 3\n5 5 7 3 1","2 3\n1 2"],"sample_outputs":["8","15","0"],"src_uid":"991516fa6f3ed5a71c547a3a50ea1a2b","lang_cluster":"Python","difficulty":1400,"human_solution":"#!\/usr\/bin\/env python\n\ndef main():\n\tn,l = map(int, raw_input().split())\n\td = map(int, raw_input().split())\n\n\tans = 0\n\tfor cut in range(l, max(d)+1):\n\t\tw = map(lambda x:x\/cut, d)\n\t\tans = max(ans,sum(w)*cut)\n\n\tprint ans\n\nmain()\n\n","testcases":"[{'input': '4 2\\r\\n1 2 3 4\\r\\n', 'output': ['8\\r\\n']}, {'input': '5 3\\r\\n5 5 7 3 1\\r\\n', 'output': ['15\\r\\n']}, {'input': '2 3\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '2 2\\r\\n3 3\\r\\n', 'output': ['6\\r\\n']}, {'input': '5 2\\r\\n2 4 1 1 3\\r\\n', 'output': ['8\\r\\n']}, {'input': '7 4\\r\\n3 2 1 1 1 3 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '10 1\\r\\n1 2 2 6 6 1 2 5 5 6\\r\\n', 'output': ['36\\r\\n']}, {'input': '10 2\\r\\n6 3 1 1 6 4 6 1 6 3\\r\\n', 'output': ['33\\r\\n']}, {'input': '15 6\\r\\n1 6 6 5 2 10 4 4 7 8 7 3 5 1 2\\r\\n', 'output': ['36\\r\\n']}, {'input': '20 2\\r\\n13 3 6 11 6 11 9 1 1 2 5 2 9 15 14 10 3 12 3 13\\r\\n', 'output': ['136\\r\\n']}, {'input': '25 20\\r\\n10 8 4 6 12 14 19 18 19 9 21 16 16 15 10 15 12 12 18 18 9 22 12 14 14\\r\\n', 'output': ['42\\r\\n']}, {'input': '30 15\\r\\n93 99 77 69 43 86 56 15 9 9 75 84 56 1 42 45 10 23 83 87 86 99 46 48 40 69 95 10 61 47\\r\\n', 'output': ['1455\\r\\n']}, {'input': '35 3\\r\\n13 12 38 45 71 61 42 75 58 40 50 70 27 38 16 37 21 12 36 7 39 4 65 12 32 26 1 21 66 63 29 56 32 29 26\\r\\n', 'output': ['1236\\r\\n']}, {'input': '40 33\\r\\n33 52 83 32 59 90 25 90 38 31 60 30 76 77 9 13 48 1 55 39 84 28 58 83 12 3 77 34 33 73 15 35 29 8 3 21 63 4 21 75\\r\\n', 'output': ['1089\\r\\n']}, {'input': '45 1\\r\\n1 1 2 3 1 2 3 1 1 1 1 2 2 2 2 3 1 1 2 2 3 3 2 3 3 1 3 3 3 1 2 3 2 1 2 1 1 2 1 2 1 1 2 2 2\\r\\n', 'output': ['84\\r\\n']}, {'input': '50 70\\r\\n60 21 1 35 20 10 35 59 27 12 57 67 76 49 27 72 39 47 56 36 36 13 62 16 6 16 39 46 35 9 67 59 61 52 1 44 70 40 60 3 5 2 14 29 56 32 4 28 35 73\\r\\n', 'output': ['280\\r\\n']}, {'input': '55 12\\r\\n15 5 11 16 17 3 5 28 19 15 1 9 5 26 25 3 14 14 33 12 3 21 16 30 22 18 7 16 24 28 2 17 24 25 16 16 31 9 11 9 6 13 25 23 32 18 4 21 10 32 11 5 4 32 14\\r\\n', 'output': ['588\\r\\n']}, {'input': '60 10\\r\\n42 89 35 19 51 41 31 77 10 8 73 27 47 26 66 91 43 33 74 62 77 23 5 44 18 23 74 6 51 21 30 17 31 39 74 4 55 39 3 34 21 3 18 41 61 37 31 91 69 55 75 67 77 30 11 16 35 68 62 19\\r\\n', 'output': ['2240\\r\\n']}, {'input': '65 7\\r\\n1 5 4 1 4 11 9 1 11 7 6 11 9 4 2 6 10 11 10 12 4 6 1 12 12 5 1 11 7 9 11 6 10 10 7 8 4 1 3 5 2 3 2 10 11 10 5 8 7 10 12 5 11 6 8 6 2 9 9 7 2 4 12 7 7\\r\\n', 'output': ['245\\r\\n']}, {'input': '70 12\\r\\n6 8 11 13 11 30 4 26 16 24 8 12 14 25 7 26 1 24 1 9 7 19 25 11 18 23 27 26 27 19 8 10 9 20 23 2 14 27 24 24 14 21 31 5 1 14 24 20 2 1 11 17 12 7 17 20 8 21 16 17 31 25 9 25 5 18 6 19 22 27\\r\\n', 'output': ['756\\r\\n']}, {'input': '75 19\\r\\n3 35 38 25 5 17 12 37 26 34 20 3 30 33 16 26 16 31 17 5 13 40 4 40 16 4 24 31 39 13 12 3 25 40 21 2 27 26 21 2 18 24 24 25 18 3 15 20 5 6 23 10 16 37 20 13 39 4 6 28 9 25 14 7 6 15 34 9 4 16 36 19 17 30 33\\r\\n', 'output': ['817\\r\\n']}, {'input': '80 1\\r\\n7 13 38 24 17 20 11 3 25 23 36 16 41 36 18 9 33 10 37 20 8 7 42 8 17 1 39 30 39 24 36 17 8 11 3 33 23 42 36 16 36 3 30 20 29 35 43 17 32 26 33 4 41 34 9 37 14 26 6 40 16 24 8 26 16 31 11 12 18 24 42 34 24 37 5 23 32 13 8 14\\r\\n', 'output': ['1810\\r\\n']}, {'input': '85 2\\r\\n26 5 48 55 22 22 43 29 55 29 6 53 48 35 58 22 44 7 14 26 48 17 66 44 2 10 50 4 19 35 29 61 55 57 25 5 54 64 18 17 43 16 14 63 46 22 55 23 8 52 65 30 10 13 24 18 7 44 65 7 42 63 29 54 32 23 55 17 3 11 67 14 45 31 33 22 36 28 27 54 46 45 15 40 55\\r\\n', 'output': ['2796\\r\\n']}, {'input': '90 3\\r\\n44 16 62 40 33 17 53 32 66 18 68 33 18 76 14 66 41 8 18 57 39 63 9 41 30 39 30 35 46 12 27 33 6 4 21 26 32 24 18 25 35 39 14 49 65 32 54 38 55 64 75 2 53 21 72 11 46 47 63 60 33 62 13 35 40 21 26 15 66 74 55 48 24 26 76 69 65 68 62 12 74 58 21 13 53 5 40 56 66 67\\r\\n', 'output': ['3492\\r\\n']}, {'input': '91 6\\r\\n4 2 4 2 6 2 4 1 2 6 5 3 3 3 3 2 5 4 2 5 3 2 1 3 5 2 4 5 1 3 3 3 6 6 5 3 4 1 5 6 2 5 2 2 5 4 1 5 4 1 2 6 1 2 3 4 3 3 3 3 2 1 4 5 1 6 5 1 6 5 3 5 6 3 3 5 4 4 5 4 5 2 5 2 3 1 5 6 6 4 2\\r\\n', 'output': ['66\\r\\n']}, {'input': '92 8\\r\\n3 4 6 9 7 9 12 12 7 4 9 1 3 9 2 12 4 5 12 2 6 5 9 9 5 2 7 5 12 2 1 7 7 11 11 1 4 10 11 7 5 6 3 5 12 2 9 1 11 1 9 11 1 9 7 9 7 8 1 5 8 8 1 8 6 6 4 5 6 10 7 9 7 1 6 2 12 11 7 6 12 11 5 11 6 10 1 9 3 9 11 9\\r\\n', 'output': ['306\\r\\n']}, {'input': '93 10\\r\\n6 47 6 89 21 91 51 72 32 48 54 89 36 12 25 38 58 62 54 16 5 52 52 85 67 33 81 72 6 42 91 16 29 78 56 62 75 48 69 12 89 34 27 15 7 80 14 57 29 6 80 46 64 94 83 96 1 42 11 41 15 26 17 36 44 11 68 73 93 45 73 35 91 14 84 48 7 8 63 84 59 68 87 26 91 10 54 41 74 71 74 62 24\\r\\n', 'output': ['4110\\r\\n']}, {'input': '94 12\\r\\n40 66 66 35 43 23 77 6 55 44 68 90 20 59 11 95 78 13 75 98 30 22 40 29 2 23 82 26 53 48 16 100 97 100 74 96 73 30 35 72 23 38 25 86 7 45 53 20 18 77 68 95 41 45 1 94 42 94 54 9 33 84 53 71 6 68 98 94 35 78 58 34 84 78 28 65 58 11 2 78 96 5 8 36 34 26 76 10 69 49 25 9 77 30\\r\\n', 'output': ['4173\\r\\n']}, {'input': '95 17\\r\\n1 24 17 9 41 5 39 30 6 32 17 30 27 11 13 25 22 23 12 31 19 31 35 43 8 23 39 23 39 41 10 17 25 17 38 39 37 23 37 11 6 15 43 4 15 44 44 42 29 2 14 6 1 6 31 45 26 21 14 18 15 17 23 11 39 12 16 6 11 19 15 31 18 10 33 10 2 8 21 4 26 3 42 45 16 1 11 28 43 24 18 45 25 39 9\\r\\n', 'output': ['1360\\r\\n']}, {'input': '96 9\\r\\n4 5 1 10 2 6 1 9 2 6 3 2 9 4 1 1 3 10 10 4 6 8 6 4 4 6 4 6 2 9 1 9 3 6 9 10 4 3 7 2 7 4 4 4 6 4 1 7 9 4 9 2 1 7 7 3 4 10 10 5 1 3 10 5 1 9 8 4 10 4 7 2 9 6 9 4 2 3 6 9 8 1 1 2 9 4 10 4 9 7 7 5 1 10 9 10\\r\\n', 'output': ['225\\r\\n']}, {'input': '97 28\\r\\n13 12 30 2 17 29 28 28 26 10 27 27 20 14 8 28 10 5 33 19 17 31 15 4 8 13 21 23 32 3 20 9 33 17 11 13 11 9 19 30 19 25 1 18 1 13 1 20 19 9 17 31 32 26 1 34 7 34 6 22 7 13 29 6 29 3 13 28 3 6 7 29 17 34 28 32 14 33 23 25 23 11 19 19 27 27 3 20 17 13 24 2 8 25 10 31 34\\r\\n', 'output': ['672\\r\\n']}, {'input': '98 14\\r\\n23 3 39 39 6 35 2 35 38 9 11 24 42 35 35 46 23 46 20 36 25 46 23 9 21 24 21 38 43 9 9 38 38 46 3 28 17 31 30 14 29 12 37 15 5 45 46 32 35 39 39 27 25 15 42 40 19 19 11 6 32 16 25 29 46 2 45 44 5 36 21 11 14 18 39 1 39 26 18 14 1 23 38 24 10 38 14 42 15 3 8 8 23 46 40 19 14 29\\r\\n', 'output': ['1876\\r\\n']}, {'input': '99 57\\r\\n69 27 70 70 16 66 64 35 44 1 51 38 69 17 19 35 83 7 47 4 10 22 60 64 64 56 80 54 83 34 51 42 46 51 41 75 54 10 13 44 66 46 27 79 55 13 13 40 18 12 2 33 20 13 75 45 70 75 51 39 80 25 22 27 77 52 41 83 40 33 23 76 81 21 23 59 27 74 45 68 42 20 83 50 66 58 5 8 55 62 76 81 27 52 55 67 28 65 71\\r\\n', 'output': ['2030\\r\\n']}, {'input': '100 2\\r\\n2 2 1 1 1 1 1 1 1 2 2 1 1 2 2 1 1 2 1 1 1 1 1 1 2 2 2 1 1 2 1 2 1 2 2 1 1 1 1 2 1 1 1 2 2 1 1 2 1 1 2 2 2 2 2 1 2 1 2 1 1 2 1 2 2 2 2 1 2 1 2 1 2 1 2 2 2 1 1 2 2 1 2 1 1 1 1 2 1 2 2 2 1 2 1 1 1 2 2 1\\r\\n', 'output': ['92\\r\\n']}, {'input': '100 2\\r\\n79 84 2 24 18 95 57 79 67 60 78 85 75 23 68 68 76 30 39 31 32 81 42 90 50 33 49 9 63 18 74 46 34 55 48 41 7 75 74 90 14 90 2 49 20 29 33 65 43 7 11 12 58 45 17 100 1 28 3 12 26 94 45 5 45 19 3 28 95 11 71 68 89 47 59 5 74 92 43 100 15 63 78 85 70 38 62 100 78 76 29 69 64 2 32 68 48 61 82 100\\r\\n', 'output': ['4978\\r\\n']}, {'input': '100 17\\r\\n20 61 7 74 87 84 87 35 64 7 36 5 72 20 62 29 29 58 67 51 50 45 82 20 76 79 39 21 5 39 94 13 65 11 3 21 26 2 15 56 20 75 49 27 64 48 51 96 32 80 57 10 57 48 36 83 51 25 45 65 24 22 3 92 45 52 52 58 15 90 23 43 56 88 46 50 72 70 60 47 91 68 40 24 16 44 82 90 17 17 51 71 25 94 13 42 26 25 53 95\\r\\n', 'output': ['3961\\r\\n']}]","id":148,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, l = map(int, input().split())\\n    a = list(map(int, input().split()))\\n    \\n    max_area = 0\\n    \\n    for d in range(l, 101):\\n        count = 0\\n        for length in a:\\n            count += length \/\/ d\\n        \\n        if count > 0:\\n            max_area = max(max_area, count * d)\\n            \\n    print(max_area)\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, l = map(int, input().split())\\n    a = list(map(int, input().split()))\\n    \\n    max_area = 0\\n    \\n    for d in range(l, 101):\\n        count = 0\\n        for length in a:\\n            count += length \/\/ d\\n        \\n        if count > 0:\\n            max_area = max(max_area, count * d) \\n    \\n    print(max_area)\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, l = map(int, input().split())\\n    a = list(map(int, input().split()))\\n    \\n    max_area = 0\\n    \\n    for d in range(l, 101):\\n        count = 0\\n        for length in a:\\n            count += length \/\/ d\\n        \\n        if count > 0:\\n            max_area = max(max_area, count * d)\\n            \\n    print(max_area)\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, l = map(int, input().split())\\n    a = list(map(int, input().split()))\\n    \\n    max_area = 0\\n    \\n    for d in range(l, 101):\\n        count = 0\\n        for length in a:\\n            count += length \/\/ d\\n        \\n        if count > 0:\\n            max_area = max(max_area, count * d) \\n    \\n    print(max_area)\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"Vasya decided to write an anonymous letter cutting the letters out of a newspaper heading. He knows heading s1 and text s2 that he wants to send. Vasya can use every single heading letter no more than once. Vasya doesn't have to cut the spaces out of the heading \u2014 he just leaves some blank space to mark them. Help him; find out if he will manage to compose the needed text.","input_specification":"The first line contains a newspaper heading s1. The second line contains the letter text s2. s1 \u0438 s2 are non-empty lines consisting of spaces, uppercase and lowercase Latin letters, whose lengths do not exceed 200 symbols. The uppercase and lowercase letters should be differentiated. Vasya does not cut spaces out of the heading.","output_specification":"If Vasya can write the given anonymous letter, print YES, otherwise print NO","notes":null,"sample_inputs":["Instead of dogging Your footsteps it disappears but you dont notice anything\nwhere is your dog","Instead of dogging Your footsteps it disappears but you dont notice anything\nYour dog is upstears","Instead of dogging your footsteps it disappears but you dont notice anything\nYour dog is upstears","abcdefg hijk\nk j i h g f e d c b a"],"sample_outputs":["NO","YES","NO","YES"],"src_uid":"b1ef19d7027dc82d76859d64a6f43439","lang_cluster":"Python","difficulty":1100,"human_solution":"import collections\nl=list(input())\np=list(input())\n#print(p)\n#print(l)\ncl=collections.Counter(l)\npl=collections.Counter(p)\n#print(cl)\n#print(pl)\nplk=list(pl.keys())\n#print(plk)\nif ' ' in plk:\n    plk.remove(' ')\nelse:\n    pass\nn=len(plk)\ni=0\ner=0\n#print(cl['s'])\nwhile i<n:\n    h=plk[i]\n    t=cl[h]\n    q=pl[h]\n    #print(t)\n    #print(q)\n    if t>=q:\n        er+=1\n    else:\n        pass\n    i+=1\n#print(n)\n#print(er)\nif er==n:\n    print('YES')\n\nelse:\n    print('NO')\n\n\n","testcases":"[{'input': 'Instead of dogging Your footsteps it disappears but you dont notice anything\\r\\nwhere is your dog\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'Instead of dogging Your footsteps it disappears but you dont notice anything\\r\\nYour dog is upstears\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'Instead of dogging your footsteps it disappears but you dont notice anything\\r\\nYour dog is upstears\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'abcdefg hijk\\r\\nk j i h g f e d c b a\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'HpOKgo\\r\\neAtAVB\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'GRZGc\\r\\nLPzD\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'GtPXu\\r\\nd\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'FVF\\r\\nr \\r\\n', 'output': ['NO\\r\\n']}, {'input': 'HpOKgo\\r\\nogK\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GRZGc\\r\\nZG\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'HpOKgoueAtAVBdGffvQheJDejNDHhhwyKJisugiRAH OseK yUwqPPNuThUxTfthqIUeb wS jChGOdFDarNrKRT  MlwKecxWNoKEeD BbiHAruE XMlvKYVsJGPP\\r\\nAHN  XvoaNwV  AVBKwKjr u      U K wKE D K   Jy KiHsR h d W  Js IHyMPK Br iSqe  E fDA   g H\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GRZGcsLPzDrCSXhhNTaibJqVphhjbcPoZhCDUlzAbDnRWjHvxLKtpGiFWiGbfeDxBwCrdJmJGCGv GebAOinUsFrlqKTILOmxrFjSpEoVGoTdSSstJWVgMLKMPettxHASaQZNdOIObcTxtF qTHWBdNIKwj\\r\\nWqrxze Ji x q aT GllLrRV jMpGiMDTwwS JDsPGpAZKACmsFCOS CD Sj  bCDgKF  jJxa RddtLFAi VGLHH SecObzG q  hPF \\r\\n', 'output': ['YES\\r\\n']}, {'input': 'GtPXuwdAxNhODQbjRslDDKciOALJrCifTjDQurQEBeFUUSZWwCZQPdYwZkYbrduMijFjgodAOrKIuUKwSXageZuOWMIhAMexyLRzFuzuXqBDTEaWMzVdbzhxDGSJC SsIYuYILwpiwwcObEHWpFvHeBkWYNitqYrxqgHReHcKnHbtjcWZuaxPBVPb\\r\\nTQIKyqFaewOkY lZUOOuxEw EwuKcArxRQGFYkvVWIAe SuanPeHuDjquurJu aSxwgOSw jYMwjxItNUUArQjO BIujAhSwttLWp\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'FVFSr unvtXbpKWF vPaAgNaoTqklzVqiGYcUcBIcattzBrRuNSnKUtmdGKbjcE\\r\\nUzrU K  an GFGR        Wc zt iBa     P c    T K v p     V In   b           B   c\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'lSwjnYLYtDNIZjxHiTawdh ntSzggZogcIZTuiTMWVgwyloMtEhqkrOxgIcFvwvsboXUPILPIymFAEXnhApewJXJNtFyZ\\r\\nAoxe  jWZ u  yImg  o AZ FNI w lpj  tNhT g y  ZYcb rc J    w Dlv\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'kvlekcdJqODUKdsJlXkRaileTmdGwUHWWgvgUokQxRzzbpFnswvNKiDnjfOFGvFcnaaiRnBGQmqoPxDHepgYasLhzjDgmvaFfVNEcSPVQCJKAbSyTGpXsAjIHr\\r\\nGjzUllNaGGKXUdYmDFpqFAKIwvTpjmqnyswWRTnxlBnavAGvavxJemrjvRJc\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'kWbvhgvvoYOhwXmgTwOSCDXrtFHhqwvMlCvsuuAUXMmWaYXiqHplFZZemhgkTuvsUtIaUxtyYauBIpjdbyYxjZ ZkaBPzwqPfqF kCqGRmXvWuabnQognnkvdNDtRUsSUvSzgBuxCMBWJifbxWegsknp\\r\\nBsH   bWHJD n Ca T xq  PRCv  tatn Wjy sm  I q s WCjFqdWe  t W XUs  Do  eb Pfh ii  hTbF  O Fll\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'OTmLdkMhmDEOMQMiW ZpzEIjyElHFrNCfFQDp SZyoZaEIUIpyCHfwOUqiSkKtFHggrTBGkqfOxkChPztmPrsHoxVwAdrxbZLKxPXHlMnrkgMgiaHFopiFFiUEtKwCjpJtwdwkbJCgA bxeDIscFdmHQJLAMNhWlrZisQrHQpvbALWTwpf jnx\\r\\nDbZwrQbydCdkJMCrftiwtPFfpMiwwrfIrKidEChKECxQUBVUEfFirbGWiLkFQkdJiFtkrtkbIAEXCEDkwLpK\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'NwcGaIeSkOva\\r\\naIa\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'gSrAcVYgAdbdayzbKGhIzLDjyznLRIJH KyvilAaEddmgkBPCNzpmPNeGEbmmpAyHvUSoPvnaORrPUuafpReEGoDOQsAYnUHYfBqhdcopQfxJuGXgKnbdVMQNhJYkyjiJDKlShqBTtnnDQQzEijOMcYRGMgPGVhfIReYennKBLwDTVvcHMIHMgVpJkvzTrezxqS\\r\\nHJerIVvRyfrPgAQMTI AqGNO mQDfDwQHKgeeYmuRmozKHILvehMPOJNMRtPTAfvKvsoGKi xHEeKqDAYmQJPUXRJbIbHrgVOMGMTdvYiLui\\r\\n', 'output': ['YES\\r\\n']}, {'input': 'ReB hksbHqQXxUgpvoNK bFqmNVCEiOyKdKcAJQRkpeohpfuqZabvrLfmpZOMcfyFBJGZwVMxiUPP pbZZtJjxhEwvrAba\\r\\nJTCpQnIViIGIdQtLnmkVzmcbBZR CoxAdTtWSYpbOglDFifqIVQ vfGKGtLpxpJHiHSWCMeRcrVOXBGBhoEnVhNTPWGTOErNtSvokcGdgZXbgTEtISUyTwaXUEIlJMmutsdCbiyrPZPJyRdOjnSuAGttLy\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'hrLzRegCuDGxTrhDgVvM KowwyYuXGzIpcXdSMgeQVfVOtJZdkhNYSegwFWWoPqcZoeapbQnyCtojgkcyezUNHGGIZrhzsKrvvcrtokIdcnqXXkCNKjrOjrnEAKBNxyDdiMVeyLvXxUYMZQRFdlcdlcxzKTeYzBlmpNiwWbNAAhWkMoGpRxkCuyqkzXdKWwGH\\r\\nJESKDOfnFdxPvUOCkrgSBEPQHJtJHzuNGstRbTCcchRWJvCcveSEAtwtOmZZiW\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'yDBxCtUygQwWqONxQCcuAvVCkMGlqgC zvkfEkwqbhMCQxnkwQIUhucCbVUyOBUcXvTNEGriTBwMDMfdsPZgWRgIUDqM\\r\\neptVnORTTyixxmWIBpSTEwOXqGZllBgSxPenYCDlFwckJlWsoVwWLAIbPOmFqcKcTcoQqahetl KLfVSyaLVebzsGwPSVbtQAeUdZAaJtfxlCEvvaRhLlVvRJhKat IaB awdqcDlrrhTbRxjEbzGwcdmdavkhcjHjzmwbxAgw\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'jlMwnnotSdlQMluKWkJwAeCetcqbIEnKeNyLWoKCGONDRBQOjbkGpUvDlmSFUJ bWhohqmmIUWTlDsvelUArAcZJBipMDwUvRfBsYzMdQnPDPAuBaeJmAxVKwUMJrwMDxNtlrtAowVWqWiwFGtmquZAcrpFsLHCrvMSMMlvQUqypAihQWrFMNoaqfs IBg\\r\\nNzeWQ bafrmDsYlpNHSGTBBgPl WIcuNhyNaNOEFvL\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'zyWvXBcUZqGqjHwZHQryBtFliLYnweXAoMKNpLaunaOlzaauWmLtywsEvWPiwxJapocAFRMjrqWJXYqfKEbBKnzLO\\r\\npsbi bsXpSeJaCkIuPWfSRADXdIClxcDCowwJzGCDTyAl\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'kKhuIwRPLCwPFfcnsyCfBdnsraGeOCcLTfXuGjqFSGPSAeDZJSS bXKFanNqWjpFnvRpWxHJspvisDlADJBioxXNbVoXeUedoPcNEpUyEeYxdJXhGzFAmpAiHotSVwbZQsuWjIVhVaEGgqbZHIoDpiEmjTtFylCwCkWWzUOoUfOHxEZvDwNpXhBWamHn\\r\\nK VpJjGhNbwCRhcfmNGVjewBFpEmPlIKeTuWiukDtEWpjgqciqglkyNfWrBLbGAKvlNWxaUelJmSlSoakSpRzePvJsshOsTYrMPXdxKpaShjyVIXGhRIAdtiGpNwtiRmGTBZhkJqIMdxMHX RMxCMYcWjcjhtCHyFnCvjjezGbkRDRiVxkbh\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'AXssNpFKyQmJcBdBdfkhhMUzfqJVgcLBddkwtnFSzSRUCjiDcdtmkzIGkCKSxWUEGhmHmciktJyGMkgCductyHx\\r\\nI nYhmJfPnvoKUiXYUBIPIcxNYTtvwPUoXERZvY ahlDpQFNMmVZqEBiYqYlHNqcpSCmhFczBlOAhsYFeqMGfqL EJsDNOgwoJfBzqijKOFcYQ\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'lkhrzDZmkdbjzYKPNMRkiwCFoZsMzBQMnxxdKKVJezSBjnLjPpUYtabcPTIaDJeDEobbWHdKOdVfMQwDXzDDcSrwVenDEYpMqfiOQ xSsqApWnAMoyhQXCKFzHvvzvUvkWwmwZrvZz\\r\\nsUzGspYpRFsHRbRgTQuCBgnFgPkisTUfFNwyEEWWRiweWWgjRkVQxgTwxOzdsOwfrGIH O gCXpzvHzfItuEHaihmugEyymSJIogYwX qAwcwIItidfnzZDhZgQHi eRjMAeVkJHceDZuJkmxGowOsmcGYYvk Ajtgi TxwihvjLViNZjvscTWvsaQUelTSivLShhEl\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'BRsVjyNhrqRHVwrJzuzRigEhdpbDmaACSPfed\\r\\nlWqKTjlrqOCUbgBBZdZDGCeQJDXawPnnDkQdZDgwrEQk\\r\\n', 'output': ['NO\\r\\n']}, {'input': 'KRmINuyBYPwiTsdlyiNVuylToysJKmOpcLovAtwGPqrgFJQNAYvuAiyQRkeFMECVZvkDEmTauXlyjAaYRnTJXORMZRnTakBaUzSelMilejySDIZjQjzcOIrwXdvDvpeRIkoBgreyFXIyyIZutjiEBtwrmzQtPVUhvvdEtDMbXjBpoPVjGdM EXTAK JbCnw\\r\\nXZZqlJvzKKtvdNlzFPDTYxidqlsgufVzyEmO FZuLQ vVQsJESNviUCovCK NwwlbxsmPtOJNmAonCqrOZ bZ LVKAsQGmoLnYjeekvEIECFk\\r\\n', 'output': ['NO\\r\\n']}]","id":149,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    s1 = input()\\n    s2 = input()\\n    \\n    s1_chars = {}\\n    for char in s1:\\n        if char != ' ':\\n            s1_chars[char] = s1_chars.get(char, 0) + 1\\n    \\n    for char in s2:\\n        if char != ' ':\\n            if char not in s1_chars or s1_chars[char] == 0:\\n                print(\\\"NO\\\")\\n                return\\n            else:\\n                s1_chars[char] -= 1\\n    \\n    print(\\\"YES\\\")\\n\\nsolve()\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    s1 = raw_input()\\n    s2 = raw_input()\\n    \\n    s1_chars = {}\\n    for char in s1:\\n        if char != ' ':\\n            s1_chars[char] = s1_chars.get(char, 0) + 1\\n    \\n    for char in s2:\\n        if char != ' ':\\n            if char not in s1_chars or s1_chars[char] == 0:\\n                print \\\"NO\\\"\\n                return\\n            else:\\n                s1_chars[char] -= 1\\n    \\n    print \\\"YES\\\"\\n\\nsolve()\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    s1 = input()\\n    s2 = input()\\n    \\n    s1_chars = {}\\n    for char in s1:\\n        if char != ' ':\\n            s1_chars[char] = s1_chars.get(char, 0) + 1\\n            \\n    for char in s2:\\n        if char != ' ':\\n            if char not in s1_chars or s1_chars[char] == 0:\\n                print(\\\"NO\\\")\\n                return\\n            else:\\n                s1_chars[char] -= 1\\n                \\n    print(\\\"YES\\\")\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    s1 = raw_input()\\n    s2 = raw_input()\\n    \\n    s1_chars = {}\\n    for char in s1:\\n        if char != ' ':\\n            s1_chars[char] = s1_chars.get(char, 0) + 1\\n            \\n    for char in s2:\\n        if char != ' ':\\n            if char not in s1_chars or s1_chars[char] == 0:\\n                print \\\"NO\\\"\\n                return\\n            else:\\n                s1_chars[char] -= 1\\n                \\n    print \\\"YES\\\"\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    s1 = input()\\n    s2 = input()\\n    \\n    s1_chars = {}\\n    for char in s1:\\n        if char != ' ':\\n            s1_chars[char] = s1_chars.get(char, 0) + 1\\n    \\n    for char in s2:\\n        if char != ' ':\\n            if char not in s1_chars or s1_chars[char] == 0:\\n                print(\\\"NO\\\")\\n                return\\n            else:\\n                s1_chars[char] -= 1\\n    \\n    print(\\\"YES\\\")\\n\\nsolve()\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    s1 = raw_input()\\n    s2 = raw_input()\\n    \\n    s1_chars = {}\\n    for char in s1:\\n        if char != ' ':\\n            s1_chars[char] = s1_chars.get(char, 0) + 1\\n    \\n    for char in s2:\\n        if char != ' ':\\n            if char not in s1_chars or s1_chars[char] == 0:\\n                print \\\"NO\\\"\\n                return\\n            else:\\n                s1_chars[char] -= 1\\n    \\n    print \\\"YES\\\"\\n\\nsolve()\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    s1 = input()\\n    s2 = input()\\n    \\n    s1_chars = {}\\n    for char in s1:\\n        if char != ' ':\\n            s1_chars[char] = s1_chars.get(char, 0) + 1\\n            \\n    for char in s2:\\n        if char != ' ':\\n            if char not in s1_chars or s1_chars[char] == 0:\\n                print(\\\"NO\\\")\\n                return\\n            else:\\n                s1_chars[char] -= 1\\n                \\n    print(\\\"YES\\\")\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    s1 = raw_input()\\n    s2 = raw_input()\\n    \\n    s1_chars = {}\\n    for char in s1:\\n        if char != ' ':\\n            s1_chars[char] = s1_chars.get(char, 0) + 1\\n            \\n    for char in s2:\\n        if char != ' ':\\n            if char not in s1_chars or s1_chars[char] == 0:\\n                print \\\"NO\\\"\\n                return\\n            else:\\n                s1_chars[char] -= 1\\n                \\n    print \\\"YES\\\"\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"A kindergarten teacher Natalia Pavlovna has invented a new ball game. This game not only develops the children's physique, but also teaches them how to count. The game goes as follows. Kids stand in circle. Let's agree to think of the children as numbered with numbers from 1 to n clockwise and the child number 1 is holding the ball. First the first child throws the ball to the next one clockwise, i.e. to the child number 2. Then the child number 2 throws the ball to the next but one child, i.e. to the child number 4, then the fourth child throws the ball to the child that stands two children away from him, i.e. to the child number 7, then the ball is thrown to the child who stands 3 children away from the child number 7, then the ball is thrown to the child who stands 4 children away from the last one, and so on. It should be mentioned that when a ball is thrown it may pass the beginning of the circle. For example, if n\u2009=\u20095, then after the third throw the child number 2 has the ball again. Overall, n\u2009-\u20091 throws are made, and the game ends.The problem is that not all the children get the ball during the game. If a child doesn't get the ball, he gets very upset and cries until Natalia Pavlovna gives him a candy. That's why Natalia Pavlovna asks you to help her to identify the numbers of the children who will get the ball after each throw.","input_specification":"The first line contains integer n (2\u2009\u2264\u2009n\u2009\u2264\u2009100) which indicates the number of kids in the circle.","output_specification":"In the single line print n\u2009-\u20091 numbers which are the numbers of children who will get the ball after each throw. Separate the numbers by spaces.","notes":null,"sample_inputs":["10","3"],"sample_outputs":["2 4 7 1 6 2 9 7 6","2 1"],"src_uid":"7170c40405cf7a5e0f2bd15e4c7d189d","lang_cluster":"Python","difficulty":800,"human_solution":"def main():\n    n = input()\n    pos = 0\n    for i in range(1, n):\n        pos = (pos + i) % n\n        print pos + 1,\n\nif __name__ == '__main__':\n    main()\n","testcases":"[{'input': '10\\r\\n', 'output': ['2 4 7 1 6 2 9 7 6\\r\\n']}, {'input': '3\\r\\n', 'output': ['2 1\\r\\n']}, {'input': '4\\r\\n', 'output': ['2 4 3\\r\\n']}, {'input': '5\\r\\n', 'output': ['2 4 2 1\\r\\n']}, {'input': '6\\r\\n', 'output': ['2 4 1 5 4\\r\\n']}, {'input': '7\\r\\n', 'output': ['2 4 7 4 2 1\\r\\n']}, {'input': '8\\r\\n', 'output': ['2 4 7 3 8 6 5\\r\\n']}, {'input': '9\\r\\n', 'output': ['2 4 7 2 7 4 2 1\\r\\n']}, {'input': '2\\r\\n', 'output': ['2\\r\\n']}, {'input': '11\\r\\n', 'output': ['2 4 7 11 5 11 7 4 2 1\\r\\n']}, {'input': '12\\r\\n', 'output': ['2 4 7 11 4 10 5 1 10 8 7\\r\\n']}, {'input': '13\\r\\n', 'output': ['2 4 7 11 3 9 3 11 7 4 2 1\\r\\n']}, {'input': '20\\r\\n', 'output': ['2 4 7 11 16 2 9 17 6 16 7 19 12 6 1 17 14 12 11\\r\\n']}, {'input': '25\\r\\n', 'output': ['2 4 7 11 16 22 4 12 21 6 17 4 17 6 21 12 4 22 16 11 7 4 2 1\\r\\n']}, {'input': '30\\r\\n', 'output': ['2 4 7 11 16 22 29 7 16 26 7 19 2 16 1 17 4 22 11 1 22 14 7 1 26 22 19 17 16\\r\\n']}, {'input': '35\\r\\n', 'output': ['2 4 7 11 16 22 29 2 11 21 32 9 22 1 16 32 14 32 16 1 22 9 32 21 11 2 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '40\\r\\n', 'output': ['2 4 7 11 16 22 29 37 6 16 27 39 12 26 1 17 34 12 31 11 32 14 37 21 6 32 19 7 36 26 17 9 2 36 31 27 24 22 21\\r\\n']}, {'input': '45\\r\\n', 'output': ['2 4 7 11 16 22 29 37 1 11 22 34 2 16 31 2 19 37 11 31 7 29 7 31 11 37 19 2 31 16 2 34 22 11 1 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '50\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 6 17 29 42 6 21 37 4 22 41 11 32 4 27 1 26 2 29 7 36 16 47 29 12 46 31 17 4 42 31 21 12 4 47 41 36 32 29 27 26\\r\\n']}, {'input': '55\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 1 12 24 37 51 11 27 44 7 26 46 12 34 2 26 51 22 49 22 51 26 2 34 12 46 26 7 44 27 11 51 37 24 12 1 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '60\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 7 19 32 46 1 17 34 52 11 31 52 14 37 1 26 52 19 47 16 46 17 49 22 56 31 7 44 22 1 41 22 4 47 31 16 2 49 37 26 16 7 59 52 46 41 37 34 32 31\\r\\n']}, {'input': '65\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 2 14 27 41 56 7 24 42 61 16 37 59 17 41 1 27 54 17 46 11 42 9 42 11 46 17 54 27 1 41 17 59 37 16 61 42 24 7 56 41 27 14 2 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '70\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 9 22 36 51 67 14 32 51 1 22 44 67 21 46 2 29 57 16 46 7 39 2 36 1 37 4 42 11 51 22 64 37 11 56 32 9 57 36 16 67 49 32 16 1 57 44 32 21 11 2 64 57 51 46 42 39 37 36\\r\\n']}, {'input': '75\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 4 17 31 46 62 4 22 41 61 7 29 52 1 26 52 4 32 61 16 47 4 37 71 31 67 29 67 31 71 37 4 47 16 61 32 4 52 26 1 52 29 7 61 41 22 4 62 46 31 17 4 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '80\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 12 26 41 57 74 12 31 51 72 14 37 61 6 32 59 7 36 66 17 49 2 36 71 27 64 22 61 21 62 24 67 31 76 42 9 57 26 76 47 19 72 46 21 77 54 32 11 71 52 34 17 1 66 52 39 27 16 6 77 69 62 56 51 47 44 42 41\\r\\n']}, {'input': '85\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 7 21 36 52 69 2 21 41 62 84 22 46 71 12 39 67 11 41 72 19 52 1 36 72 24 62 16 56 12 54 12 56 16 62 24 72 36 1 52 19 72 41 11 67 39 12 71 46 22 84 62 41 21 2 69 52 36 21 7 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '90\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 2 16 31 47 64 82 11 31 52 74 7 31 56 82 19 47 76 16 47 79 22 56 1 37 74 22 61 11 52 4 47 1 46 2 49 7 56 16 67 29 82 46 11 67 34 2 61 31 2 64 37 11 76 52 29 7 76 56 37 19 2 76 61 47 34 22 11 1 82 74 67 61 56 52 49 47 46\\r\\n']}, {'input': '95\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 11 26 42 59 77 1 21 42 64 87 16 41 67 94 27 56 86 22 54 87 26 61 2 39 77 21 61 7 49 92 41 86 37 84 37 86 41 92 49 7 61 21 77 39 2 61 26 87 54 22 86 56 27 94 67 41 16 87 64 42 21 1 77 59 42 26 11 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '96\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 10 25 41 58 76 95 19 40 62 85 13 38 64 91 23 52 82 17 49 82 20 55 91 32 70 13 53 94 40 83 31 76 26 73 25 74 28 79 35 88 46 5 61 22 80 43 7 68 34 1 65 34 4 71 43 16 86 61 37 14 88 67 47 28 10 89 73 58 44 31 19 8 94 85 77 70 64 59 55 52 50 49\\r\\n']}, {'input': '97\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 9 24 40 57 75 94 17 38 60 83 10 35 61 88 19 48 78 12 44 77 14 49 85 25 63 5 45 86 31 74 21 66 15 62 13 62 15 66 21 74 31 86 45 5 63 25 85 49 14 77 44 12 78 48 19 88 61 35 10 83 60 38 17 94 75 57 40 24 9 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '98\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 8 23 39 56 74 93 15 36 58 81 7 32 58 85 15 44 74 7 39 72 8 43 79 18 56 95 37 78 22 65 11 56 4 51 1 50 2 53 7 60 16 71 29 86 46 7 67 30 92 57 23 88 56 25 93 64 36 9 81 56 32 9 85 64 44 25 7 88 72 57 43 30 18 7 95 86 78 71 65 60 56 53 51 50\\r\\n']}, {'input': '99\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 7 22 38 55 73 92 13 34 56 79 4 29 55 82 11 40 70 2 34 67 2 37 73 11 49 88 29 70 13 56 1 46 92 40 88 38 88 40 92 46 1 56 13 70 29 88 49 11 73 37 2 67 34 2 70 40 11 82 55 29 4 79 56 34 13 92 73 55 38 22 7 92 79 67 56 46 37 29 22 16 11 7 4 2 1\\r\\n']}, {'input': '100\\r\\n', 'output': ['2 4 7 11 16 22 29 37 46 56 67 79 92 6 21 37 54 72 91 11 32 54 77 1 26 52 79 7 36 66 97 29 62 96 31 67 4 42 81 21 62 4 47 91 36 82 29 77 26 76 27 79 32 86 41 97 54 12 71 31 92 54 17 81 46 12 79 47 16 86 57 29 2 76 51 27 4 82 61 41 22 4 87 71 56 42 29 17 6 96 87 79 72 66 61 57 54 52 51\\r\\n']}]","id":150,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nball_holder = 1\\nthrows = []\\nfor i in range(1, n):\\n    ball_holder = (ball_holder + i) % n\\n    if ball_holder == 0:\\n        ball_holder = n\\n    throws.append(str(ball_holder))\\nprint(' '.join(throws))\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nball_holder = 1\\nthrows = []\\nfor i in range(1, n):\\n    ball_holder = (ball_holder + i) % n\\n    if ball_holder == 0:\\n        ball_holder = n\\n    throws.append(str(ball_holder))\\nprint ' '.join(throws)\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\ncurrent_child = 1\\nfor i in range(1, n):\\n    next_child = (current_child + i) % n\\n    if next_child == 0:\\n        next_child = n\\n    print(next_child, end=\\\" \\\")\\n    current_child = next_child\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\ncurrent_child = 1\\nfor i in range(1, n):\\n    next_child = (current_child + i) % n\\n    if next_child == 0:\\n        next_child = n\\n    print next_child, \\n    current_child = next_child\\n\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\nball_holder = 1\\nthrows = []\\nfor i in range(1, n):\\n    ball_holder = (ball_holder + i) % n\\n    if ball_holder == 0:\\n        ball_holder = n\\n    throws.append(str(ball_holder))\\nprint(' '.join(throws))\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\nball_holder = 1\\nthrows = []\\nfor i in range(1, n):\\n    ball_holder = (ball_holder + i) % n\\n    if ball_holder == 0:\\n        ball_holder = n\\n    throws.append(str(ball_holder))\\nprint ' '.join(throws)\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\ncurrent_child = 1\\nfor i in range(1, n):\\n    next_child = (current_child + i) % n\\n    if next_child == 0:\\n        next_child = n\\n    print(next_child, end=\\\" \\\")\\n    current_child = next_child\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\ncurrent_child = 1\\nfor i in range(1, n):\\n    next_child = (current_child + i) % n\\n    if next_child == 0:\\n        next_child = n\\n    print next_child, \\n    current_child = next_child\\n\"\n  }\n]\n```"}
{"description":"Bob likes to draw camels: with a single hump, two humps, three humps, etc. He draws a camel by connecting points on a coordinate plane. Now he's drawing camels with t humps, representing them as polylines in the plane. Each polyline consists of n vertices with coordinates (x1,y1), (x2,y2), ..., (xn,yn). The first vertex has a coordinate x1=1, the second \u2014 x2=2, etc. Coordinates yi might be any, but should satisfy the following conditions:  there should be t humps precisely, i.e. such indexes j (2\u2264j\u2264n-1), so that yj-1<yj>yj+1,  there should be precisely t-1 such indexes j (2\u2264j\u2264n-1), so that yj-1>yj<yj+1,  no segment of a polyline should be parallel to the Ox-axis,  all yi are integers between 1 and 4. For a series of his drawings of camels with t humps Bob wants to buy a notebook, but he doesn't know how many pages he will need. Output the amount of different polylines that can be drawn to represent camels with t humps for a given number n.","input_specification":"The first line contains a pair of integers n and t (3\u2264n\u226420, 1\u2264t\u226410).\n","output_specification":"Output the required amount of camels with t humps.\n","notes":"In the first sample test sequences of y-coordinates for six camels are: 123421, 123431, 123432, 124321, 134321 \u0438 234321 (each digit corresponds to one value of yi).\n","sample_inputs":["6 1\n","4 2\n"],"sample_outputs":["6\n","0\n"],"src_uid":"14_E","lang_cluster":"Python","difficulty":1900,"human_solution":"import itertools\r\nimport math\r\nimport time\r\nfrom builtins import input\r\nfrom math import gcd as gcd\r\nimport sys\r\nimport queue\r\nimport itertools\r\nimport collections\r\nfrom heapq import heappop, heappush\r\nimport random\r\nimport os\r\nfrom random import randint\r\nimport decimal\r\n\r\n# from sys import stdin, stdout\r\n# input, print = stdin.readline, stdout.write\r\n\r\ndecimal.getcontext().prec = 18\r\n\r\n\r\ndef solve():\r\n    n, t = map(int, input().split())\r\n\r\n    # dp[len][kol_gorbov][vozrast?][poslednya_cifra]\r\n\r\n    # pc_i < pc_i-1\r\n    # dp[l][g][pg = 0][pc] += dp[l - 1][g][pg = 1][pc] + dp[l - 1][g][pg = 0][pc]\r\n    # dp[l][g][pg = 1][pc] += 0\r\n\r\n    # pc_i > pc_i-1\r\n    # dp[l][g][pg = 1][pc] = dp[l - 1][g - 1][pg = 0][pc]\r\n    # dp[l][g][pg = 0][pc] = dp[l - 1][g][pg = 0][pc]\r\n\r\n    # answer in dp[n][t][0][1 <= i <= 4]\r\n\r\n    dp = [[[[0 for l in range(4)] for k in range(2)] for j in range(t + 2)] for i in range(n)]\r\n\r\n    for i in range(4):\r\n        dp[0][0][1][i] = 1\r\n\r\n    for l in range(1, n):\r\n        for g in range(t + 2):\r\n            for curr_last in range(4):\r\n                for prev_last in range(4):\r\n                    if curr_last == prev_last:\r\n                        continue\r\n                    if curr_last < prev_last:\r\n                        dp[l][g][0][curr_last] += dp[l - 1][g][0][prev_last]\r\n                        if g > 0 and l > 1:\r\n                            dp[l][g][0][curr_last] += dp[l - 1][g - 1][1][prev_last]\r\n                    else:\r\n                        dp[l][g][1][curr_last] += dp[l - 1][g][0][prev_last] + dp[l - 1][g][1][prev_last]\r\n\r\n    print(sum([dp[n - 1][t][0][i] for i in range(4)]))\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    multi_test = 0\r\n\r\n    if multi_test == 1:\r\n        t = int(sys.stdin.readline())\r\n        for _ in range(t):\r\n            solve()\r\n    else:\r\n        solve()\r\n","testcases":"[{'input': ['6 1\\r\\n'], 'output': ['6\\r\\n']}, {'input': ['4 2\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['3 1\\r\\n'], 'output': ['14\\r\\n']}, {'input': ['3 2\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['3 3\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['3 10\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['4 1\\r\\n'], 'output': ['22\\r\\n']}, {'input': ['4 3\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['4 9\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['5 1\\r\\n'], 'output': ['16\\r\\n']}, {'input': ['5 2\\r\\n'], 'output': ['70\\r\\n']}, {'input': ['5 3\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['5 5\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['5 9\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['5 10\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['6 1\\r\\n'], 'output': ['6\\r\\n']}, {'input': ['6 2\\r\\n'], 'output': ['232\\r\\n']}, {'input': ['6 3\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['6 4\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['6 10\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['19 1\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['19 2\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['19 3\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['19 4\\r\\n'], 'output': ['32632\\r\\n']}, {'input': ['19 5\\r\\n'], 'output': ['4594423\\r\\n']}, {'input': ['19 6\\r\\n'], 'output': ['69183464\\r\\n']}, {'input': ['19 7\\r\\n'], 'output': ['197939352\\r\\n']}, {'input': ['19 8\\r\\n'], 'output': ['109824208\\r\\n']}, {'input': ['19 9\\r\\n'], 'output': ['5846414\\r\\n']}, {'input': ['19 10\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['20 1\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['20 2\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['20 3\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['20 4\\r\\n'], 'output': ['12628\\r\\n']}, {'input': ['20 5\\r\\n'], 'output': ['3715462\\r\\n']}, {'input': ['20 6\\r\\n'], 'output': ['96046590\\r\\n']}, {'input': ['20 7\\r\\n'], 'output': ['468541040\\r\\n']}, {'input': ['20 8\\r\\n'], 'output': ['503245466\\r\\n']}, {'input': ['20 9\\r\\n'], 'output': ['90700276\\r\\n']}, {'input': ['20 10\\r\\n'], 'output': ['0\\r\\n']}]","id":151,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, t = map(int, input().split())\\n    count = 0\\n\\n    def check(arr):\\n        humps = 0\\n        valleys = 0\\n        for i in range(1, len(arr) - 1):\\n            if arr[i-1] < arr[i] > arr[i+1]:\\n                humps += 1\\n            elif arr[i-1] > arr[i] < arr[i+1]:\\n                valleys += 1\\n        return humps == t and valleys == t - 1\\n\\n    def generate(index, current_arr):\\n        nonlocal count\\n        if index == n:\\n            if check(current_arr):\\n                count += 1\\n            return\\n\\n        for i in range(1, 5):\\n            if index > 0 and i == current_arr[-1]:\\n                continue\\n            generate(index + 1, current_arr + [i])\\n\\n    generate(0, [])\\n    print(count)\\n\\nsolve()\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n, t = map(int, raw_input().split())\\n    count = 0\\n\\n    def check(arr):\\n        humps = 0\\n        valleys = 0\\n        for i in range(1, len(arr) - 1):\\n            if arr[i-1] < arr[i] > arr[i+1]:\\n                humps += 1\\n            elif arr[i-1] > arr[i] < arr[i+1]:\\n                valleys += 1\\n        return humps == t and valleys == t - 1\\n\\n    def generate(index, current_arr):\\n        global count\\n        if index == n:\\n            if check(current_arr):\\n                count += 1\\n            return\\n\\n        for i in range(1, 5):\\n            if index > 0 and i == current_arr[-1]:\\n                continue\\n            generate(index + 1, current_arr + [i])\\n\\n    generate(0, [])\\n    print count\\n\\nsolve()\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def count_camels(n, t):\\n    count = 0\\n    def check_camel(arr):\\n        humps = 0\\n        valleys = 0\\n        for i in range(1, len(arr) - 1):\\n            if arr[i-1] < arr[i] > arr[i+1]:\\n                humps += 1\\n            elif arr[i-1] > arr[i] < arr[i+1]:\\n                valleys += 1\\n        if humps == t and valleys == t - 1:\\n            return True\\n        return False\\n\\n    def generate_sequences(index, current_sequence):\\n        nonlocal count\\n        if index == n:\\n            if check_camel(current_sequence):\\n                count += 1\\n            return\\n\\n        for i in range(1, 5):\\n            if index > 0 and i == current_sequence[-1]:\\n                continue\\n            generate_sequences(index + 1, current_sequence + [i])\\n\\n    generate_sequences(0, [])\\n    return count\\n\\n\\nn, t = map(int, input().split())\\nprint(count_camels(n, t))\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def count_camels(n, t):\\n    count = 0\\n    def check_camel(arr):\\n        humps = 0\\n        valleys = 0\\n        for i in range(1, len(arr) - 1):\\n            if arr[i-1] < arr[i] > arr[i+1]:\\n                humps += 1\\n            elif arr[i-1] > arr[i] < arr[i+1]:\\n                valleys += 1\\n        if humps == t and valleys == t - 1:\\n            return True\\n        return False\\n\\n    def generate_sequences(index, current_sequence):\\n        global count\\n        if index == n:\\n            if check_camel(current_sequence):\\n                count += 1\\n            return\\n\\n        for i in range(1, 5):\\n            if index > 0 and i == current_sequence[-1]:\\n                continue\\n            generate_sequences(index + 1, current_sequence + [i])\\n\\n    generate_sequences(0, [])\\n    return count\\n\\nn, t = map(int, raw_input().split())\\nprint count_camels(n, t)\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, t = map(int, input().split())\\n    count = 0\\n\\n    def check(arr):\\n        humps = 0\\n        valleys = 0\\n        for i in range(1, len(arr) - 1):\\n            if arr[i-1] < arr[i] > arr[i+1]:\\n                humps += 1\\n            elif arr[i-1] > arr[i] < arr[i+1]:\\n                valleys += 1\\n        return humps == t and valleys == t - 1\\n\\n    def generate(index, current_arr):\\n        nonlocal count\\n        if index == n:\\n            if check(current_arr):\\n                count += 1\\n            return\\n\\n        for i in range(1, 5):\\n            if index > 0 and i == current_arr[-1]:\\n                continue\\n            generate(index + 1, current_arr + [i])\\n\\n    generate(0, [])\\n    print(count)\\n\\nsolve()\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n, t = map(int, raw_input().split())\\n    count = 0\\n\\n    def check(arr):\\n        humps = 0\\n        valleys = 0\\n        for i in range(1, len(arr) - 1):\\n            if arr[i-1] < arr[i] > arr[i+1]:\\n                humps += 1\\n            elif arr[i-1] > arr[i] < arr[i+1]:\\n                valleys += 1\\n        return humps == t and valleys == t - 1\\n\\n    def generate(index, current_arr):\\n        global count\\n        if index == n:\\n            if check(current_arr):\\n                count += 1\\n            return\\n\\n        for i in range(1, 5):\\n            if index > 0 and i == current_arr[-1]:\\n                continue\\n            generate(index + 1, current_arr + [i])\\n\\n    generate(0, [])\\n    print count\\n\\nsolve()\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def count_camels(n, t):\\n    count = 0\\n    def check_camel(arr):\\n        humps = 0\\n        valleys = 0\\n        for i in range(1, len(arr) - 1):\\n            if arr[i-1] < arr[i] > arr[i+1]:\\n                humps += 1\\n            elif arr[i-1] > arr[i] < arr[i+1]:\\n                valleys += 1\\n        if humps == t and valleys == t - 1:\\n            return True\\n        return False\\n\\n    def generate_sequences(index, current_sequence):\\n        nonlocal count\\n        if index == n:\\n            if check_camel(current_sequence):\\n                count += 1\\n            return\\n\\n        for i in range(1, 5):\\n            if index > 0 and i == current_sequence[-1]:\\n                continue\\n            generate_sequences(index + 1, current_sequence + [i])\\n\\n    generate_sequences(0, [])\\n    return count\\n\\n\\nn, t = map(int, input().split())\\nprint(count_camels(n, t))\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def count_camels(n, t):\\n    count = 0\\n    def check_camel(arr):\\n        humps = 0\\n        valleys = 0\\n        for i in range(1, len(arr) - 1):\\n            if arr[i-1] < arr[i] > arr[i+1]:\\n                humps += 1\\n            elif arr[i-1] > arr[i] < arr[i+1]:\\n                valleys += 1\\n        if humps == t and valleys == t - 1:\\n            return True\\n        return False\\n\\n    def generate_sequences(index, current_sequence):\\n        global count\\n        if index == n:\\n            if check_camel(current_sequence):\\n                count += 1\\n            return\\n\\n        for i in range(1, 5):\\n            if index > 0 and i == current_sequence[-1]:\\n                continue\\n            generate_sequences(index + 1, current_sequence + [i])\\n\\n    generate_sequences(0, [])\\n    return count\\n\\nn, t = map(int, raw_input().split())\\nprint count_camels(n, t)\"\n  }\n]\n```"}
{"description":"Nick is attracted by everything unconventional. He doesn't like decimal number system any more, and he decided to study other number systems. A number system with base b caught his attention. Before he starts studying it, he wants to write in his notepad all the numbers of length n without leading zeros in this number system. Each page in Nick's notepad has enough space for c numbers exactly. Nick writes every suitable number only once, starting with the first clean page and leaving no clean spaces. Nick never writes number 0 as he has unpleasant memories about zero divide.Would you help Nick find out how many numbers will be written on the last page.","input_specification":"The only input line contains three space-separated integers b, n and c (2\u2264b<10^10^6, 1\u2264n<10^10^6, 1\u2264c\u226410^9). You may consider that Nick has infinite patience, endless amount of paper and representations of digits as characters. The numbers doesn't contain leading zeros.\n","output_specification":"In the only line output the amount of numbers written on the same page as the last number.\n","notes":"In both samples there are exactly 4 numbers of length 3 in binary number system. In the first sample Nick writes 3 numbers on the first page and 1 on the second page. In the second sample all the 4 numbers can be written on the first page.\n","sample_inputs":["2 3 3\n","2 3 4\n"],"sample_outputs":["1","4"],"src_uid":"17_D","lang_cluster":"Python","difficulty":2400,"human_solution":"'''\r\nHala Madrid!\r\nhttps:\/\/www.zhihu.com\/people\/li-dong-hao-78-74\r\n'''\r\n\r\nimport sys\r\nimport os\r\nfrom io import BytesIO, IOBase\r\nBUFSIZE = 8192\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\ndef I():\r\n    return input()\r\ndef II():\r\n    return int(input())\r\ndef MI():\r\n    return map(int, input().split())\r\ndef LI():\r\n    return list(input().split())\r\ndef LII():\r\n    return list(map(int, input().split()))\r\ndef GMI():\r\n    return map(lambda x: int(x) - 1, input().split())\r\n\r\n#------------------------------FastIO---------------------------------\r\n\r\nfrom bisect import *\r\nfrom heapq import *\r\nfrom collections import *\r\nfrom functools import *\r\nfrom itertools import *\r\nfrom time import *\r\nfrom random import *\r\nfrom math import log, gcd, sqrt, ceil\r\n\r\n'''\r\n\u00e6\u0089\u008b\u00e5\u0086\u0099\u00e6\u00a0\u0088\u00e9\u0098\u00b2\u00e6\u00ad\u00a2recursion limit\r\n\u00e6\u00b3\u00a8\u00e6\u0084\u008f\u00e8\u00a6\u0081\u00e7\u0094\u00a8yield \u00e4\u00b8\u008d\u00e8\u00a6\u0081\u00e7\u0094\u00a8return\r\n'''\r\nfrom types import GeneratorType\r\ndef bootstrap(f, stack=[]):\r\n    def wrappedfunc(*args, **kwargs):\r\n        if stack:\r\n            return f(*args, **kwargs)\r\n        else:\r\n            to = f(*args, **kwargs)\r\n            while True:\r\n                if type(to) is GeneratorType:\r\n                    stack.append(to)\r\n                    to = next(to)\r\n                else:\r\n                    stack.pop()\r\n                    if not stack:\r\n                        break\r\n                    to = stack[-1].send(to)\r\n            return to\r\n    return wrappedfunc\r\n\r\n'''\r\nmax(***), mp\u00e5\u008f\u00af\u00e8\u0083\u00bd\u00e4\u00b8\u00ba\u00e7\u00a9\u00ba -> error\r\n'''\r\nclass Prime:\r\n    def prime_sieve(self, n):\r\n        \"\"\"returns a sieve of primes >= 5 and < n\"\"\"\r\n        flag = n % 6 == 2\r\n        sieve = bytearray((n \/\/ 3 + flag >> 3) + 1)\r\n        for i in range(1, int(n**0.5) \/\/ 3 + 1):\r\n            if not (sieve[i >> 3] >> (i & 7)) & 1:\r\n                k = (3 * i + 1) | 1\r\n                for j in range(k * k \/\/ 3, n \/\/ 3 + flag, 2 * k):\r\n                    sieve[j >> 3] |= 1 << (j & 7)\r\n                for j in range(k * (k - 2 * (i & 1) + 4) \/\/ 3, n \/\/ 3 + flag, 2 * k):\r\n                    sieve[j >> 3] |= 1 << (j & 7)\r\n        return sieve\r\n\r\n    def prime_list(self, n):\r\n        \"\"\"returns a list of primes <= n\"\"\"\r\n        res = []\r\n        if n > 1:\r\n            res.append(2)\r\n        if n > 2:\r\n            res.append(3)\r\n        if n > 4:\r\n            sieve = self.prime_sieve(n + 1)\r\n            res.extend(3 * i + 1 | 1 for i in range(1, (n + 1) \/\/ 3 + (n % 6 == 1)) if not (sieve[i >> 3] >> (i & 7)) & 1)\r\n        return res\r\n    \r\n    def __init__(self, n) -> None:\r\n        self.primes = self.prime_list(n)\r\n    \r\n    def dissolve(self, num):\r\n        '''prime factor decomposition of num'''\r\n        lst = []\r\n        idx = -1\r\n        for prime in self.primes:\r\n            if prime > num:\r\n                break\r\n\r\n            if num % prime == 0:\r\n                lst.append([prime, 0])\r\n                idx += 1\r\n                \r\n            while num % prime == 0:\r\n                lst[idx][1] += 1\r\n                num \/\/= prime\r\n                \r\n        if num != 1:\r\n            lst.append([num, 1])\r\n            \r\n        return lst\r\n    \r\n    #\u00e6\u00b1\u0082\u00e5\u00be\u0088\u00e5\u00a4\u00a7\u00e7\u009a\u0084\u00e6\u0095\u00b0\u00e5\u0080\u00bc\u00e7\u009a\u0084\u00e5\u008d\u0095\u00e7\u0082\u00b9\u00e7\u009a\u0084phi\u00e7\u0094\u00a8\u00ef\u00bc\u008c\u00e8\u00bf\u009e\u00e7\u00bb\u00ad\u00e5\u008c\u00ba\u00e9\u0097\u00b4\u00e8\u00bf\u0098\u00e6\u0098\u00af\u00e7\u0094\u00a8\u00e5\u0085\u00b6\u00e4\u00bb\u0096\u00e7\u009a\u0084\u00e6\u0096\u00b9\u00e6\u00b3\u0095#\r\n    def get_phi(self, num):\r\n        res = num\r\n        for a, b in self.dissolve(num):\r\n            res -= res \/\/ a\r\n        return res \r\n\r\npri = Prime(10 ** 5 + 10)\r\n\r\ndef solve():\r\n    #\u00e6\u00ac\u00a7\u00e6\u008b\u0089\u00e9\u0099\u008d\u00e5\u00b9\u0082#\r\n    b, n, c = LI()\r\n    c = int(c)\r\n    pw = [1 for _ in range(10 ** 6 + 10)]\r\n    phi = pri.get_phi(c)\r\n    #print('phi', phi)\r\n    pw_phi = [1 for _ in range(10 ** 6 + 10)]\r\n    for i in range(1, 10 ** 6 + 10):\r\n        pw[i] = pw[i - 1] * 10 % c\r\n        pw_phi[i] = pw_phi[i - 1] * 10 % phi\r\n    \r\n    #(b ^ n - b ^ (n - 1)) % c = (b - 1) * (b ^ (n - 1)) % c#\r\n\r\n    #\u00e8\u00ae\u00a1\u00e7\u00ae\u0097b % c#\r\n    b2 = 0\r\n    lb = len(b)\r\n    idx = 0\r\n    for i in range(lb - 1, -1, -1):\r\n        b2 += int(b[i]) * pw[idx]\r\n        idx += 1\r\n        b2 %= c\r\n    #print('b2', b2)\r\n\r\n    #\u00e5\u0088\u00a4\u00e6\u0096\u00adphi\u00e4\u00b8\u008en-1\u00e7\u009a\u0084\u00e5\u0085\u00b3\u00e7\u00b3\u00bb#\r\n    sphi = str(phi)\r\n    if len(n) > len(sphi) + 1:\r\n        flag = True\r\n    elif len(n) < len(sphi):\r\n        flag = False\r\n    else:\r\n        if int(n) - 1 >= phi:\r\n            flag = True\r\n        else:\r\n            flag = False\r\n\r\n    \r\n    #\u00e8\u00ae\u00a1\u00e7\u00ae\u0097n % phi(c)#\r\n    n2 = 0\r\n    ln = len(n)\r\n    idx = 0\r\n    for i in range(ln - 1, -1, -1):\r\n        n2 += int(n[i]) * pw_phi[idx]\r\n        idx += 1\r\n        n2 %= phi\r\n    #print('n2', n2)\r\n    \r\n    res = (b2 - 1) % c\r\n    n2 = (n2 - 1) % phi\r\n    #print('res n2', res, n2)\r\n    if not flag:\r\n        res *= pow(b2, n2, c)\r\n    else:\r\n        res *= pow(b2, n2 + phi, c)\r\n        #print('pow', pow(b2, n2 + phi, c))\r\n    res %= c\r\n    if res:\r\n        print(res)\r\n    else:\r\n        print(c)\r\n\r\nfor _ in range(1):solve()","testcases":"[{'input': ['2 3 3\\r\\n'], 'output': ['1']}, {'input': ['2 3 4\\r\\n'], 'output': ['4']}, {'input': ['9 1 79\\r\\n'], 'output': ['8']}, {'input': ['9 1 345\\r\\n'], 'output': ['8']}, {'input': ['9 9 999982045\\r\\n'], 'output': ['344373768']}, {'input': ['4 42 44\\r\\n'], 'output': ['12']}, {'input': ['6 43 659\\r\\n'], 'output': ['365']}, {'input': ['8 54 999992388\\r\\n'], 'output': ['741886148']}, {'input': ['861 11 17\\r\\n'], 'output': ['14']}, {'input': ['89 34 119\\r\\n'], 'output': ['80']}, {'input': ['84 67 999993310\\r\\n'], 'output': ['829809148']}, {'input': ['9219 537 98\\r\\n'], 'output': ['98']}, {'input': ['763 582 510\\r\\n'], 'output': ['96']}, {'input': ['6355 60160 999982994\\r\\n'], 'output': ['904671182']}, {'input': ['396882961 9936448 752\\r\\n'], 'output': ['528']}, {'input': ['394292559875270 34297300532732 28\\r\\n'], 'output': ['28']}, {'input': ['8523703220091 953421047275844 163\\r\\n'], 'output': ['30']}, {'input': ['713030357739784847 61197710123555584 999992531\\r\\n'], 'output': ['207016405']}, {'input': ['75903940600326238527 492179977057716178 954\\r\\n'], 'output': ['450']}, {'input': ['8085477143815539692925721 57241684823084777591460 968\\r\\n'], 'output': ['304']}, {'input': ['67609394386924890416446 78162115935271414671181267 999987217\\r\\n'], 'output': ['926946271']}, {'input': ['3351262437484130462277638791970372162118802730187825044167229944871677684706592699530322737272222086076517455404652584348 147310576952932829345029460612849431175622785231399764423717734155248977073541821053441627535488066058597900989095431439 999998948\\r\\n'], 'output': ['930694076']}, {'input': ['61063034544457239668509642598956869508193198481915116469015956878854905975766584002919896320353661294612971855029955483257741525207429239630069409321331850413146512850720681578339422084340720535114848966742045420860633093949996367883 965415513080902927493169838825380834798188421277961155726185690857844534367611949025561401481462737822765050755128163519122172969767981851117402342816829930821131453945898813517587656899608854645391515043085723743408226445117376493281975889755859761322184701256801 999998603\\r\\n'], 'output': ['60342257']}, {'input': ['9 1000000000000000000000000000000000000000000000000000000 345\\r\\n'], 'output': ['192']}, {'input': ['8053063680000000000000000000000000002 268435456000000000000005 805306368\\r\\n'], 'output': ['268435456']}, {'input': ['8053063680000000000000000000000000002 2684354560000000000000025 805306368\\r\\n'], 'output': ['268435456']}, {'input': ['8053063680000000000000000000000000002 2684354560000000000000026 805306368\\r\\n'], 'output': ['536870912']}, {'input': ['8053063680000000000000000000000000002 2684354560000000000000027 805306368\\r\\n'], 'output': ['268435456']}, {'input': ['8053063680000000000000000000000000002 2684354560000000000000028 805306368\\r\\n'], 'output': ['536870912']}, {'input': ['8053063680000000000000000000000000002 2684354560000000000000029 805306368\\r\\n'], 'output': ['268435456']}, {'input': ['8053063680000000000000000000000000002 2684354560000000000000030 805306368\\r\\n'], 'output': ['536870912']}, {'input': ['8053063680000000000000000000000000002 2684354560000000000000031 805306368\\r\\n'], 'output': ['268435456']}, {'input': ['2271048430505293080737093330373572593316324321603522463486966273671353266974713306925326907468317965879775893196923719457524955744 8990615363653447573832140957083458603886706189959668013719622351914533208654357508127820477597609318856255372184258450991108060161 53727872\\r\\n'], 'output': ['26470400']}, {'input': ['244741007655429712 1 297825872\\r\\n'], 'output': ['297825871']}]","id":152,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    b, n, c = map(int, input().split())\\n    if n == 1:\\n        total_numbers = b - 1\\n    else:\\n        total_numbers = (b - 1) * pow(b, n - 1)\\n\\n    if total_numbers <= c:\\n        print(total_numbers)\\n    else:\\n        print(total_numbers % c)\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    b, n, c = map(int, input().split())\\n    total_numbers = (b - 1) * (b ** (n - 1))\\n    if total_numbers == 0:\\n      print(0)\\n      return\\n    \\n    remaining = total_numbers % c\\n    if remaining == 0:\\n        print(c)\\n    else:\\n        print(remaining)\\n\\nsolve()\\n\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    b, n, c = map(int, input().split())\\n    if n == 1:\\n        total_numbers = b - 1\\n    else:\\n        total_numbers = (b - 1) * pow(b, n - 1)\\n\\n    if total_numbers <= c:\\n        print(total_numbers)\\n    else:\\n        print(total_numbers % c)\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    b, n, c = map(int, input().split())\\n    total_numbers = (b - 1) * (b ** (n - 1))\\n    if total_numbers == 0:\\n      print(0)\\n      return\\n    \\n    remaining = total_numbers % c\\n    if remaining == 0:\\n        print(c)\\n    else:\\n        print(remaining)\\n\\nsolve()\\n\"\n  }\n]\n```"}
{"description":"Jabber ID on the national Berland service \u00abBabber\u00bb has a form <username>@<hostname>[\/resource], where   <username> \u2014 is a sequence of Latin letters (lowercase or uppercase), digits or underscores characters \u00ab_\u00bb, the length of <username> is between 1 and 16, inclusive.  <hostname> \u2014 is a sequence of word separated by periods (characters \u00ab.\u00bb), where each word should contain only characters allowed for <username>, the length of each word is between 1 and 16, inclusive. The length of <hostname> is between 1 and 32, inclusive.  <resource> \u2014 is a sequence of Latin letters (lowercase or uppercase), digits or underscores characters \u00ab_\u00bb, the length of <resource> is between 1 and 16, inclusive. The content of square brackets is optional \u2014 it can be present or can be absent.There are the samples of correct Jabber IDs: [email\u00a0protected], [email\u00a0protected]\/contest.Your task is to write program which checks if given string is a correct Jabber ID.","input_specification":"The input contains of a single line. The line has the length between 1 and 100 characters, inclusive. Each characters has ASCII-code between 33 and 127, inclusive.\n","output_specification":"Print YES or NO.\n","notes":null,"sample_inputs":["[email\u00a0protected]\n","[email\u00a0protected]\/contest.icpc\/12\n"],"sample_outputs":["YES\n","NO\n"],"src_uid":"21_A","lang_cluster":"Python","difficulty":1900,"human_solution":"def isvalid(jabberid):\r\n   splitted=jabberid.split('@');\r\n   if len(splitted)!=2:\r\n      return False;\r\n\r\n   username=splitted[0];\r\n   for c in username:\r\n      if not(c.isalpha() or c.isdigit() or c=='_'):\r\n         return False;\r\n   if len(username)<1 or len(username)>16:\r\n      return False;\r\n   splitted=splitted[1].split('\/');\r\n   if len(splitted)>2:\r\n      return False;\r\n\r\n   hostname=splitted[0];\r\n   resource='noresource';\r\n   if len(splitted)>1:\r\n      resource=splitted[1];\r\n\r\n   if len(hostname)<1 or len(hostname)>32:\r\n      return False;\r\n   words=hostname.split('.');\r\n   for word in words:\r\n      if len(word)<1 or len(word)>16:\r\n         return False;\r\n      for c in word:\r\n         if not(c.isalpha() or c.isdigit() or c=='_'):\r\n            return False;\r\n\r\n   if len(resource)<1 or len(resource)>16:\r\n      return False;\r\n   for c in resource:\r\n      if not(c.isalpha() or c.isdigit() or c=='_'):\r\n         return False;\r\n\r\n   return True;\r\n      \r\n\r\njabberid=input();\r\nif isvalid(jabberid):\r\n   print('YES');\r\nelse:\r\n   print('NO');\r\n","testcases":"[{'input': ['mike@codeforces.com\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['john.smith@codeforces.ru\/contest.icpc\/12\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['test@test.ri\/abacaba\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['@ops\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['this-is-the-test\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['mike@codeforces.commike@codeforces.com\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['oooop\/oooop\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['w@S8\/XU.5._R7fHq.@..\/e.WP!54Ey1L\\x7f.9jv\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['lNC9D1L5U@.L!_!CcAOEEx.0z.aiW\/S430sbQT\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['@\/YTd.K1@lD\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['Fyi!d1l@.OesGopTnRn.81xdSb8q\\x7f.\/MzuI\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['_TlPy65\\x7fw\/@.Vl@.8k\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['xpS@._s8.e0l\\x7fJci\/.LdiT\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['lGwo\\x7f8.D2@.3\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['Ccz9T5rKZQuEerGo@6l.\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['Y@5nh@8.9P.Bx5AaY.1g.Tc_MK7.g_..0.\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['Q2\/6y!SP9s\\x7fG@7zIGr.Du_nR8.\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['eWfLL@gW!BEJUxF\\x7fh@dghf.d4.FiYp\/2.Pr7a\/5O6zXdAkikjCEDrb\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['8oI\/\\x7fa@Q\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['J@Y9Gz550l@\\x7fPqVZdQ!u\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['VTE6aTTta@DHe4xeG@6.c2R.J.O7sndWEEW.9j@.l..3Bs\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['aeo2XkK@UX.nQJN!Tg..wGN5YOi68U.oP2Yl3\/\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['m13zREg8LbPr@T2.Z9@g.9u.v.A..XNH\/1\/tloIceXydZf3\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['4@@..f3ZT.\/oUGZ@\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['G.rVAxwDx@a.PVSe!KtpX4tzs\/0yQGzZCPJPJoda\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['SV9T5RR425Sl0b@kzj.XT.PFWc..ho\/VE7gjf\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['bgko@1..\/xwSj_\\x7fJ\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['n5ymLC.bE@ukio.im2..\/.\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['zr.KB_6ZMSwI2GA5@R\/4iP1ZKHpszW!YN\/\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['@alK@pR\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['al_Y2I4IKp@A_N.\\x7fruCw0VL\/hRzJtx.S7sp\/r!c.n9ffh\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['C1rE26_rTAVzLm@6@X5OGX.ibJ9.\/kkBEVlcU\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['feGSXP@eyUfr\\x7f8.x4Re.JL.6B.r\/fX_\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['Ht15T@50eo.E@.\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['k9MITs_Ar.JL2RRs4@VRq.wCuJ.6..amF.fE4.5I.6fJ7gz7\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['Mi\\x7fWPE8@fc.\/IViqq4T4PSUuMdhH\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['pxSCmv!NbMvz2@pTQ.t!.Ntz\/QEh_sl\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['s@mH@RO\\x7f_\/iWD\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['UP51i49wX@pvx@2LWm8w\/G4M3J.\/9L6Szy\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['xC_5Vx8NgF..\\x7fln@X1.drRTX..1vx.Xb3of@\/PQYPeq@_y8!h_iF\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['qG3@LKp\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['flTq1knyb@2!Mtfss\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['\/pqi7WXQPJFM4q1@hxUyUy\\x7f\/_pWo0n\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['zXme@.Dq.TWBs.fB.M\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['o3EaAnc3K6@h\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['G\/AZdVMTzRLV4Ucm@eQ!..pq!..tRTi5.Ejkqa\/HGpFYk\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['.c_V@L.1v!AFAEk7glM\\x7fq.ag8Sy8@0.Qm\/OLKoJpZlac\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['WKxNIM79u\\x7f@I.RM\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['POTjlYcxAZsbyZPDh@sPm.z6aVaO.H1wEUhD9YvROQFUk\/M_jTHS_6!\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['pbRIiuA@KZ2hVed2fMikA.@ebd.tE2Y\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['OlS_OwxYhH@im.0A7o\/juNlxB\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['xkjHHDRBEFwgNP@G9TGStEs2Lu.BJge3EBXw3c9EfE\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['bK@8X7tQO.pXBHJpDewD\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['kKUXy6@0WefbXz39ywP.Q3r7uF\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['SllbRLdZ6@.T.E3x.BE2nIv.5db_.38.\/zgVGNjpldr\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['4lBJkY8c097oa@ZYmVbtiyyYN.gbj\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['F@JX4.SI1\/0EY3XmYatfY\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['oLo01@B77Pu.9R.vtAZG0.HQSunv0J.\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['xLEctap0T@22U9W_fA\/7iQeJGFu1lSgMZ\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['WYh@yUWfOQiF.gOK9k8aEa\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['BPxNVANhtEh@Oh_go.\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['mGIY@cHRNC8GlJ\/2pcl3LYxpi3PaKGs\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['x6yfn7BGwqWd@.N\/UXC\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['cUIr@cP.eGQC2xJXvI1X7\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['MLZ6e1vgZ4hOI@ktWk.Ro.o6C4\/i8cnKHT\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['XCJIa@jFaP.Eu28YaoT9Z.Epk.Z\/4TBzLWf724zE1r\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['Cz1U1xjg6iW0U@.97HoVA.YG.Qd.eI.DCXxtibi6HG.GV\/0sN\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['nrKbWV@P0irxQoRxDsNvG\/69WxCwCsfB\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['yI1nRv3FbuhgaI@.Y9vKe.8oc.BLi.6JfYT\/tT5d36\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['IGsma3L6YTJRrXS@1g.yR3mC.c.xoCns7Wo1.9C.Oe.5ebkR\/_97Ltj3\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['Uu538LDu9Bye@Gu0W0P5a.b9zA9nSaNhzB_TQ2.z\/qfi5CZrH\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['bdHl525me@XzR_iO23v.YFXbnHUybbgw.i\/WVEhm\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['NQsZ0K@eE8VMB.w2nYtKImB.4nUF\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['186@E.MmBaKLj.WYpt4wPZkzv93\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['hmhYxkGtWYRJFtBU@Drg3L7WKujE.lU61Ljqxv.\/FJ4X\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['t1RIUz9l3FA15@tOL9.rv.NjhouD.\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['_I4ytjyccT@q.WIc.Cqn\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['LwHHRYq@whOoq.e9b6i0xnoWBl7z.SGJiJe\/iUij1x7\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['Yesx@9_KiJq2cBI6.\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['Zu5VFUtSbIw@ner5e\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['test@test.\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['test@.test\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['est.@test\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['test@test.ru\/\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['asd@asd@\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['@\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['\/\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['.\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['mike@\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['@mike\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['@mail.ru\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['test.me\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['$@ru\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['testme@o.o.o.o.o\/ooooo\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['oooop\/oooop\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['mail.ru\/a\\r\\n'], 'output': ['NO\\r\\n']}, {'input': ['mike@mail.ru\/aaa\\r\\n'], 'output': ['YES\\r\\n']}, {'input': ['mike@mike.mike\\r\\n'], 'output': ['YES\\r\\n']}]","id":153,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"import re\\n\\ndef is_valid_username(username):\\n    return 1 <= len(username) <= 16 and re.match(r\\\"^[a-zA-Z0-9_]+$\\\", username) is not None\\n\\ndef is_valid_hostname_word(word):\\n    return 1 <= len(word) <= 16 and re.match(r\\\"^[a-zA-Z0-9_]+$\\\", word) is not None\\n\\ndef is_valid_hostname(hostname):\\n    words = hostname.split(\\\".\\\")\\n    if not (1 <= len(hostname) <= 32 and all(is_valid_hostname_word(word) for word in words) and len(words) > 0):\\n        return False\\n    return True\\n\\ndef is_valid_resource(resource):\\n    return resource == '' or (1 <= len(resource) <= 16 and re.match(r\\\"^[a-zA-Z0-9_]+$\\\", resource) is not None)\\n\\ndef is_valid_jabber_id(jabber_id):\\n    match = re.match(r\\\"^([^@]+)@([^\/]+)(?:\\\\\/([^\/]+))?$\\\", jabber_id)\\n    if not match:\\n        return False\\n    username = match.group(1)\\n    hostname = match.group(2)\\n    resource = match.group(3) if match.group(3) else \\\"\\\"\\n    \\n    return is_valid_username(username) and is_valid_hostname(hostname) and is_valid_resource(resource)\\n\\n\\njabber_id = input()\\nif is_valid_jabber_id(jabber_id):\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"import re\\n\\ndef is_valid_username(username):\\n    return 1 <= len(username) <= 16 and re.match(r\\\"^[a-zA-Z0-9_]+$\\\", username) is not None\\n\\ndef is_valid_hostname_word(word):\\n    return 1 <= len(word) <= 16 and re.match(r\\\"^[a-zA-Z0-9_]+$\\\", word) is not None\\n\\ndef is_valid_hostname(hostname):\\n    words = hostname.split(\\\".\\\")\\n    if not (1 <= len(hostname) <= 32 and len(words) > 0):\\n        return False\\n    return all(is_valid_hostname_word(word) for word in words)\\n\\ndef is_valid_resource(resource):\\n    return 0 <= len(resource) <= 16 and re.match(r\\\"^[a-zA-Z0-9_]*$\\\", resource) is not None\\n\\n\\nline = input()\\n\\nmatch = re.match(r\\\"^([a-zA-Z0-9_]{1,16})@([a-zA-Z0-9_\\\\.]+)(?:\\\\\/([a-zA-Z0-9_]{0,16}))?$\\\", line)\\n\\nif match:\\n    username = match.group(1)\\n    hostname = match.group(2)\\n    resource = match.group(3)\\n\\n    if is_valid_username(username) and is_valid_hostname(hostname) and is_valid_resource(resource):\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\nelse:\\n    print(\\\"NO\\\")\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"import re\\n\\ndef is_valid_username(username):\\n    return 1 <= len(username) <= 16 and re.match(r\\\"^[a-zA-Z0-9_]+$\\\", username) is not None\\n\\ndef is_valid_hostname_word(word):\\n    return 1 <= len(word) <= 16 and re.match(r\\\"^[a-zA-Z0-9_]+$\\\", word) is not None\\n\\ndef is_valid_hostname(hostname):\\n    words = hostname.split(\\\".\\\")\\n    if not (1 <= len(hostname) <= 32 and all(is_valid_hostname_word(word) for word in words) and len(words) > 0):\\n        return False\\n    return True\\n\\ndef is_valid_resource(resource):\\n    return resource == '' or (1 <= len(resource) <= 16 and re.match(r\\\"^[a-zA-Z0-9_]+$\\\", resource) is not None)\\n\\ndef is_valid_jabber_id(jabber_id):\\n    match = re.match(r\\\"^([^@]+)@([^\/]+)(?:\\\\\/([^\/]+))?$\\\", jabber_id)\\n    if not match:\\n        return False\\n    username = match.group(1)\\n    hostname = match.group(2)\\n    resource = match.group(3) if match.group(3) else \\\"\\\"\\n    \\n    return is_valid_username(username) and is_valid_hostname(hostname) and is_valid_resource(resource)\\n\\n\\njabber_id = input()\\nif is_valid_jabber_id(jabber_id):\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"import re\\n\\ndef is_valid_username(username):\\n    return 1 <= len(username) <= 16 and re.match(r\\\"^[a-zA-Z0-9_]+$\\\", username) is not None\\n\\ndef is_valid_hostname_word(word):\\n    return 1 <= len(word) <= 16 and re.match(r\\\"^[a-zA-Z0-9_]+$\\\", word) is not None\\n\\ndef is_valid_hostname(hostname):\\n    words = hostname.split(\\\".\\\")\\n    if not (1 <= len(hostname) <= 32 and len(words) > 0):\\n        return False\\n    return all(is_valid_hostname_word(word) for word in words)\\n\\ndef is_valid_resource(resource):\\n    return 0 <= len(resource) <= 16 and re.match(r\\\"^[a-zA-Z0-9_]*$\\\", resource) is not None\\n\\n\\nline = input()\\n\\nmatch = re.match(r\\\"^([a-zA-Z0-9_]{1,16})@([a-zA-Z0-9_\\\\.]+)(?:\\\\\/([a-zA-Z0-9_]{0,16}))?$\\\", line)\\n\\nif match:\\n    username = match.group(1)\\n    hostname = match.group(2)\\n    resource = match.group(3)\\n\\n    if is_valid_username(username) and is_valid_hostname(hostname) and is_valid_resource(resource):\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\nelse:\\n    print(\\\"NO\\\")\"\n  }\n]\n```"}
{"description":"Once Bob took a paper stripe of n squares (the height of the stripe is 1 square). In each square he wrote an integer number, possibly negative. He became interested in how many ways exist to cut this stripe into three pieces so that the sum of numbers from each piece is equal to the sum of numbers from any other piece, and each piece contains positive integer amount of squares. Would you help Bob solve this problem?","input_specification":"The first input line contains integer n (1\u2264n\u226410^5) \u2014 amount of squares in the stripe. The second line contains n space-separated numbers \u2014 they are the numbers written in the squares of the stripe. These numbers are integer and do not exceed 10000 in absolute value.\n","output_specification":"Output the amount of ways to cut the stripe into three non-empty pieces so that the sum of numbers from each piece is equal to the sum of numbers from any other piece. Don't forget that it's allowed to cut the stripe along the squares' borders only.\n","notes":null,"sample_inputs":["4\n1 2 3 3\n","5\n1 2 3 4 5\n"],"sample_outputs":["1\n","0\n"],"src_uid":"21_C","lang_cluster":"Python","difficulty":2000,"human_solution":"import sys\r\n\r\nSEPARATOR = \"\\n\"\r\nUNICODE = \"utf-8\"\r\n\r\ndef count_stripes(arr: list) -> int:\r\n    arr_sum = sum(arr)\r\n    if arr_sum % 3 != 0:\r\n        return 0\r\n    length = len(arr)\r\n    counter = 0\r\n    pref = 0\r\n    stipe_arr = [0] * (length + 1)\r\n    for i in range(1, length+1):\r\n        pref += arr[i-1]\r\n        stipe_arr[i] = stipe_arr[i-1] + (pref*3 == arr_sum)\r\n    # print(stipe_arr)\r\n    suf = 0\r\n    for i in range(length-1, 1, -1):\r\n        suf += arr[i]\r\n        if suf*3 == arr_sum:\r\n            if arr_sum == 0:\r\n                counter += stipe_arr[i-1]\r\n            else:\r\n                counter += stipe_arr[i]\r\n    return counter\r\n\r\n\r\nlines = sys.stdin.buffer.readlines()\r\nprint(count_stripes([int(n) for n in lines[1].decode(UNICODE).strip().split()]))","testcases":"[{'input': ['1\\r\\n-3\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['2\\r\\n0 0\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['3\\r\\n0 0 0\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['4\\r\\n-2 3 3 2\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['5\\r\\n-6 3 -1 2 -7\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['6\\r\\n2 3 -3 0 -3 1\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['7\\r\\n-1 1 -3 4 3 0 2\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['8\\r\\n2 0 0 2 -1 3 4 5\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['9\\r\\n-5 -2 1 1 5 0 -4 4 0\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['10\\r\\n-1 5 2 3 1 5 0 2 2 5\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['100\\r\\n3 0 -5 2 -3 -1 -1 0 -2 -5 -4 2 1 2 -2 -1 -1 -4 3 -1 -3 -1 5 0 -4 -4 -1 0 -2 -2 0 1 -1 -2 -1 -5 -4 -2 3 1 -3 0 -1 1 0 -1 2 0 -2 -1 -3 1 -2 2 3 2 -3 -5 2 2 -2 -2 1 2 -2 -1 3 0 -4 7 -2 2 1 4 -9 -1 -2 -1 0 -1 0 -2 -2 -1 1 1 -4 2 -3 -3 7 1 1 -3 -7 0 -2 0 5 -2\\r\\n'], 'output': ['5\\r\\n']}]","id":154,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    \\n    count = 0\\n    total_sum = sum(a)\\n    \\n    if total_sum % 3 != 0:\\n        print(0)\\n        return\\n    \\n    target_sum = total_sum \/\/ 3\\n    \\n    for i in range(1, n - 1):\\n        for j in range(i + 1, n):\\n            sum1 = sum(a[:i])\\n            sum2 = sum(a[i:j])\\n            sum3 = sum(a[j:])\\n            \\n            if sum1 == target_sum and sum2 == target_sum and sum3 == target_sum:\\n                count += 1\\n                \\n    print(count)\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\n\\ncount = 0\\n\\nfor i in range(1, n - 1):\\n    for j in range(i + 1, n):\\n        s1 = sum(a[:i])\\n        s2 = sum(a[i:j])\\n        s3 = sum(a[j:])\\n        if s1 == s2 and s2 == s3:\\n            count += 1\\n\\nprint(count)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\na = map(int, raw_input().split())\\n\\ncount = 0\\n\\nfor i in range(1, n - 1):\\n    for j in range(i + 1, n):\\n        s1 = sum(a[:i])\\n        s2 = sum(a[i:j])\\n        s3 = sum(a[j:])\\n        if s1 == s2 and s2 == s3:\\n            count += 1\\n\\nprint count\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    \\n    count = 0\\n    total_sum = sum(a)\\n    \\n    if total_sum % 3 != 0:\\n        print(0)\\n        return\\n    \\n    target_sum = total_sum \/\/ 3\\n    \\n    for i in range(1, n - 1):\\n        for j in range(i + 1, n):\\n            sum1 = sum(a[:i])\\n            sum2 = sum(a[i:j])\\n            sum3 = sum(a[j:])\\n            \\n            if sum1 == target_sum and sum2 == target_sum and sum3 == target_sum:\\n                count += 1\\n                \\n    print(count)\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"n = int(input())\\na = list(map(int, input().split()))\\n\\ncount = 0\\n\\nfor i in range(1, n - 1):\\n    for j in range(i + 1, n):\\n        s1 = sum(a[:i])\\n        s2 = sum(a[i:j])\\n        s3 = sum(a[j:])\\n        if s1 == s2 and s2 == s3:\\n            count += 1\\n\\nprint(count)\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"n = int(raw_input())\\na = map(int, raw_input().split())\\n\\ncount = 0\\n\\nfor i in range(1, n - 1):\\n    for j in range(i + 1, n):\\n        s1 = sum(a[:i])\\n        s2 = sum(a[i:j])\\n        s3 = sum(a[j:])\\n        if s1 == s2 and s2 == s3:\\n            count += 1\\n\\nprint count\"\n  }\n]\n```"}
{"description":"There are several days left before the fiftieth birthday of a famous Berland's writer Berlbury. In this connection the local library decided to make an exposition of the works of this famous science-fiction writer. It was decided as well that it is necessary to include into the exposition only those books that were published during a particular time period. It is obvious that if the books differ much in size, the visitors will not like it. That was why the organizers came to the opinion, that the difference between the highest and the lowest books in the exposition should be not more than k millimeters.The library has n volumes of books by Berlbury, arranged in chronological order of their appearance. The height of each book in millimeters is know, it is hi. As Berlbury is highly respected in the city, the organizers want to include into the exposition as many books as possible, and to find out what periods of his creative work they will manage to cover. You are asked to help the organizers cope with this hard task.","input_specification":"The first line of the input data contains two integer numbers separated by a space n (1\u2264n\u226410^5) and k (0\u2264k\u226410^6) \u2014 the amount of books by Berlbury in the library, and the maximum allowed height difference between the lowest and the highest books. The second line contains n integer numbers separated by a space. Each number hi (1\u2264hi\u226410^6) is the height of the i-th book in millimeters.\n","output_specification":"In the first line of the output data print two numbers a and b (separate them by a space), where a is the maximum amount of books the organizers can include into the exposition, and b \u2014 the amount of the time periods, during which Berlbury published a books, and the height difference between the lowest and the highest among these books is not more than k milllimeters.\nIn each of the following b lines print two integer numbers separated by a space \u2014 indexes of the first and the last volumes from each of the required time periods of Berlbury's creative work.\n","notes":null,"sample_inputs":["3 3\n14 12 10\n","2 0\n10 10\n","4 5\n8 19 10 13\n"],"sample_outputs":["2 2\n1 2\n2 3\n","2 1\n1 2\n","2 1\n3 4\n"],"src_uid":"6_E","lang_cluster":"Python","difficulty":1900,"human_solution":"from collections import deque \r\n\r\nn, k = map(int, input().split())\r\nh = list(map(int, input().split()))\r\n\r\n\"\"\"\r\ni - left pointer\r\nj - right pointer\r\nmx - maximum length of the valid subarrays so far\r\nres - the subarrrays with the maximum length\r\n\"\"\"\r\n\r\ni, mx, res = 0, 0, []\r\n\r\ninc, dec = deque(), deque()\r\n\r\nfor j, x in enumerate(h):\r\n    \r\n    while inc and h[inc[-1]] >= x:\r\n        inc.pop()\r\n    inc.append(j)\r\n    \r\n    while dec and h[dec[-1]] <= x:\r\n        dec.pop()\r\n    dec.append(j)\r\n    \r\n    while h[dec[0]] - h[inc[0]] > k:\r\n        if dec[0] < inc[0]:\r\n            i = max(i, dec.popleft() + 1)\r\n        else:\r\n            i = max(i, inc.popleft() + 1)\r\n    \r\n    if j - i + 1 > mx:\r\n        res = []\r\n        mx = j - i + 1\r\n        \r\n    if j - i + 1 == mx:\r\n        res.append((i + 1, j + 1))\r\n\r\nprint(mx, len(res))\r\nfor i, j in res:\r\n    print(i, j)\r\n    \r\n    ","testcases":"[{'input': ['3 3\\r\\n14 12 10\\r\\n'], 'output': ['2 2\\r\\n1 2\\r\\n2 3\\r\\n']}, {'input': ['2 0\\r\\n10 10\\r\\n'], 'output': ['2 1\\r\\n1 2\\r\\n']}, {'input': ['4 5\\r\\n8 19 10 13\\r\\n'], 'output': ['2 1\\r\\n3 4\\r\\n']}, {'input': ['1 1\\r\\n1\\r\\n'], 'output': ['1 1\\r\\n1 1\\r\\n']}, {'input': ['2 10\\r\\n35 45\\r\\n'], 'output': ['2 1\\r\\n1 2\\r\\n']}, {'input': ['4 8\\r\\n89 33 54 75\\r\\n'], 'output': ['1 4\\r\\n1 1\\r\\n2 2\\r\\n3 3\\r\\n4 4\\r\\n']}, {'input': ['5 1\\r\\n9 6 8 7 5\\r\\n'], 'output': ['2 1\\r\\n3 4\\r\\n']}, {'input': ['3 3\\r\\n3 8 6\\r\\n'], 'output': ['2 1\\r\\n2 3\\r\\n']}, {'input': ['4 1000000\\r\\n100001 1 200001 300001\\r\\n'], 'output': ['4 1\\r\\n1 4\\r\\n']}, {'input': ['4 1000\\r\\n11497 9999 10730 12280\\r\\n'], 'output': ['2 1\\r\\n2 3\\r\\n']}, {'input': ['3 0\\r\\n1000000 1000000 1000000\\r\\n'], 'output': ['3 1\\r\\n1 3\\r\\n']}, {'input': ['4 50\\r\\n165 182 157 132\\r\\n'], 'output': ['4 1\\r\\n1 4\\r\\n']}, {'input': ['5 173\\r\\n350 250 200 300 400\\r\\n'], 'output': ['4 1\\r\\n1 4\\r\\n']}, {'input': ['4 0\\r\\n1 1 1 1\\r\\n'], 'output': ['4 1\\r\\n1 4\\r\\n']}, {'input': ['2 1000000\\r\\n1 1000000\\r\\n'], 'output': ['2 1\\r\\n1 2\\r\\n']}, {'input': ['7 14\\r\\n28 28 29 35 25 29 28\\r\\n'], 'output': ['7 1\\r\\n1 7\\r\\n']}, {'input': ['10 163\\r\\n7541 2535 5883 5775 2821 5962 4489 5548 2852 4595\\r\\n'], 'output': ['2 1\\r\\n3 4\\r\\n']}, {'input': ['15 793\\r\\n98580 27440 3719 73977 34819 64092 89939 75329 72884 66502 17464 73662 6666 47984 45348\\r\\n'], 'output': ['1 15\\r\\n1 1\\r\\n2 2\\r\\n3 3\\r\\n4 4\\r\\n5 5\\r\\n6 6\\r\\n7 7\\r\\n8 8\\r\\n9 9\\r\\n10 10\\r\\n11 11\\r\\n12 12\\r\\n13 13\\r\\n14 14\\r\\n15 15\\r\\n']}, {'input': ['28 543\\r\\n1921 1700 1363 2580 2693 3144 2269 908 3863 3750 2151 3039 1581 3395 1133 1804 1464 2040 2372 2475 1240 800 3521 3270 2815 1026 3625 2930\\r\\n'], 'output': ['3 1\\r\\n18 20\\r\\n']}, {'input': ['55 1000\\r\\n2612 1306 4300 1790 3173 9493 7209 7763 8563 4534 7466 1281 4483 6863 3787 7292 3957 8775 7221 4016 5743 6556 2070 2119 4795 9094 1913 2077 8786 4520 1865 2357 7871 3288 8231 5808 9383 9820 9974 3056 5343 2169 5177 6299 5805 8132 9315 6747 5226 3531 1206 4073 8290 1423 6720\\r\\n'], 'output': ['3 1\\r\\n37 39\\r\\n']}]","id":156,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, k = map(int, input().split())\\n    h = list(map(int, input().split()))\\n    \\n    max_books = 0\\n    periods = []\\n    \\n    for i in range(n):\\n        for j in range(i, n):\\n            sub_array = h[i:j+1]\\n            if not sub_array:\\n                continue\\n            \\n            min_height = min(sub_array)\\n            max_height = max(sub_array)\\n            \\n            if max_height - min_height <= k:\\n                num_books = len(sub_array)\\n                if num_books > max_books:\\n                    max_books = num_books\\n                    periods = [(i+1, j+1)]\\n                elif num_books == max_books:\\n                    periods.append((i+1, j+1))\\n    \\n    print(max_books, len(periods))\\n    for start, end in periods:\\n        print(start, end)\\n\\nsolve()\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n, k = map(int, raw_input().split())\\n    h = map(int, raw_input().split())\\n    \\n    max_books = 0\\n    periods = []\\n    \\n    for i in range(n):\\n        for j in range(i, n):\\n            sub_array = h[i:j+1]\\n            if not sub_array:\\n                continue\\n            \\n            min_height = min(sub_array)\\n            max_height = max(sub_array)\\n            \\n            if max_height - min_height <= k:\\n                num_books = len(sub_array)\\n                if num_books > max_books:\\n                    max_books = num_books\\n                    periods = [(i+1, j+1)]\\n                elif num_books == max_books:\\n                    periods.append((i+1, j+1))\\n    \\n    print max_books, len(periods)\\n    for start, end in periods:\\n        print start, end\\n\\nsolve()\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, k = map(int, input().split())\\n    h = list(map(int, input().split()))\\n    \\n    max_books = 0\\n    periods = []\\n    \\n    for i in range(n):\\n        for j in range(i, n):\\n            subset = h[i:j+1]\\n            if not subset:\\n                continue\\n            \\n            min_h = min(subset)\\n            max_h = max(subset)\\n            \\n            if max_h - min_h <= k:\\n                num_books = len(subset)\\n                if num_books > max_books:\\n                    max_books = num_books\\n                    periods = [(i+1, j+1)]\\n                elif num_books == max_books:\\n                    periods.append((i+1, j+1))\\n                    \\n    print(max_books, len(periods))\\n    for start, end in periods:\\n        print(start, end)\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, k = map(int, input().split())\\n    h = list(map(int, input().split()))\\n    \\n    max_books = 0\\n    periods = []\\n    \\n    for i in range(n):\\n        for j in range(i, n):\\n            sub_array = h[i:j+1]\\n            if not sub_array:\\n                continue\\n            \\n            min_height = min(sub_array)\\n            max_height = max(sub_array)\\n            \\n            if max_height - min_height <= k:\\n                num_books = len(sub_array)\\n                if num_books > max_books:\\n                    max_books = num_books\\n                    periods = [(i+1, j+1)]\\n                elif num_books == max_books:\\n                    periods.append((i+1, j+1))\\n    \\n    print(max_books, len(periods))\\n    for start, end in periods:\\n        print(start, end)\\n\\nsolve()\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n, k = map(int, raw_input().split())\\n    h = map(int, raw_input().split())\\n    \\n    max_books = 0\\n    periods = []\\n    \\n    for i in range(n):\\n        for j in range(i, n):\\n            sub_array = h[i:j+1]\\n            if not sub_array:\\n                continue\\n            \\n            min_height = min(sub_array)\\n            max_height = max(sub_array)\\n            \\n            if max_height - min_height <= k:\\n                num_books = len(sub_array)\\n                if num_books > max_books:\\n                    max_books = num_books\\n                    periods = [(i+1, j+1)]\\n                elif num_books == max_books:\\n                    periods.append((i+1, j+1))\\n    \\n    print max_books, len(periods)\\n    for start, end in periods:\\n        print start, end\\n\\nsolve()\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, k = map(int, input().split())\\n    h = list(map(int, input().split()))\\n    \\n    max_books = 0\\n    periods = []\\n    \\n    for i in range(n):\\n        for j in range(i, n):\\n            subset = h[i:j+1]\\n            if not subset:\\n                continue\\n            \\n            min_h = min(subset)\\n            max_h = max(subset)\\n            \\n            if max_h - min_h <= k:\\n                num_books = len(subset)\\n                if num_books > max_books:\\n                    max_books = num_books\\n                    periods = [(i+1, j+1)]\\n                elif num_books == max_books:\\n                    periods.append((i+1, j+1))\\n                    \\n    print(max_books, len(periods))\\n    for start, end in periods:\\n        print(start, end)\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"All of us love treasures, right? That's why young Vasya is heading for a Treasure Island.Treasure Island may be represented as a rectangular table $$$n \\times m$$$ which is surrounded by the ocean. Let us number rows of the field with consecutive integers from $$$1$$$ to $$$n$$$ from top to bottom and columns with consecutive integers from $$$1$$$ to $$$m$$$ from left to right. Denote the cell in $$$r$$$-th row and $$$c$$$-th column as $$$(r, c)$$$. Some of the island cells contain impassable forests, and some cells are free and passable. Treasure is hidden in cell $$$(n, m)$$$.Vasya got off the ship in cell $$$(1, 1)$$$. Now he wants to reach the treasure. He is hurrying up, so he can move only from cell to the cell in next row (downwards) or next column (rightwards), i.e. from cell $$$(x, y)$$$ he can move only to cells $$$(x+1, y)$$$ and $$$(x, y+1)$$$. Of course Vasya can't move through cells with impassable forests.Evil Witch is aware of Vasya's journey and she is going to prevent him from reaching the treasure. Before Vasya's first move she is able to grow using her evil magic impassable forests in previously free cells. Witch is able to grow a forest in any number of any free cells except cells $$$(1, 1)$$$ where Vasya got off his ship and $$$(n, m)$$$ where the treasure is hidden.Help Evil Witch by finding out the minimum number of cells she has to turn into impassable forests so that Vasya is no longer able to reach the treasure.","input_specification":"First line of input contains two positive integers $$$n$$$, $$$m$$$ ($$$3 \\le n \\cdot m \\le 1\\,000\\,000$$$), sizes of the island.\nFollowing $$$n$$$ lines contains strings $$$s_i$$$ of length $$$m$$$ describing the island, $$$j$$$-th character of string $$$s_i$$$ equals \"#\" if cell $$$(i, j)$$$ contains an impassable forest and \".\" if the cell is free and passable. Let us remind you that Vasya gets of his ship at the cell $$$(1, 1)$$$, i.e. the first cell of the first row, and he wants to reach cell $$$(n, m)$$$, i.e. the last cell of the last row.\nIt's guaranteed, that cells $$$(1, 1)$$$ and $$$(n, m)$$$ are empty.\n","output_specification":"Print the only integer $$$k$$$, which is the minimum number of cells Evil Witch has to turn into impassable forest in order to prevent Vasya from reaching the treasure.\n","notes":null,"sample_inputs":[],"sample_outputs":[],"src_uid":"1214_D","lang_cluster":"Python","difficulty":1900,"human_solution":"import sys\r\nfrom array import array\r\n\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\ninp = lambda dtype: [dtype(x) for x in input().split()]\r\ninp_2d = lambda dtype, n: [dtype(input()) for _ in range(n)]\r\ndebug = lambda *x: print(*x, file=sys.stderr)\r\nceil1 = lambda a, b: (a + b - 1) \/\/ b\r\nout, tests = [], 1\r\n\r\n\r\ndef solve(x, y) -> bool:\r\n    passable = 0\r\n    while x < n and y > -1:\r\n        if passbe[x][y] and passen[x][y]:\r\n            passable += 1\r\n\r\n        x += 1\r\n        y -= 1\r\n\r\n    return passable == 1\r\n\r\n\r\nfor _ in range(tests):\r\n    n, m = inp(int)\r\n    a = [input() for _ in range(n)]\r\n    passbe = [array('b', [0] * (m + 1)) for _ in range(n + 1)]\r\n    passen = [array('b', [0] * (m + 1)) for _ in range(n + 1)]\r\n    passbe[-1][0] = passen[-1][m - 1] = 1\r\n\r\n    for i in range(n):\r\n        for j in range(m):\r\n            passbe[i][j] = (passbe[i - 1][j] or passbe[i][j - 1]) and (a[i][j] != '#')\r\n\r\n    for i in range(n - 1, -1, -1):\r\n        for j in range(m - 1, -1, -1):\r\n            passen[i][j] = (passen[i + 1][j] or passen[i][j + 1]) and (a[i][j] != '#')\r\n\r\n    if not passbe[n - 1][m - 1]:\r\n        out.append(0)\r\n        continue\r\n\r\n    ans = 2\r\n    for j in range(1, m):\r\n        if solve(0, j):\r\n            ans = 1\r\n            break\r\n\r\n    for j in range(1, n - 1):\r\n        if solve(j, m - 1):\r\n            ans = 1\r\n            break\r\n\r\n    out.append(ans)\r\nprint('\\n'.join(map(str, out)))\r\n","testcases":"[{'input': ['2 2\\r\\n..\\r\\n..\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['5 1\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['1 3\\r\\n.#.\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['6 1\\r\\n.\\r\\n.\\r\\n#\\r\\n.\\r\\n.\\r\\n.\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['5 2\\r\\n..\\r\\n..\\r\\n..\\r\\n..\\r\\n#.\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['4 2\\r\\n..\\r\\n#.\\r\\n..\\r\\n..\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['2 2\\r\\n.#\\r\\n..\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['4 5\\r\\n.####\\r\\n#####\\r\\n#####\\r\\n####.\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['5 4\\r\\n.###\\r\\n####\\r\\n####\\r\\n####\\r\\n###.\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['3 6\\r\\n.#####\\r\\n######\\r\\n#####.\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['6 3\\r\\n.##\\r\\n###\\r\\n###\\r\\n###\\r\\n###\\r\\n##.\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['6 3\\r\\n.##\\r\\n###\\r\\n.##\\r\\n.##\\r\\n#.#\\r\\n#..\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['6 3\\r\\n.##\\r\\n###\\r\\n.##\\r\\n..#\\r\\n..#\\r\\n#..\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['6 3\\r\\n.##\\r\\n.##\\r\\n.##\\r\\n..#\\r\\n..#\\r\\n#..\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['10 2\\r\\n..\\r\\n..\\r\\n..\\r\\n..\\r\\n..\\r\\n..\\r\\n..\\r\\n..\\r\\n..\\r\\n..\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['20 1\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n#\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n'], 'output': ['0\\r\\n']}, {'input': ['20 1\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n.\\r\\n'], 'output': ['1\\r\\n']}]","id":157,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    grid = [input() for _ in range(n)]\\n\\n    def is_valid(r, c):\\n        return 0 <= r < n and 0 <= c < m\\n\\n    def can_reach(blocked):\\n        q = [(0, 0)]\\n        visited = set([(0, 0)])\\n\\n        while q:\\n            r, c = q.pop(0)\\n            if r == n - 1 and c == m - 1:\\n                return True\\n\\n            for dr, dc in [(1, 0), (0, 1)]:\\n                nr, nc = r + dr, c + dc\\n                if is_valid(nr, nc) and (nr, nc) not in blocked and grid[nr][nc] == '.' and (nr, nc) not in visited:\\n                    q.append((nr, nc)\\n                    visited.add((nr, nc))\\n        return False\\n\\n    free_cells = []\\n    for r in range(n):\\n        for c in range(m):\\n            if grid[r][c] == '.' and (r != 0 or c != 0) and (r != n - 1 or c != m - 1):\\n                free_cells.append((r, c))\\n\\n    min_blocked = float('inf')\\n    for i in range(1 << len(free_cells)):\\n        blocked = set()\\n        count = 0\\n        for j in range(len(free_cells)):\\n            if (i >> j) & 1:\\n                blocked.add(free_cells[j])\\n                count += 1\\n        if not can_reach(blocked):\\n            min_blocked = min(min_blocked, count)\\n\\n    print(min_blocked)\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    grid = [input() for _ in range(n)]\\n\\n    def is_valid(r, c):\\n        return 0 <= r < n and 0 <= c < m\\n\\n    def can_reach(blocked):\\n        q = [(0, 0)]\\n        visited = set([(0, 0)])\\n\\n        while q:\\n            r, c = q.pop(0)\\n            if r == n - 1 and c == m - 1:\\n                return True\\n\\n            for dr, dc in [(1, 0), (0, 1)]:\\n                nr, nc = r + dr, c + dc\\n                if is_valid(nr, nc) and (nr, nc) not in blocked and grid[nr][nc] == '.' and (nr, nc) not in visited:\\n                    q.append((nr, nc)\\n                    visited.add((nr, nc))\\n        return False\\n\\n    free_cells = []\\n    for r in range(n):\\n        for c in range(m):\\n            if grid[r][c] == '.' and (r != 0 or c != 0) and (r != n - 1 or c != m - 1):\\n                free_cells.append((r, c))\\n\\n    min_blocked = float('inf')\\n    for i in range(1 << len(free_cells)):\\n        blocked = set()\\n        count = 0\\n        for j in range(len(free_cells)):\\n            if (i >> j) & 1:\\n                blocked.add(free_cells[j])\\n                count += 1\\n        if not can_reach(blocked):\\n            min_blocked = min(min_blocked, count)\\n\\n    print(min_blocked)\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    grid = [input() for _ in range(n)]\\n\\n    def is_valid(r, c):\\n        return 0 <= r < n and 0 <= c < m\\n\\n    def can_reach(blocked):\\n        q = [(0, 0)]\\n        visited = set([(0, 0)])\\n\\n        while q:\\n            r, c = q.pop(0)\\n            if r == n - 1 and c == m - 1:\\n                return True\\n\\n            for dr, dc in [(1, 0), (0, 1)]:\\n                nr, nc = r + dr, c + dc\\n                if is_valid(nr, nc) and (nr, nc) not in blocked and grid[nr][nc] == '.' and (nr, nc) not in visited:\\n                    q.append((nr, nc)\\n                    visited.add((nr, nc))\\n        return False\\n\\n    free_cells = []\\n    for r in range(n):\\n        for c in range(m):\\n            if grid[r][c] == '.' and (r != 0 or c != 0) and (r != n - 1 or c != m - 1):\\n                free_cells.append((r, c))\\n\\n    min_blocked = float('inf')\\n    for i in range(1 << len(free_cells)):\\n        blocked = set()\\n        count = 0\\n        for j in range(len(free_cells)):\\n            if (i >> j) & 1:\\n                blocked.add(free_cells[j])\\n                count += 1\\n        if not can_reach(blocked):\\n            min_blocked = min(min_blocked, count)\\n\\n    print(min_blocked)\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    grid = [input() for _ in range(n)]\\n\\n    def is_valid(r, c):\\n        return 0 <= r < n and 0 <= c < m\\n\\n    def can_reach(blocked):\\n        q = [(0, 0)]\\n        visited = set([(0, 0)])\\n\\n        while q:\\n            r, c = q.pop(0)\\n            if r == n - 1 and c == m - 1:\\n                return True\\n\\n            for dr, dc in [(1, 0), (0, 1)]:\\n                nr, nc = r + dr, c + dc\\n                if is_valid(nr, nc) and (nr, nc) not in blocked and grid[nr][nc] == '.' and (nr, nc) not in visited:\\n                    q.append((nr, nc)\\n                    visited.add((nr, nc))\\n        return False\\n\\n    free_cells = []\\n    for r in range(n):\\n        for c in range(m):\\n            if grid[r][c] == '.' and (r != 0 or c != 0) and (r != n - 1 or c != m - 1):\\n                free_cells.append((r, c))\\n\\n    min_blocked = float('inf')\\n    for i in range(1 << len(free_cells)):\\n        blocked = set()\\n        count = 0\\n        for j in range(len(free_cells)):\\n            if (i >> j) & 1:\\n                blocked.add(free_cells[j])\\n                count += 1\\n        if not can_reach(blocked):\\n            min_blocked = min(min_blocked, count)\\n\\n    print(min_blocked)\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"The only difference between the easy and the hard versions is the maximum value of $$$k$$$.You are given an infinite sequence of form \"112123123412345$$$\\dots$$$\" which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from $$$1$$$ to $$$1$$$, the second one \u2014 from $$$1$$$ to $$$2$$$, the third one \u2014 from $$$1$$$ to $$$3$$$, $$$\\dots$$$, the $$$i$$$-th block consists of all numbers from $$$1$$$ to $$$i$$$. So the first $$$56$$$ elements of the sequence are \"11212312341234512345612345671234567812345678912345678910\". Elements of the sequence are numbered from one. For example, the $$$1$$$-st element of the sequence is $$$1$$$, the $$$3$$$-rd element of the sequence is $$$2$$$, the $$$20$$$-th element of the sequence is $$$5$$$, the $$$38$$$-th element is $$$2$$$, the $$$56$$$-th element of the sequence is $$$0$$$.Your task is to answer $$$q$$$ independent queries. In the $$$i$$$-th query you are given one integer $$$k_i$$$. Calculate the digit at the position $$$k_i$$$ of the sequence.","input_specification":"The first line of the input contains one integer $$$q$$$ ($$$1 \\le q \\le 500$$$) \u2014 the number of queries.\nThe $$$i$$$-th of the following $$$q$$$ lines contains one integer $$$k_i$$$ $$$(1 \\le k_i \\le 10^9)$$$ \u2014 the description of the corresponding query.\n","output_specification":"Print $$$q$$$ lines. In the $$$i$$$-th line print one digit $$$x_i$$$ $$$(0 \\le x_i \\le 9)$$$ \u2014 the answer to the query $$$i$$$, i.e. $$$x_i$$$ should be equal to the element at the position $$$k_i$$$ of the sequence.\n","notes":null,"sample_inputs":[],"sample_outputs":[],"src_uid":"1216_E1","lang_cluster":"Python","difficulty":1900,"human_solution":"import sys\r\nfrom collections import deque\r\ninput = sys.stdin.readline\r\ndef fgh():\r\n    return [int(xx) for xx in input().split()]\r\ndef fg():\r\n    return int(input())\r\nstep = [1]\r\nfor i in range(22):\r\n    step.append(step[-1] * 10)\r\ndef f(n):\r\n    ans = 0\r\n    for i in range(20):\r\n        ans += max(0, n - step[i] + 1)\r\n    return ans\r\ndef g(n):\r\n    ans = 0\r\n    for i in range(20):\r\n        q = max(0, n - step[i] + 1)\r\n        ans += q * (q + 1) \/\/ 2 + q * max(0, n - (step[i] + q))\r\n    return ans\r\nfor __ in range(fg()):\r\n    n = fg()\r\n    l = 0\r\n    r = 10 ** 19\r\n    while r - l > 1:\r\n        m = (l + r) \/\/ 2\r\n        if g(m) < n:\r\n            l = m\r\n        else:\r\n            r = m\r\n    n -= g(l)\r\n    r = l + 1\r\n    l = 0\r\n    while r - l > 1:\r\n        m = (l + r) \/\/ 2\r\n        if f(m) < n:\r\n            l = m\r\n        else:\r\n            r = m\r\n    n -= f(l)\r\n    print(str(l + 1)[n - 1])\r\n","testcases":"[{'input': ['5\\r\\n1\\r\\n3\\r\\n20\\r\\n38\\r\\n56\\r\\n'], 'output': ['1\\r\\n2\\r\\n5\\r\\n2\\r\\n0\\r\\n']}, {'input': ['4\\r\\n2132\\r\\n506\\r\\n999999999\\r\\n1000000000\\r\\n'], 'output': ['8\\r\\n2\\r\\n9\\r\\n8\\r\\n']}, {'input': ['1\\r\\n388645\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['1\\r\\n472069\\r\\n'], 'output': ['4\\r\\n']}, {'input': ['1\\r\\n555493\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1\\r\\n671621\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['1\\r\\n755045\\r\\n'], 'output': ['4\\r\\n']}, {'input': ['1\\r\\n838469\\r\\n'], 'output': ['4\\r\\n']}, {'input': ['1\\r\\n921893\\r\\n'], 'output': ['8\\r\\n']}, {'input': ['1\\r\\n123151223\\r\\n'], 'output': ['7\\r\\n']}, {'input': ['2\\r\\n555831672\\r\\n1395496\\r\\n'], 'output': ['5\\r\\n1\\r\\n']}, {'input': ['10\\r\\n1\\r\\n10\\r\\n100\\r\\n1000\\r\\n10000\\r\\n100000\\r\\n1000000\\r\\n10000000\\r\\n100000000\\r\\n1000000000\\r\\n'], 'output': ['1\\r\\n4\\r\\n1\\r\\n4\\r\\n9\\r\\n2\\r\\n6\\r\\n2\\r\\n6\\r\\n8\\r\\n']}]","id":159,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def count_digits(n):  \\n    count = 0\\n    power_of_10 = 1\\n    digits = 1\\n    while power_of_10 <= n:\\n        next_power_of_10 = power_of_10 * 10\\n        count += (min(n + 1, next_power_of_10) - power_of_10) * digits\\n        power_of_10 = next_power_of_10\\n        digits += 1\\n    return count\\n\\ndef get_block_length(n):\\n    length = 0\\n    for i in range(1, n + 1):\\n        length += count_digits(i)\\n    return length\\n\\ndef solve():\\n    q = int(input())\\n    for _ in range(q):\\n        k = int(input())\\n        left, right = 1, 2 * 10**4  # Initial upper bound, can be adjusted\\n        block_num = 0\\n        while left <= right:\\n            mid = (left + right) \/\/ 2\\n            block_length = get_block_length(mid)\\n            if block_length < k:\\n                block_num = mid\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        block_num += 1\\n        prev_block_length = get_block_length(block_num - 1) if block_num > 1 else 0\\n        relative_pos = k - prev_block_length\\n        num_len = 0\\n        num_start = 1\\n        while True:\\n            num_len = count_digits(num_start)\\n            if relative_pos <= num_len:\\n                break\\n            relative_pos -= num_len\\n            num_start += 1\\n        num_start = (num_start) \\n        num_str = str(num_start)\\n        digit_index = relative_pos - 1\\n        print(num_str[digit_index])\\n\\nsolve()\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def count_digits(n):\\n    if n < 10:\\n        return n\\n    digits = 0\\n    power_of_10 = 1\\n    while power_of_10 <= n:\\n        next_power_of_10 = power_of_10 * 10\\n        digits += (min(n + 1, next_power_of_10) - power_of_10) * len(str(power_of_10))\\n        power_of_10 = next_power_of_10\\n    return digits\\n\\ndef get_block_length(n):\\n    length = 0\\n    for i in range(1, n + 1):\\n        length += count_digits(i)\\n    return length\\n\\ndef solve():\\n    q = int(input())\\n    for _ in range(q):\\n        k = int(input())\\n        left, right = 1, 2 * 10**4\\n        block_index = 0\\n        while left <= right:\\n            mid = (left + right) \/\/ 2\\n            block_length = get_block_length(mid)\\n            if block_length >= k:\\n                block_index = mid\\n                right = mid - 1\\n            else:\\n                left = mid + 1\\n\\n        prev_block_length = get_block_length(block_index - 1) if block_index > 1 else 0\\n        relative_pos = k - prev_block_length\\n        num = 0\\n        num_len = 0\\n        for i in range(1, block_index + 1):\\n            num_len = count_digits(i)\\n            if relative_pos <= num_len:\\n                num = i\\n                break\\n            else:\\n                relative_pos -= num_len\\n        \\n        s = str(num)\\n        digit_index = relative_pos - 1\\n        print(s[digit_index])\\n\\n\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def count_digits(n):  \\n    count = 0\\n    power_of_10 = 1\\n    digits = 1\\n    while power_of_10 <= n:\\n        next_power_of_10 = power_of_10 * 10\\n        count += (min(n + 1, next_power_of_10) - power_of_10) * digits\\n        power_of_10 = next_power_of_10\\n        digits += 1\\n    return count\\n\\ndef get_block_length(n):\\n    length = 0\\n    for i in range(1, n + 1):\\n        length += count_digits(i)\\n    return length\\n\\ndef solve():\\n    q = int(input())\\n    for _ in range(q):\\n        k = int(input())\\n        left, right = 1, 2 * 10**4  # Initial upper bound, can be adjusted\\n        block_num = 0\\n        while left <= right:\\n            mid = (left + right) \/\/ 2\\n            block_length = get_block_length(mid)\\n            if block_length < k:\\n                block_num = mid\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        block_num += 1\\n        prev_block_length = get_block_length(block_num - 1) if block_num > 1 else 0\\n        relative_pos = k - prev_block_length\\n        num_len = 0\\n        num_start = 1\\n        while True:\\n            num_len = count_digits(num_start)\\n            if relative_pos <= num_len:\\n                break\\n            relative_pos -= num_len\\n            num_start += 1\\n        num_start = (num_start) \\n        num_str = str(num_start)\\n        digit_index = relative_pos - 1\\n        print(num_str[digit_index])\\n\\nsolve()\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def count_digits(n):\\n    if n < 10:\\n        return n\\n    digits = 0\\n    power_of_10 = 1\\n    while power_of_10 <= n:\\n        next_power_of_10 = power_of_10 * 10\\n        digits += (min(n + 1, next_power_of_10) - power_of_10) * len(str(power_of_10))\\n        power_of_10 = next_power_of_10\\n    return digits\\n\\ndef get_block_length(n):\\n    length = 0\\n    for i in range(1, n + 1):\\n        length += count_digits(i)\\n    return length\\n\\ndef solve():\\n    q = int(input())\\n    for _ in range(q):\\n        k = int(input())\\n        left, right = 1, 2 * 10**4\\n        block_index = 0\\n        while left <= right:\\n            mid = (left + right) \/\/ 2\\n            block_length = get_block_length(mid)\\n            if block_length >= k:\\n                block_index = mid\\n                right = mid - 1\\n            else:\\n                left = mid + 1\\n\\n        prev_block_length = get_block_length(block_index - 1) if block_index > 1 else 0\\n        relative_pos = k - prev_block_length\\n        num = 0\\n        num_len = 0\\n        for i in range(1, block_index + 1):\\n            num_len = count_digits(i)\\n            if relative_pos <= num_len:\\n                num = i\\n                break\\n            else:\\n                relative_pos -= num_len\\n        \\n        s = str(num)\\n        digit_index = relative_pos - 1\\n        print(s[digit_index])\\n\\n\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"The only difference between the easy and the hard versions is the maximum value of $$$k$$$.You are given an infinite sequence of form \"112123123412345$$$\\dots$$$\" which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from $$$1$$$ to $$$1$$$, the second one \u2014 from $$$1$$$ to $$$2$$$, the third one \u2014 from $$$1$$$ to $$$3$$$, $$$\\dots$$$, the $$$i$$$-th block consists of all numbers from $$$1$$$ to $$$i$$$. So the first $$$56$$$ elements of the sequence are \"11212312341234512345612345671234567812345678912345678910\". Elements of the sequence are numbered from one. For example, the $$$1$$$-st element of the sequence is $$$1$$$, the $$$3$$$-rd element of the sequence is $$$2$$$, the $$$20$$$-th element of the sequence is $$$5$$$, the $$$38$$$-th element is $$$2$$$, the $$$56$$$-th element of the sequence is $$$0$$$.Your task is to answer $$$q$$$ independent queries. In the $$$i$$$-th query you are given one integer $$$k_i$$$. Calculate the digit at the position $$$k_i$$$ of the sequence.","input_specification":"The first line of the input contains one integer $$$q$$$ ($$$1 \\le q \\le 500$$$) \u2014 the number of queries.\nThe $$$i$$$-th of the following $$$q$$$ lines contains one integer $$$k_i$$$ $$$(1 \\le k_i \\le 10^{18})$$$ \u2014 the description of the corresponding query.\n","output_specification":"Print $$$q$$$ lines. In the $$$i$$$-th line print one digit $$$x_i$$$ $$$(0 \\le x_i \\le 9)$$$ \u2014 the answer to the query $$$i$$$, i.e. $$$x_i$$$ should be equal to the element at the position $$$k_i$$$ of the sequence.\n","notes":null,"sample_inputs":[],"sample_outputs":[],"src_uid":"1216_E2","lang_cluster":"Python","difficulty":2200,"human_solution":"from math import *\n\n\ndef quick_pow(n, p):\n    ret = 1\n    while p:\n        if p & 1:\n            ret *= n\n        n *= n\n        p >>= 1\n    return ret\n\n\ndef len(n):\n    cnt = 0\n    while n:\n        cnt += 1\n        n = int(n\/10)\n    return cnt\n\n\nsum = [0, 45, 9045, 1395495, 189414495, 23939649495, 2893942449495,\n       339393974949495, 38939394344949495, 4393939398494949495]\npre = [0, 9, 189, 2889, 38889, 488889,\n       5888889, 68888889, 788888889, 8888888889]\n# int q, l\n# llk, start, cnt, finish_int, i, left, right, mid, a, b, c\nq = int(input())\nfor a in range(q):\n    k = int(input())\n    # l = upper_bound(sum, sum + 10, k) - sum\n    for l in range(11):\n        if sum[l] >= k:\n            break\n    k -= sum[l - 1]\n    start = pre[l - 1] + l\n    # \/\/ left = 0, right = quick_pow(10, l) - quick_pow(10, l - 1) - 1\n    # \/\/ while (left < right) {\n    #     \/\/ mid = (left + right) >> 1\n    #     \/\/ if ((start + start + l * (mid - 1)) * mid \/ 2 < k)\n    #     \/\/ left = mid + 1\n    #     \/\/ else\n    #     \/\/ right = mid - 1\n    #     \/\/ }\n    # \/\/ if ((start + start + l * (right - 1)) * right \/ 2 > k)\n    # \/\/ --right\n    a = l\n    b = 2 * start + l\n    c = 2 * start - 2 * k\n    cnt = int(ceil((-b + sqrt(b * b - 4 * a * c)) \/ (2 * a)))\n    # print(int((start + start + (cnt - 1) * l) * cnt))\n    # print(int(int((start + start + (cnt - 1) * l) * cnt)\/\/2))\n    k -= ((start + start + (cnt - 1) * l) * cnt \/\/ 2)\n    # \/\/ if (right > 1)\n    # \/\/ k -= pre[len(right) - 1] + len(right - 1) * (right - 1 - quick_pow(10, len(right) - 1) + 1)\n    finish_int = quick_pow(10, l - 1) + cnt\n    left = 1\n    right = finish_int\n    while left < right:\n        mid = (left + right) >> 1\n        t = len(mid)\n        if pre[t - 1] + len(mid) * (mid - quick_pow(10, t - 1) + 1) < k:\n            left = mid + 1\n        else:\n            right = mid\n    t = len(right)\n    if right > 1:\n        k -= pre[t - 1] + len(right - 1) * (right - quick_pow(10, t - 1))\n    # stringstream ss\n    # string str\n    # ss << left\n    # ss >> str\n    # cout << str[k - 1] << endl\n    right = str(right)\n    print(right[k-1])\n\n  \t \t\t  \t\t \t\t  \t \t   \t\t \t \t","testcases":"[{'input': ['5\\r\\n1\\r\\n3\\r\\n20\\r\\n38\\r\\n56\\r\\n'], 'output': ['1\\r\\n2\\r\\n5\\r\\n2\\r\\n0\\r\\n']}, {'input': ['4\\r\\n2132\\r\\n506\\r\\n999999999999999999\\r\\n1000000000000000000\\r\\n'], 'output': ['8\\r\\n2\\r\\n4\\r\\n1\\r\\n']}, {'input': ['1\\r\\n388645\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['1\\r\\n472069\\r\\n'], 'output': ['4\\r\\n']}, {'input': ['1\\r\\n555493\\r\\n'], 'output': ['2\\r\\n']}, {'input': ['1\\r\\n671621\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['1\\r\\n755045\\r\\n'], 'output': ['4\\r\\n']}, {'input': ['1\\r\\n838469\\r\\n'], 'output': ['4\\r\\n']}, {'input': ['1\\r\\n921893\\r\\n'], 'output': ['8\\r\\n']}, {'input': ['1\\r\\n1231513123\\r\\n'], 'output': ['6\\r\\n']}, {'input': ['1\\r\\n306200613881388645\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['1\\r\\n307026857059472069\\r\\n'], 'output': ['5\\r\\n']}, {'input': ['1\\r\\n307853100237555493\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['1\\r\\n308679339120671621\\r\\n'], 'output': ['4\\r\\n']}, {'input': ['1\\r\\n309505582298755045\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['1\\r\\n310331825476838469\\r\\n'], 'output': ['5\\r\\n']}, {'input': ['1\\r\\n311158068654921893\\r\\n'], 'output': ['4\\r\\n']}, {'input': ['2\\r\\n555221491191831672\\r\\n1395496\\r\\n'], 'output': ['7\\r\\n1\\r\\n']}, {'input': ['19\\r\\n1\\r\\n10\\r\\n100\\r\\n1000\\r\\n10000\\r\\n100000\\r\\n1000000\\r\\n10000000\\r\\n100000000\\r\\n1000000000\\r\\n10000000000\\r\\n100000000000\\r\\n1000000000000\\r\\n10000000000000\\r\\n100000000000000\\r\\n1000000000000000\\r\\n10000000000000000\\r\\n100000000000000000\\r\\n1000000000000000000\\r\\n'], 'output': ['1\\r\\n4\\r\\n1\\r\\n4\\r\\n9\\r\\n2\\r\\n6\\r\\n2\\r\\n6\\r\\n8\\r\\n1\\r\\n1\\r\\n9\\r\\n8\\r\\n3\\r\\n7\\r\\n6\\r\\n1\\r\\n1\\r\\n']}, {'input': ['1\\r\\n9124\\r\\n'], 'output': ['4\\r\\n']}]","id":160,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def count_digits(n):\\n    if n == 0:\\n        return 0\\n    length = len(str(n))\\n    count = 0\\n    for i in range(1, length):\\n        count += 9 * (10**(i-1)) * i\\n    count += (n - 10**(length-1) + 1) * length\\n    return count\\n\\ndef get_block_length(n):\\n    return n * (n + 1) \/\/ 2\\n\\ndef solve():\\n    q = int(input())\\n    for _ in range(q):\\n        k = int(input())\\n        left, right = 1, 2 * 10**9\\n        block_num = 0\\n        while left <= right:\\n            mid = (left + right) \/\/ 2\\n            if get_block_length(mid) >= k:\\n                block_num = mid\\n                right = mid - 1\\n            else:\\n                left = mid + 1\\n        \\n        prev_block_len = get_block_length(block_num - 1) if block_num > 1 else 0\\n        pos_in_block = k - prev_block_len\\n        \\n        num_in_block = 0\\n        left, right = 1, block_num\\n        while left <= right:\\n            mid = (left + right) \/\/ 2\\n            if count_digits(mid) >= pos_in_block:\\n                num_in_block = mid\\n                right = mid - 1\\n            else:\\n                left = mid + 1\\n        \\n        prev_digits = count_digits(num_in_block - 1) if num_in_block > 1 else 0\\n        digit_pos = pos_in_block - prev_digits\\n        digit = str(num_in_block)[digit_pos - 1]\\n        print(digit)\\n\\n\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def count_digits(n):\\n    count = 0\\n    power_of_10 = 1\\n    digits = 1\\n    while n > 0:\\n        next_power_of_10 = power_of_10 * 10\\n        num_digits = min(n, next_power_of_10 - power_of_10)\\n        count += num_digits * digits\\n        n -= num_digits\\n        power_of_10 = next_power_of_10\\n        digits += 1\\n    return count\\n\\ndef get_block_length(n):\\n    length = 0\\n    for i in range(1, n + 1):\\n        length += count_digits(i)\\n    return length\\n\\ndef solve():\\n    q = int(input())\\n    for _ in range(q):\\n        k = int(input())\\n        left, right = 1, 2 * 10**9\\n        block_num = 0\\n        while left <= right:\\n            mid = (left + right) \/\/ 2\\n            block_len = get_block_length(mid)\\n            if block_len < k:\\n                block_num = mid\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        block_num += 1\\n        prev_block_len = get_block_length(block_num - 1) if block_num > 1 else 0\\n        pos_in_block = k - prev_block_len\\n        num_len = 0\\n        num = 1\\n        while True:\\n            digit_count = count_digits(num)\\n            if pos_in_block <= digit_count:\\n                break\\n            pos_in_block -= digit_count\\n            num += 1\\n        \\n        s = str(num)\\n        digit_index = pos_in_block - 1\\n        print(s[digit_index])\\n\\n\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def count_digits(n):\\n    if n == 0:\\n        return 0\\n    length = len(str(n))\\n    count = 0\\n    for i in range(1, length):\\n        count += 9 * (10**(i-1)) * i\\n    count += (n - 10**(length-1) + 1) * length\\n    return count\\n\\ndef get_block_length(n):\\n    return n * (n + 1) \/\/ 2\\n\\ndef solve():\\n    q = int(input())\\n    for _ in range(q):\\n        k = int(input())\\n        left, right = 1, 2 * 10**9\\n        block_num = 0\\n        while left <= right:\\n            mid = (left + right) \/\/ 2\\n            if get_block_length(mid) >= k:\\n                block_num = mid\\n                right = mid - 1\\n            else:\\n                left = mid + 1\\n        \\n        prev_block_len = get_block_length(block_num - 1) if block_num > 1 else 0\\n        pos_in_block = k - prev_block_len\\n        \\n        num_in_block = 0\\n        left, right = 1, block_num\\n        while left <= right:\\n            mid = (left + right) \/\/ 2\\n            if count_digits(mid) >= pos_in_block:\\n                num_in_block = mid\\n                right = mid - 1\\n            else:\\n                left = mid + 1\\n        \\n        prev_digits = count_digits(num_in_block - 1) if num_in_block > 1 else 0\\n        digit_pos = pos_in_block - prev_digits\\n        digit = str(num_in_block)[digit_pos - 1]\\n        print(digit)\\n\\n\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def count_digits(n):\\n    count = 0\\n    power_of_10 = 1\\n    digits = 1\\n    while n > 0:\\n        next_power_of_10 = power_of_10 * 10\\n        num_digits = min(n, next_power_of_10 - power_of_10)\\n        count += num_digits * digits\\n        n -= num_digits\\n        power_of_10 = next_power_of_10\\n        digits += 1\\n    return count\\n\\ndef get_block_length(n):\\n    length = 0\\n    for i in range(1, n + 1):\\n        length += count_digits(i)\\n    return length\\n\\ndef solve():\\n    q = int(input())\\n    for _ in range(q):\\n        k = int(input())\\n        left, right = 1, 2 * 10**9\\n        block_num = 0\\n        while left <= right:\\n            mid = (left + right) \/\/ 2\\n            block_len = get_block_length(mid)\\n            if block_len < k:\\n                block_num = mid\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        block_num += 1\\n        prev_block_len = get_block_length(block_num - 1) if block_num > 1 else 0\\n        pos_in_block = k - prev_block_len\\n        num_len = 0\\n        num = 1\\n        while True:\\n            digit_count = count_digits(num)\\n            if pos_in_block <= digit_count:\\n                break\\n            pos_in_block -= digit_count\\n            num += 1\\n        \\n        s = str(num)\\n        digit_index = pos_in_block - 1\\n        print(s[digit_index])\\n\\n\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"You are given a directed graph with $$$n$$$ vertices and $$$m$$$ directed edges without self-loops or multiple edges.Let's denote the $$$k$$$-coloring of a digraph as following: you color each edge in one of $$$k$$$ colors. The $$$k$$$-coloring is good if and only if there no cycle formed by edges of same color.Find a good $$$k$$$-coloring of given digraph with minimum possible $$$k$$$.","input_specification":"The first line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\le n \\le 5000$$$, $$$1 \\le m \\le 5000$$$) \u2014 the number of vertices and edges in the digraph, respectively.\nNext $$$m$$$ lines contain description of edges \u2014 one per line. Each edge is a pair of integers $$$u$$$ and $$$v$$$ ($$$1 \\le u, v \\le n$$$, $$$u \\ne v$$$) \u2014 there is directed edge from $$$u$$$ to $$$v$$$ in the graph.\nIt is guaranteed that each ordered pair $$$(u, v)$$$ appears in the list of edges at most once.\n","output_specification":"In the first line print single integer $$$k$$$ \u2014 the number of used colors in a good $$$k$$$-coloring of given graph.\nIn the second line print $$$m$$$ integers $$$c_1, c_2, \\dots, c_m$$$ ($$$1 \\le c_i \\le k$$$), where $$$c_i$$$ is a color of the $$$i$$$-th edge (in order as they are given in the input).\nIf there are multiple answers print any of them (you still have to minimize $$$k$$$).\n","notes":null,"sample_inputs":[],"sample_outputs":[],"src_uid":"1217_D","lang_cluster":"Python","difficulty":2100,"human_solution":"class Graph:\r\n    def __init__(self, n, m):\r\n        self.nodes = n\r\n        self.edges = m\r\n        self.adj = [[] for i in range(n)]\r\n        self.color = [1 for i in range(m)]\r\n        self.vis = [0 for i in range(n)]\r\n        self.colors = 1\r\n\r\n    def add_edge(self, u, v, i):\r\n        self.adj[u].append((i, v))\r\n\r\n    def dfs(self, u):\r\n        self.vis[u] = 1\r\n        for i, v in self.adj[u]:\r\n            if self.vis[v] == 1:\r\n                self.colors = 2\r\n                self.color[i] = 2\r\n            if self.vis[v] == 0:\r\n                self.dfs(v)\r\n        self.vis[u] = 2\r\n\r\n    def solve(self):\r\n        for i in range(self.nodes):\r\n            if self.vis[i] == 0:\r\n                self.dfs(i)\r\n        print(self.colors)\r\n        print(' '.join(map(str, self.color)))\r\n\r\n\r\nn, m = map(int, input().split(' '))\r\ngraph = Graph(n, m)\r\nfor i in range(m):\r\n    u, v = map(int, input().split(' '))\r\n    graph.add_edge(u-1, v-1, i)\r\ngraph.solve()","testcases":"[{'input': ['4 5\\r\\n1 2\\r\\n1 3\\r\\n3 4\\r\\n2 4\\r\\n1 4\\r\\n'], 'output': ['1\\r\\n1 1 1 1 1 \\r\\n']}, {'input': ['3 3\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n'], 'output': ['2\\r\\n1 1 2 \\r\\n']}, {'input': ['6 8\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n4 3\\r\\n5 4\\r\\n6 5\\r\\n1 6\\r\\n6 2\\r\\n'], 'output': ['2\\r\\n1 1 2 1 1 1 1 1 \\r\\n']}, {'input': ['3 4\\r\\n1 2\\r\\n2 3\\r\\n3 2\\r\\n3 1\\r\\n'], 'output': ['2\\r\\n1 1 2 2 \\r\\n']}, {'input': ['3 6\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n2 1\\r\\n1 3\\r\\n3 2\\r\\n'], 'output': ['2\\r\\n1 1 2 2 1 2 \\r\\n']}, {'input': ['3 6\\r\\n1 2\\r\\n2 3\\r\\n3 1\\r\\n2 1\\r\\n3 2\\r\\n1 3\\r\\n'], 'output': ['2\\r\\n1 1 2 2 2 1 \\r\\n']}, {'input': ['10 2\\r\\n8 7\\r\\n10 5\\r\\n'], 'output': ['1\\r\\n1 1 \\r\\n']}, {'input': ['12 7\\r\\n11 8\\r\\n4 2\\r\\n7 5\\r\\n2 9\\r\\n7 2\\r\\n5 4\\r\\n10 8\\r\\n'], 'output': ['1\\r\\n1 1 1 1 1 1 1 \\r\\n']}, {'input': ['2 1\\r\\n2 1\\r\\n'], 'output': ['1\\r\\n1 \\r\\n']}, {'input': ['2 2\\r\\n2 1\\r\\n1 2\\r\\n'], 'output': ['2\\r\\n2 1 \\r\\n']}, {'input': ['7 10\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 1\\r\\n1 3\\r\\n3 5\\r\\n5 7\\r\\n'], 'output': ['2\\r\\n1 1 1 1 1 1 2 1 1 1 \\r\\n']}, {'input': ['14 50\\r\\n8 10\\r\\n5 11\\r\\n3 6\\r\\n14 6\\r\\n4 11\\r\\n6 8\\r\\n9 8\\r\\n3 7\\r\\n4 9\\r\\n4 8\\r\\n5 10\\r\\n13 5\\r\\n8 3\\r\\n13 12\\r\\n5 8\\r\\n4 5\\r\\n12 1\\r\\n14 10\\r\\n10 13\\r\\n6 13\\r\\n2 5\\r\\n6 4\\r\\n14 4\\r\\n11 12\\r\\n5 7\\r\\n1 13\\r\\n9 1\\r\\n5 12\\r\\n9 7\\r\\n7 10\\r\\n3 13\\r\\n3 10\\r\\n5 4\\r\\n13 3\\r\\n11 2\\r\\n10 3\\r\\n7 11\\r\\n7 3\\r\\n13 14\\r\\n6 2\\r\\n7 1\\r\\n14 11\\r\\n10 9\\r\\n4 3\\r\\n11 5\\r\\n12 2\\r\\n8 12\\r\\n13 10\\r\\n12 11\\r\\n2 10\\r\\n'], 'output': ['2\\r\\n2 1 1 1 2 1 1 1 1 1 1 1 2 1 1 2 2 1 2 2 2 1 1 1 1 1 2 1 1 2 2 2 1 1 1 1 2 2 1 2 2 1 1 2 2 1 2 1 2 1 \\r\\n']}, {'input': ['19 27\\r\\n6 13\\r\\n15 5\\r\\n12 15\\r\\n16 18\\r\\n9 18\\r\\n9 17\\r\\n1 16\\r\\n3 14\\r\\n8 7\\r\\n19 7\\r\\n14 6\\r\\n16 13\\r\\n15 12\\r\\n14 12\\r\\n13 5\\r\\n2 3\\r\\n13 11\\r\\n6 8\\r\\n7 14\\r\\n3 17\\r\\n8 2\\r\\n9 12\\r\\n18 14\\r\\n11 16\\r\\n17 3\\r\\n13 18\\r\\n1 3\\r\\n'], 'output': ['2\\r\\n1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 2 2 1 \\r\\n']}, {'input': ['8 6\\r\\n3 5\\r\\n8 3\\r\\n3 6\\r\\n8 5\\r\\n4 6\\r\\n2 5\\r\\n'], 'output': ['1\\r\\n1 1 1 1 1 1 \\r\\n']}, {'input': ['3 4\\r\\n3 1\\r\\n1 3\\r\\n2 3\\r\\n3 2\\r\\n'], 'output': ['2\\r\\n2 1 2 1 \\r\\n']}, {'input': ['5 12\\r\\n4 1\\r\\n4 5\\r\\n5 3\\r\\n5 4\\r\\n2 4\\r\\n5 1\\r\\n1 5\\r\\n1 4\\r\\n3 4\\r\\n3 5\\r\\n2 1\\r\\n4 2\\r\\n'], 'output': ['2\\r\\n2 2 1 1 2 2 1 1 1 2 2 1 \\r\\n']}, {'input': ['3 5\\r\\n1 3\\r\\n1 2\\r\\n3 2\\r\\n3 1\\r\\n2 3\\r\\n'], 'output': ['2\\r\\n1 1 1 2 2 \\r\\n']}, {'input': ['16 21\\r\\n7 9\\r\\n5 1\\r\\n3 9\\r\\n4 7\\r\\n15 5\\r\\n12 13\\r\\n12 7\\r\\n7 5\\r\\n1 4\\r\\n9 3\\r\\n13 16\\r\\n13 15\\r\\n9 15\\r\\n7 15\\r\\n16 3\\r\\n13 5\\r\\n3 7\\r\\n1 7\\r\\n5 13\\r\\n1 2\\r\\n2 9\\r\\n'], 'output': ['2\\r\\n1 2 2 1 1 1 1 1 1 1 1 2 1 1 1 2 2 1 1 1 1 \\r\\n']}, {'input': ['18 74\\r\\n12 17\\r\\n6 3\\r\\n7 5\\r\\n11 13\\r\\n13 12\\r\\n16 2\\r\\n15 3\\r\\n10 6\\r\\n18 1\\r\\n6 1\\r\\n10 18\\r\\n3 16\\r\\n16 5\\r\\n14 12\\r\\n12 1\\r\\n9 6\\r\\n13 11\\r\\n11 17\\r\\n13 1\\r\\n1 7\\r\\n18 12\\r\\n6 8\\r\\n11 15\\r\\n2 9\\r\\n9 12\\r\\n7 4\\r\\n8 15\\r\\n6 9\\r\\n11 9\\r\\n11 18\\r\\n3 6\\r\\n5 7\\r\\n1 16\\r\\n2 6\\r\\n17 11\\r\\n4 8\\r\\n14 1\\r\\n7 13\\r\\n18 14\\r\\n7 16\\r\\n15 5\\r\\n11 2\\r\\n18 17\\r\\n9 16\\r\\n4 13\\r\\n17 5\\r\\n8 6\\r\\n18 6\\r\\n6 4\\r\\n17 10\\r\\n10 7\\r\\n5 9\\r\\n7 6\\r\\n17 1\\r\\n9 13\\r\\n7 11\\r\\n9 5\\r\\n4 17\\r\\n18 15\\r\\n12 4\\r\\n8 3\\r\\n9 2\\r\\n7 2\\r\\n8 4\\r\\n8 11\\r\\n16 10\\r\\n13 18\\r\\n16 12\\r\\n3 10\\r\\n18 10\\r\\n12 3\\r\\n12 14\\r\\n9 14\\r\\n3 11\\r\\n'], 'output': ['2\\r\\n1 1 1 1 2 1 2 2 2 2 1 1 2 2 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 2 2 2 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 1 2 2 1 1 2 1 1 2 1 1 1 2 1 1 2 1 1 2 1 1 2 2 1 1 1 \\r\\n']}, {'input': ['14 23\\r\\n8 5\\r\\n6 3\\r\\n5 9\\r\\n3 1\\r\\n6 1\\r\\n13 11\\r\\n11 2\\r\\n14 4\\r\\n14 5\\r\\n4 2\\r\\n10 3\\r\\n14 6\\r\\n4 1\\r\\n8 2\\r\\n11 1\\r\\n14 1\\r\\n5 13\\r\\n1 4\\r\\n9 5\\r\\n8 13\\r\\n1 2\\r\\n4 8\\r\\n2 6\\r\\n'], 'output': ['2\\r\\n1 1 1 2 2 1 1 1 1 1 1 1 2 1 2 1 1 1 2 1 1 1 1 \\r\\n']}, {'input': ['4 4\\r\\n4 2\\r\\n3 1\\r\\n2 3\\r\\n4 1\\r\\n'], 'output': ['1\\r\\n1 1 1 1 \\r\\n']}, {'input': ['10 44\\r\\n9 2\\r\\n3 9\\r\\n3 10\\r\\n6 8\\r\\n10 9\\r\\n2 1\\r\\n5 9\\r\\n10 1\\r\\n4 2\\r\\n3 1\\r\\n3 6\\r\\n3 7\\r\\n1 9\\r\\n1 4\\r\\n1 8\\r\\n9 7\\r\\n7 3\\r\\n1 6\\r\\n4 9\\r\\n7 5\\r\\n1 2\\r\\n4 3\\r\\n10 7\\r\\n8 1\\r\\n8 10\\r\\n9 8\\r\\n6 10\\r\\n6 5\\r\\n2 9\\r\\n9 1\\r\\n3 4\\r\\n5 7\\r\\n6 3\\r\\n2 8\\r\\n7 6\\r\\n4 5\\r\\n8 6\\r\\n2 10\\r\\n10 2\\r\\n5 8\\r\\n2 7\\r\\n8 7\\r\\n3 5\\r\\n9 6\\r\\n'], 'output': ['2\\r\\n1 2 2 2 2 2 2 2 2 2 1 2 1 1 1 1 1 1 2 1 1 2 1 2 1 1 2 1 2 2 1 2 2 1 1 1 1 1 2 2 1 1 1 1 \\r\\n']}]","id":161,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    edges = []\\n    for _ in range(m):\\n        u, v = map(int, input().split())\\n        edges.append((u, v))\\n    \\n    colors = [0] * m\\n    \\n    def is_good(colors):\\n        for color in set(colors):\\n            adj = [[] for _ in range(n + 1)]\\n            for i in range(m):\\n                if colors[i] == color:\\n                    u, v = edges[i]\\n                    adj[u].append(v)\\n            \\n            visited = [0] * (n + 1)\\n            recursion_stack = [0] * (n + 1)\\n            \\n            def dfs(u):\\n                visited[u] = 1\\n                recursion_stack[u] = 1\\n                \\n                for v in adj[u]:\\n                    if not visited[v]:\\n                        if dfs(v):\\n                            return True\\n                    elif recursion_stack[v]:\\n                        return True\\n                \\n                recursion_stack[u] = 0\\n                return False\\n            \\n            for i in range(1, n + 1):\\n                if not visited[i]:\\n                    if dfs(i):\\n                        return False\\n        return True\\n    \\n    k = 0\\n    for k_try in range(1, m + 1):\\n        found_coloring = False\\n        for i in range(k_try ** m):\\n            temp_colors = []\\n            temp = i\\n            for _ in range(m):\\n                temp_colors.append(temp % k_try + 1)\\n                temp \/\/= k_try\\n            \\n            if is_good(temp_colors):\\n                k = k_try\\n                colors = temp_colors\\n                found_coloring = True\\n                break\\n        if found_coloring:\\n            break\\n    \\n    print(k)\\n    print(*colors)\\n\\nsolve()\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    edges = []\\n    for _ in range(m):\\n        u, v = map(int, input().split())\\n        edges.append((u, v))\\n\\n    adj = [[] for _ in range(n + 1)]\\n    for u, v in edges:\\n        adj[u].append(v)\\n\\n    colors = [0] * m\\n    color_count = 0\\n    \\n    def has_cycle(color, colored_edges):\\n        colored_adj = [[] for _ in range(n + 1)]\\n        for i, (u, v) in enumerate(edges):\\n            if colors[i] == color:\\n                colored_adj[u].append(v)\\n        \\n        visited = [0] * (n + 1)\\n        recursion_stack = [0] * (n + 1)\\n        \\n        def dfs(u):\\n            visited[u] = 1\\n            recursion_stack[u] = 1\\n            \\n            for v in colored_adj[u]:\\n                if not visited[v]:\\n                    if dfs(v):\\n                        return True\\n                elif recursion_stack[v]:\\n                    return True\\n            \\n            recursion_stack[u] = 0\\n            return False\\n        \\n        for i in range(1, n + 1):\\n            if not visited[i]:\\n                if dfs(i):\\n                    return True\\n        return False\\n\\n    for i in range(m):\\n        found_color = False\\n        for color in range(1, color_count + 2):\\n            colors[i] = color\\n            if not has_cycle(color, edges):\\n                found_color = True\\n                break\\n        if not found_color:\\n            color_count += 1\\n            colors[i] = color_count\\n\\n    print(color_count)\\n    print(*colors)\\n\\nsolve()\\n\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    edges = []\\n    for _ in range(m):\\n        u, v = map(int, input().split())\\n        edges.append((u, v))\\n    \\n    colors = [0] * m\\n    \\n    def is_good(colors):\\n        for color in set(colors):\\n            adj = [[] for _ in range(n + 1)]\\n            for i in range(m):\\n                if colors[i] == color:\\n                    u, v = edges[i]\\n                    adj[u].append(v)\\n            \\n            visited = [0] * (n + 1)\\n            recursion_stack = [0] * (n + 1)\\n            \\n            def dfs(u):\\n                visited[u] = 1\\n                recursion_stack[u] = 1\\n                \\n                for v in adj[u]:\\n                    if not visited[v]:\\n                        if dfs(v):\\n                            return True\\n                    elif recursion_stack[v]:\\n                        return True\\n                \\n                recursion_stack[u] = 0\\n                return False\\n            \\n            for i in range(1, n + 1):\\n                if not visited[i]:\\n                    if dfs(i):\\n                        return False\\n        return True\\n    \\n    k = 0\\n    for k_try in range(1, m + 1):\\n        found_coloring = False\\n        for i in range(k_try ** m):\\n            temp_colors = []\\n            temp = i\\n            for _ in range(m):\\n                temp_colors.append(temp % k_try + 1)\\n                temp \/\/= k_try\\n            \\n            if is_good(temp_colors):\\n                k = k_try\\n                colors = temp_colors\\n                found_coloring = True\\n                break\\n        if found_coloring:\\n            break\\n    \\n    print(k)\\n    print(*colors)\\n\\nsolve()\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    edges = []\\n    for _ in range(m):\\n        u, v = map(int, input().split())\\n        edges.append((u, v))\\n\\n    adj = [[] for _ in range(n + 1)]\\n    for u, v in edges:\\n        adj[u].append(v)\\n\\n    colors = [0] * m\\n    color_count = 0\\n    \\n    def has_cycle(color, colored_edges):\\n        colored_adj = [[] for _ in range(n + 1)]\\n        for i, (u, v) in enumerate(edges):\\n            if colors[i] == color:\\n                colored_adj[u].append(v)\\n        \\n        visited = [0] * (n + 1)\\n        recursion_stack = [0] * (n + 1)\\n        \\n        def dfs(u):\\n            visited[u] = 1\\n            recursion_stack[u] = 1\\n            \\n            for v in colored_adj[u]:\\n                if not visited[v]:\\n                    if dfs(v):\\n                        return True\\n                elif recursion_stack[v]:\\n                    return True\\n            \\n            recursion_stack[u] = 0\\n            return False\\n        \\n        for i in range(1, n + 1):\\n            if not visited[i]:\\n                if dfs(i):\\n                    return True\\n        return False\\n\\n    for i in range(m):\\n        found_color = False\\n        for color in range(1, color_count + 2):\\n            colors[i] = color\\n            if not has_cycle(color, edges):\\n                found_color = True\\n                break\\n        if not found_color:\\n            color_count += 1\\n            colors[i] = color_count\\n\\n    print(color_count)\\n    print(*colors)\\n\\nsolve()\\n\"\n  }\n]\n```"}
{"description":"You are given n segments on the Ox-axis. You can drive a nail in any integer point on the Ox-axis line nail so, that all segments containing this point, are considered nailed down. If the nail passes through endpoint of some segment, this segment is considered to be nailed too. What is the smallest number of nails needed to nail all the segments down?","input_specification":"The first line of the input contains single integer number n (1\u2264n\u22641000) \u2014 amount of segments. Following n lines contain descriptions of the segments. Each description is a pair of integer numbers \u2014 endpoints coordinates. All the coordinates don't exceed 10000 by absolute value. Segments can degenarate to points.\n","output_specification":"The first line should contain one integer number \u2014 the smallest number of nails needed to nail all the segments down. The second line should contain coordinates of driven nails separated by space in any order. If the answer is not unique, output any.\n","notes":null,"sample_inputs":["2\n0 2\n2 5\n","5\n0 3\n4 2\n4 8\n8 10\n7 7\n"],"sample_outputs":["1\n2 ","3\n7 10 3\n"],"src_uid":"22_D","lang_cluster":"Python","difficulty":1900,"human_solution":"n = int(input())\nsegments = []\n\nfor _ in range(n):\n    l, r = sorted(map(int, input().split()))\n    segments.append([l, r])\n    \nsegments.sort(key = lambda s: s[1])\n\npinz = []\n\nfor l, r in segments:\n    if len(pinz) == 0 or l > pinz[-1]:\n        pinz.append(r)\n\nprint(len(pinz))\nprint(*pinz)\n\t\t \t\t \t\t\t \t\t \t\t\t\t\t\t\t      \t\t\t\t\t","testcases":"[{'input': ['2\\r\\n0 2\\r\\n2 5\\r\\n'], 'output': ['1\\r\\n2 ']}, {'input': ['5\\r\\n0 3\\r\\n4 2\\r\\n4 8\\r\\n8 10\\r\\n7 7\\r\\n'], 'output': ['3\\r\\n3 7 10 ']}, {'input': ['3\\r\\n40 -83\\r\\n52 -80\\r\\n-21 -4\\r\\n'], 'output': ['1\\r\\n-4 ']}, {'input': ['4\\r\\n67 -88\\r\\n37 -62\\r\\n-26 91\\r\\n-99 -50\\r\\n'], 'output': ['2\\r\\n-50 91 ']}, {'input': ['5\\r\\n45 58\\r\\n22 6\\r\\n-32 36\\r\\n49 -37\\r\\n43 62\\r\\n'], 'output': ['2\\r\\n22 58 ']}, {'input': ['10\\r\\n47 -85\\r\\n71 40\\r\\n-87 64\\r\\n76 73\\r\\n52 -51\\r\\n-20 -57\\r\\n-14 -77\\r\\n-45 -11\\r\\n-56 -48\\r\\n81 20\\r\\n'], 'output': ['4\\r\\n-48 -11 71 76 ']}, {'input': ['35\\r\\n-47 61\\r\\n-73 -15\\r\\n9 43\\r\\n43 -49\\r\\n13 -6\\r\\n48 -65\\r\\n49 -84\\r\\n-6 76\\r\\n40 6\\r\\n-41 11\\r\\n-63 -42\\r\\n-7 -66\\r\\n47 -98\\r\\n-17 61\\r\\n79 99\\r\\n47 -98\\r\\n61 31\\r\\n85 72\\r\\n-50 -17\\r\\n-67 45\\r\\n14 -50\\r\\n-45 61\\r\\n-6 -96\\r\\n-47 -83\\r\\n56 -58\\r\\n-69 -15\\r\\n14 20\\r\\n-95 -82\\r\\n47 93\\r\\n-4 -7\\r\\n70 9\\r\\n91 -18\\r\\n-71 31\\r\\n55 -20\\r\\n81 -8\\r\\n'], 'output': ['6\\r\\n-82 -42 -4 20 61 85 ']}, {'input': ['1\\r\\n0 0\\r\\n'], 'output': ['1\\r\\n0 ']}, {'input': ['4\\r\\n1 1\\r\\n0 0\\r\\n10000 10000\\r\\n-10000 -10000\\r\\n'], 'output': ['4\\r\\n-10000 0 1 10000 ']}, {'input': ['3\\r\\n55 55\\r\\n55 55\\r\\n55 55\\r\\n'], 'output': ['1\\r\\n55 ']}, {'input': ['4\\r\\n55 55\\r\\n55 55\\r\\n55 55\\r\\n55 56\\r\\n'], 'output': ['1\\r\\n55 ']}, {'input': ['1\\r\\n-2244 5023\\r\\n'], 'output': ['1\\r\\n5023 ']}]","id":162,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    segments = []\\n    for _ in range(n):\\n        segments.append(list(map(int, input().split())))\\n\\n    segments.sort(key=lambda x: x[1])\\n    nails = []\\n    nailed_segments = set()\\n\\n    for i in range(n):\\n        if i in nailed_segments:  # Skip already nailed segments\\n            continue\\n        nail_pos = segments[i][1]\\n        nails.append(nail_pos)\\n\\n        for j in range(n):\\n            if segments[j][0] <= nail_pos <= segments[j][1]:\\n                nailed_segments.add(j)\\n\\n    print(len(nails))\\n    print(*nails)\\n\\nsolve()\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n = int(raw_input())\\n    segments = []\\n    for _ in range(n):\\n        segments.append(map(int, raw_input().split()))\\n\\n    segments.sort(key=lambda x: x[1])\\n    nails = []\\n    nailed_segments = set()\\n\\n    for i in range(n):\\n        if i in nailed_segments:  # Skip already nailed segments\\n            continue\\n        nail_pos = segments[i][1]\\n        nails.append(nail_pos)\\n\\n        for j in range(n):\\n            if segments[j][0] <= nail_pos <= segments[j][1]:\\n                nailed_segments.add(j)\\n\\n    print len(nails)\\n    print ' '.join(map(str, nails))\\n\\nsolve()\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    segments = []\\n    for _ in range(n):\\n        segments.append(list(map(int, input().split())))\\n\\n    segments.sort(key=lambda x: x[1])\\n    \\n    nails = []\\n    nailed_segments = set()\\n    \\n    for i in range(n):\\n        if i not in nailed_segments:\\n            nail = segments[i][1]\\n            nails.append(nail)\\n            for j in range(n):\\n                if segments[j][0] <= nail <= segments[j][1]:\\n                    nailed_segments.add(j)\\n    \\n    print(len(nails))\\n    print(*nails)\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n = int(raw_input())\\n    segments = []\\n    for _ in range(n):\\n        segments.append(map(int, raw_input().split()))\\n\\n    segments.sort(key=lambda x: x[1])\\n    \\n    nails = []\\n    nailed_segments = set()\\n    \\n    for i in range(n):\\n        if i not in nailed_segments:\\n            nail = segments[i][1]\\n            nails.append(nail)\\n            for j in range(n):\\n                if segments[j][0] <= nail <= segments[j][1]:\\n                    nailed_segments.add(j)\\n    \\n    print len(nails)\\n    print ' '.join(map(str, nails))\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    segments = []\\n    for _ in range(n):\\n        segments.append(list(map(int, input().split())))\\n\\n    segments.sort(key=lambda x: x[1])\\n    nails = []\\n    nailed_segments = set()\\n\\n    for i in range(n):\\n        if i in nailed_segments:  # Skip already nailed segments\\n            continue\\n        nail_pos = segments[i][1]\\n        nails.append(nail_pos)\\n\\n        for j in range(n):\\n            if segments[j][0] <= nail_pos <= segments[j][1]:\\n                nailed_segments.add(j)\\n\\n    print(len(nails))\\n    print(*nails)\\n\\nsolve()\\n\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n = int(raw_input())\\n    segments = []\\n    for _ in range(n):\\n        segments.append(map(int, raw_input().split()))\\n\\n    segments.sort(key=lambda x: x[1])\\n    nails = []\\n    nailed_segments = set()\\n\\n    for i in range(n):\\n        if i in nailed_segments:  # Skip already nailed segments\\n            continue\\n        nail_pos = segments[i][1]\\n        nails.append(nail_pos)\\n\\n        for j in range(n):\\n            if segments[j][0] <= nail_pos <= segments[j][1]:\\n                nailed_segments.add(j)\\n\\n    print len(nails)\\n    print ' '.join(map(str, nails))\\n\\nsolve()\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    segments = []\\n    for _ in range(n):\\n        segments.append(list(map(int, input().split())))\\n\\n    segments.sort(key=lambda x: x[1])\\n    \\n    nails = []\\n    nailed_segments = set()\\n    \\n    for i in range(n):\\n        if i not in nailed_segments:\\n            nail = segments[i][1]\\n            nails.append(nail)\\n            for j in range(n):\\n                if segments[j][0] <= nail <= segments[j][1]:\\n                    nailed_segments.add(j)\\n    \\n    print(len(nails))\\n    print(*nails)\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n = int(raw_input())\\n    segments = []\\n    for _ in range(n):\\n        segments.append(map(int, raw_input().split()))\\n\\n    segments.sort(key=lambda x: x[1])\\n    \\n    nails = []\\n    nailed_segments = set()\\n    \\n    for i in range(n):\\n        if i not in nailed_segments:\\n            nail = segments[i][1]\\n            nails.append(nail)\\n            for j in range(n):\\n                if segments[j][0] <= nail <= segments[j][1]:\\n                    nailed_segments.add(j)\\n    \\n    print len(nails)\\n    print ' '.join(map(str, nails))\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"Cosider a sequence, consisting of n integers: a1, a2, ..., an. Jeff can perform the following operation on sequence a:  take three integers v, t, k (1\u2264v,t\u2264n;\u00a00\u2264k;\u00a0v+tk\u2264n), such that av = av+t, av+t = av+2t, ..., av+t(k-1) = av+tk;  remove elements av, av+t, ..., av+t\u00b7k from the sequence a, the remaining elements should be reindexed a1,a2,...,an-k-1.  permute in some order the remaining elements of sequence a. A beauty of a sequence a is the minimum number of operations that is needed to delete all elements from sequence a.Jeff's written down a sequence of m integers b1, b2, ..., bm. Now he wants to ask q questions. Each question can be described with two integers li,ri. The answer to the question is the beauty of sequence bli, bli+1, ..., bri. You are given the sequence b and all questions. Help Jeff, answer all his questions.","input_specification":"The first line contains integer m (1\u2264m\u226410^5). The next line contains m integers b1, b2, ..., bm (1\u2264bi\u226410^5). \nThe third line contains integer q (1\u2264q\u226410^5) \u2014 the number of questions. The next q lines contain pairs of integers, i-th of them contains a pair of integers li, ri (1\u2264li\u2264ri\u2264m) \u2014 the description of i-th question.\n","output_specification":"In q lines print the answers to Jeff's queries. Print the answers according to the order of questions in input.\n","notes":null,"sample_inputs":["5\n2 2 1 1 2\n5\n1 5\n1 1\n2 2\n1 3\n2 3\n","10\n2 1 3 3 3 3 1 3 1 1\n10\n4 8\n2 10\n1 10\n4 4\n1 3\n2 4\n6 7\n1 9\n2 5\n1 1\n"],"sample_outputs":["2\n1\n1\n2\n2\n","2\n3\n3\n1\n3\n2\n2\n3\n2\n1\n"],"src_uid":"351_D","lang_cluster":"Python","difficulty":2700,"human_solution":"from bisect import bisect_left, bisect_right\r\nimport sys\r\nreadline=sys.stdin.readline\r\n\r\nclass Segment_Tree:\r\n    def __init__(self,N,f,e,lst=None):\r\n        self.f=f\r\n        self.e=e\r\n        self.N=N\r\n        if lst==None:\r\n            self.segment_tree=[self.e]*2*self.N\r\n        else:\r\n            assert len(lst)<=self.N\r\n            self.segment_tree=[self.e]*self.N+[x for x in lst]+[self.e]*(N-len(lst))\r\n            for i in range(self.N-1,0,-1):\r\n                self.segment_tree[i]=self.f(self.segment_tree[i<<1],self.segment_tree[i<<1|1])\r\n\r\n    def __getitem__(self,i):\r\n        if type(i)==int:\r\n            if -self.N<=i<0:\r\n                return self.segment_tree[i+self.N*2]\r\n            elif 0<=i<self.N:\r\n                return self.segment_tree[i+self.N]\r\n            else:\r\n                raise IndexError('list index out of range')\r\n        else:\r\n            a,b,c=i.start,i.stop,i.step\r\n            if a==None:\r\n                a=self.N\r\n            else:\r\n                a+=self.N\r\n            if b==None:\r\n                b=self.N*2\r\n            else:\r\n                b+=self.N\r\n            return self.segment_tree[slice(a,b,c)]\r\n\r\n    def __setitem__(self,i,x):\r\n        if -self.N<=i<0:\r\n            i+=self.N*2\r\n        elif 0<=i<self.N:\r\n            i+=self.N\r\n        else:\r\n            raise IndexError('list index out of range')\r\n        self.segment_tree[i]=x\r\n        while i>1:\r\n            i>>= 1\r\n            self.segment_tree[i]=self.f(self.segment_tree[i<<1],self.segment_tree[i<<1|1])\r\n\r\n    def Build(self,lst):\r\n        for i,x in enumerate(lst,self.N):\r\n            self.segment_tree[i]=x\r\n        for i in range(self.N-1,0,-1):\r\n            self.segment_tree[i]=self.f(self.segment_tree[i<<1],self.segment_tree[i<<1|1])\r\n\r\n    def Fold(self,L=None,R=None):\r\n        if L==None:\r\n            L=self.N\r\n        else:\r\n            L+=self.N\r\n        if R==None:\r\n            R=self.N*2\r\n        else:\r\n            R+=self.N\r\n        vL=self.e\r\n        vR=self.e\r\n        while L<R:\r\n            if L&1:\r\n                vL=self.f(vL,self.segment_tree[L])\r\n                L+=1\r\n            if R&1:\r\n                R-=1\r\n                vR=self.f(self.segment_tree[R],vR)\r\n            L>>=1\r\n            R>>=1\r\n        return self.f(vL,vR)\r\n\r\n    def Fold_Index(self,L=None,R=None):\r\n        if L==None:\r\n            L=self.N\r\n        else:\r\n            L+=self.N\r\n        if R==None:\r\n            R=self.N*2\r\n        else:\r\n            R+=self.N\r\n        if L==R:\r\n            return None\r\n        x=self.Fold(L-self.N,R-self.N)\r\n        while L<R:\r\n            if L&1:\r\n                if self.segment_tree[L]==x:\r\n                    i=L\r\n                    break\r\n                L+=1\r\n            if R&1:\r\n                R-=1\r\n                if self.segment_tree[R]==x:\r\n                    i=R\r\n                    break\r\n            L>>=1\r\n            R>>=1\r\n        while i<self.N:\r\n            if self.segment_tree[i]==self.segment_tree[i<<1]:\r\n                i<<=1\r\n            else:\r\n                i<<=1\r\n                i|=1\r\n        i-=self.N\r\n        return i\r\n\r\n    def Bisect_Right(self,l=None,f=None):\r\n        if l==self.N:\r\n            return self.N\r\n        if l==None:\r\n            l=0\r\n        if f(self.Fold(l,self.N)):\r\n            return self.N\r\n        l+=self.N\r\n        v=self.e\r\n        while True:\r\n            while l%2==0:\r\n                l>>=1\r\n            vv=self.f(v,self.segment_tree[l])\r\n            if f(vv):\r\n                v=vv\r\n                l+=1\r\n                if 2*self.N==l<<(self.N.bit_length()-l.bit_length()+1):\r\n                    return self.N\r\n            else:\r\n                while l<self.N:\r\n                    l<<=1\r\n                    vv=self.f(v,self.segment_tree[l])\r\n                    if f(vv):\r\n                        v=vv\r\n                        l+=1\r\n                return l-self.N\r\n\r\n    def Bisect_Left(self,r=None,f=None):\r\n        if r==0:\r\n            return 0\r\n        if r==None:\r\n            r=self.N\r\n        if f(self.Fold(0,r)):\r\n            return 0\r\n        r+=self.N\r\n        v=self.e\r\n        while True:\r\n            r-=1\r\n            while r>1 and r%2:\r\n                r>>=1\r\n            vv=self.f(self.segment_tree[r],v)\r\n            if f(vv):\r\n                v=vv\r\n                if 2*self.N==r<<(self.N.bit_length()-r.bit_length()+1):\r\n                    return 0\r\n            else:\r\n                while r<self.N:\r\n                    r=2*r+1\r\n                    vv=self.f(self.segment_tree[r],v)\r\n                    if f(vv):\r\n                        v=vv\r\n                        r-=1\r\n                return r+1-self.N\r\n\r\n    def __str__(self):\r\n        return '['+', '.join(map(str,self.segment_tree[self.N:]))+']'\r\n\r\nclass Dual_Segment_Tree:\r\n    def __init__(self,N,f_act,e_act,operate,lst):\r\n        self.N=N\r\n        self.f_act=f_act\r\n        self.e_act=e_act\r\n        self.operate=operate\r\n        self.lst=[None]*self.N\r\n        for i,x in enumerate(lst):\r\n            self.lst[i]=x\r\n        self.segment_tree_act=[self.e_act]*(self.N+self.N)\r\n\r\n    def __getitem__(self,i):\r\n        if type(i) is int:\r\n            if -self.N<=i<0:\r\n                i+=self.N*2\r\n            elif 0<=i<self.N:\r\n                i+=self.N\r\n            else:\r\n                raise IndexError('list index out of range')\r\n            self.Propagate_Above(i)\r\n            return self.Operate_At(i)\r\n        else:\r\n            a,b,c=i.start,i.stop,i.step\r\n            if a==None or a<-self.N:\r\n                a=0\r\n            elif self.N<=a:\r\n                a=self.N\r\n            elif a<0:\r\n                a+=self.N\r\n            if b==None or self.N<=b:\r\n                b=self.N\r\n            elif b<-self.N:\r\n                b=0\r\n            elif b<0:\r\n                b+=self.N\r\n            return self.lst[slice(a,b,c)]\r\n\r\n    def Operate_At(self,i):\r\n        return self.operate(self.lst[i-self.N],self.segment_tree_act[i])\r\n\r\n    def Propagate_At(self,i):\r\n        self.segment_tree_act[i<<1]=self.f_act(self.segment_tree_act[i<<1],self.segment_tree_act[i])\r\n        self.segment_tree_act[i<<1|1]=self.f_act(self.segment_tree_act[i<<1|1],self.segment_tree_act[i])\r\n        self.segment_tree_act[i]=self.e_act\r\n\r\n    def Propagate_Above(self,i):\r\n        H=i.bit_length()-1\r\n        for h in range(H,0,-1):\r\n            self.Propagate_At(i>>h)\r\n\r\n    def Operate_Range(self,a,L=None,R=None):\r\n        if L==None or L<-self.N:\r\n            L=self.N\r\n        elif self.N<=L:\r\n            L=self.N*2\r\n        elif L<0:\r\n            L+=self.N*2\r\n        else:\r\n            L+=self.N\r\n        if R==None or self.N<=R:\r\n            R=self.N*2\r\n        elif R<-self.N:\r\n            R=self.N\r\n        elif R<0:\r\n            R+=self.N*2\r\n        else:\r\n            R+=self.N\r\n        L0=L\/\/(L&-L)\r\n        R0=R\/\/(R&-R)-1\r\n        self.Propagate_Above(L0)\r\n        self.Propagate_Above(R0)\r\n        while L<R:\r\n            if L&1:\r\n                self.segment_tree_act[L]=self.f_act(self.segment_tree_act[L],a)\r\n                L+=1\r\n            if R&1:\r\n                R-=1\r\n                self.segment_tree_act[R]=self.f_act(self.segment_tree_act[R],a)\r\n            L>>=1\r\n            R>>=1\r\n\r\n    def Update(self):\r\n        for i in range(1,self.N):\r\n            self.Propagate_At(i)\r\n            self.segment_tree_act[i]=self.e_act\r\n\r\n    def __str__(self):\r\n        self.Update()\r\n        return '['+', '.join(map(str,[self.operate(x,a) for x,a in zip(self.lst,self.segment_tree_act[self.N:])]))+']'\r\n\r\nM=int(readline())\r\nB=list(map(int,readline().split()))\r\nQ=int(readline())\r\nquery=[[] for l in range(M)]\r\nfor i in range(Q):\r\n    l,r=map(int,readline().split())\r\n    l-=1\r\n    query[l].append((r,i))\r\nmax_B=max(B)\r\nidx=[[] for b in range(max_B+1)]\r\nfor i in range(M-1,-1,-1):\r\n    idx[B[i]].append(i)\r\nans_lst=[None]*Q\r\nST=Segment_Tree(M,lambda x,y:x+y,0)\r\nfor lst in idx:\r\n    if lst:\r\n        ST[lst.pop()]+=1\r\nfor l in range(M):\r\n    for r,i in query[l]:\r\n        ans_lst[i]=ST.Fold(l,r)\r\n    b=B[l]\r\n    if idx[b]:\r\n        ST[idx[b].pop()]+=1\r\nfor i in range(M):\r\n    idx[B[i]].append(i)\r\ninf=1<<30\r\nDST=Dual_Segment_Tree(M+1,lambda x,y:x+y,0,lambda x,y:x+y,[0]*(M+1))\r\nbound=[[] for i in range(max_B+1)]\r\nfor b in range(max_B+1):\r\n    if not idx[b]:\r\n        continue\r\n    l=len(idx[b])\r\n    for i in range(1,l-1):\r\n        if idx[b][i]*2!=idx[b][i-1]+idx[b][i+1]:\r\n            bound[b].append(i)\r\n    l=idx[b][0]+1\r\n    if bound[b]:\r\n        r=idx[b][bound[b][0]+1]+1\r\n    else:\r\n        r=M+1\r\n    DST.Operate_Range(1,l,r)\r\nfor l in range(M):\r\n    for r,i in query[l]:\r\n        if DST[r]==0:\r\n            ans_lst[i]+=1\r\n    b=B[l]\r\n    if idx[b][-1]==l:\r\n        DST.Operate_Range(-1,l+1,M+1)\r\n    else:\r\n        i=bisect_left(idx[b],l)\r\n        j=bisect_left(bound[b],i+1)\r\n        if j==len(bound[b]):\r\n            DST.Operate_Range(-1,l+1,idx[b][i+1]+1)\r\n        else:\r\n            DST.Operate_Range(-1,l+1,idx[b][bound[b][j]+1]+1)\r\n            i+=1\r\n            j=bisect_left(bound[b],i+1)\r\n            if j==len(bound[b]):\r\n                r=M+1\r\n            else:\r\n                r=idx[b][bound[b][j]+1]+1\r\n            DST.Operate_Range(1,idx[b][i]+1,r)\r\nprint(*ans_lst,sep=\"\\n\")\r\n\r\n","testcases":"[{'input': ['5\\r\\n2 2 1 1 2\\r\\n5\\r\\n1 5\\r\\n1 1\\r\\n2 2\\r\\n1 3\\r\\n2 3\\r\\n'], 'output': ['2\\r\\n1\\r\\n1\\r\\n2\\r\\n2\\r\\n']}, {'input': ['10\\r\\n2 1 3 3 3 3 1 3 1 1\\r\\n10\\r\\n4 8\\r\\n2 10\\r\\n1 10\\r\\n4 4\\r\\n1 3\\r\\n2 4\\r\\n6 7\\r\\n1 9\\r\\n2 5\\r\\n1 1\\r\\n'], 'output': ['2\\r\\n3\\r\\n3\\r\\n1\\r\\n3\\r\\n2\\r\\n2\\r\\n3\\r\\n2\\r\\n1\\r\\n']}, {'input': ['15\\r\\n3 3 2 2 1 2 4 1 3 1 1 3 1 4 1\\r\\n15\\r\\n4 10\\r\\n8 9\\r\\n12 12\\r\\n7 9\\r\\n11 12\\r\\n1 1\\r\\n4 10\\r\\n12 13\\r\\n2 2\\r\\n3 5\\r\\n5 6\\r\\n1 1\\r\\n2 3\\r\\n2 4\\r\\n7 14\\r\\n'], 'output': ['4\\r\\n2\\r\\n1\\r\\n3\\r\\n2\\r\\n1\\r\\n4\\r\\n2\\r\\n1\\r\\n2\\r\\n2\\r\\n1\\r\\n2\\r\\n2\\r\\n3\\r\\n']}, {'input': ['20\\r\\n3 2 2 1 4 4 1 2 3 1 1 5 5 3 4 4 1 2 3 1\\r\\n20\\r\\n13 17\\r\\n2 2\\r\\n5 5\\r\\n19 20\\r\\n5 9\\r\\n10 14\\r\\n2 2\\r\\n7 15\\r\\n10 12\\r\\n16 17\\r\\n9 9\\r\\n2 3\\r\\n4 4\\r\\n1 4\\r\\n11 19\\r\\n1 2\\r\\n1 18\\r\\n3 13\\r\\n10 18\\r\\n3 9\\r\\n'], 'output': ['4\\r\\n1\\r\\n1\\r\\n2\\r\\n4\\r\\n3\\r\\n1\\r\\n5\\r\\n2\\r\\n2\\r\\n1\\r\\n1\\r\\n1\\r\\n3\\r\\n5\\r\\n2\\r\\n5\\r\\n5\\r\\n5\\r\\n4\\r\\n']}, {'input': ['25\\r\\n3 1 3 4 1 3 5 3 6 6 2 1 1 1 6 1 3 4 2 6 6 1 5 6 6\\r\\n25\\r\\n1 1\\r\\n10 12\\r\\n1 6\\r\\n1 8\\r\\n17 18\\r\\n2 20\\r\\n1 2\\r\\n1 1\\r\\n8 17\\r\\n11 19\\r\\n3 5\\r\\n17 25\\r\\n14 19\\r\\n5 12\\r\\n1 6\\r\\n1 17\\r\\n14 14\\r\\n9 13\\r\\n10 14\\r\\n18 22\\r\\n6 22\\r\\n10 11\\r\\n13 20\\r\\n3 4\\r\\n17 21\\r\\n'], 'output': ['1\\r\\n3\\r\\n3\\r\\n4\\r\\n2\\r\\n6\\r\\n2\\r\\n1\\r\\n4\\r\\n5\\r\\n3\\r\\n6\\r\\n5\\r\\n5\\r\\n3\\r\\n6\\r\\n1\\r\\n3\\r\\n3\\r\\n4\\r\\n6\\r\\n2\\r\\n5\\r\\n2\\r\\n4\\r\\n']}, {'input': ['30\\r\\n5 2 2 6 5 7 1 4 7 4 7 4 5 5 2 5 3 6 7 4 1 5 4 1 2 1 1 7 2 1\\r\\n30\\r\\n1 23\\r\\n19 23\\r\\n10 14\\r\\n8 22\\r\\n6 16\\r\\n4 13\\r\\n13 25\\r\\n9 14\\r\\n16 16\\r\\n7 7\\r\\n11 11\\r\\n17 30\\r\\n17 29\\r\\n8 9\\r\\n9 9\\r\\n1 1\\r\\n1 11\\r\\n14 17\\r\\n8 25\\r\\n6 6\\r\\n16 26\\r\\n7 24\\r\\n10 24\\r\\n1 16\\r\\n2 13\\r\\n14 22\\r\\n5 14\\r\\n14 19\\r\\n8 23\\r\\n18 19\\r\\n'], 'output': ['7\\r\\n4\\r\\n3\\r\\n7\\r\\n5\\r\\n5\\r\\n7\\r\\n3\\r\\n1\\r\\n1\\r\\n1\\r\\n7\\r\\n7\\r\\n2\\r\\n1\\r\\n1\\r\\n6\\r\\n3\\r\\n7\\r\\n1\\r\\n7\\r\\n7\\r\\n7\\r\\n6\\r\\n6\\r\\n7\\r\\n4\\r\\n5\\r\\n7\\r\\n2\\r\\n']}, {'input': ['35\\r\\n8 6 1 3 8 8 1 6 5 6 5 2 8 2 3 5 5 2 1 6 5 8 1 4 5 1 7 8 6 5 1 3 6 7 6\\r\\n35\\r\\n18 32\\r\\n13 23\\r\\n20 22\\r\\n11 15\\r\\n8 8\\r\\n2 13\\r\\n2 3\\r\\n8 14\\r\\n17 26\\r\\n7 14\\r\\n16 32\\r\\n15 16\\r\\n14 35\\r\\n2 14\\r\\n15 20\\r\\n10 14\\r\\n4 19\\r\\n13 17\\r\\n9 13\\r\\n4 4\\r\\n18 24\\r\\n9 18\\r\\n8 8\\r\\n2 17\\r\\n4 6\\r\\n3 16\\r\\n30 31\\r\\n1 35\\r\\n2 12\\r\\n22 24\\r\\n17 17\\r\\n21 27\\r\\n3 5\\r\\n1 29\\r\\n12 12\\r\\n'], 'output': ['8\\r\\n6\\r\\n3\\r\\n4\\r\\n1\\r\\n6\\r\\n2\\r\\n4\\r\\n6\\r\\n5\\r\\n8\\r\\n2\\r\\n8\\r\\n6\\r\\n5\\r\\n4\\r\\n6\\r\\n4\\r\\n4\\r\\n1\\r\\n6\\r\\n5\\r\\n1\\r\\n6\\r\\n2\\r\\n6\\r\\n2\\r\\n8\\r\\n6\\r\\n3\\r\\n1\\r\\n5\\r\\n3\\r\\n8\\r\\n1\\r\\n']}, {'input': ['40\\r\\n7 5 2 8 5 4 1 5 6 7 7 9 9 2 1 6 2 5 4 7 6 1 6 7 5 9 4 8 4 6 8 1 7 2 3 7 4 5 2 9\\r\\n40\\r\\n25 36\\r\\n21 39\\r\\n1 26\\r\\n2 21\\r\\n11 31\\r\\n12 33\\r\\n4 4\\r\\n2 8\\r\\n6 6\\r\\n2 9\\r\\n2 24\\r\\n23 23\\r\\n25 39\\r\\n3 11\\r\\n10 21\\r\\n11 24\\r\\n39 39\\r\\n25 29\\r\\n3 7\\r\\n1 7\\r\\n1 2\\r\\n15 36\\r\\n5 34\\r\\n31 33\\r\\n6 30\\r\\n8 13\\r\\n10 37\\r\\n33 35\\r\\n14 39\\r\\n2 12\\r\\n11 12\\r\\n6 11\\r\\n33 34\\r\\n17 23\\r\\n17 35\\r\\n4 5\\r\\n17 29\\r\\n10 19\\r\\n2 25\\r\\n12 30\\r\\n'], 'output': ['9\\r\\n9\\r\\n8\\r\\n8\\r\\n8\\r\\n8\\r\\n1\\r\\n5\\r\\n1\\r\\n6\\r\\n8\\r\\n1\\r\\n9\\r\\n7\\r\\n7\\r\\n7\\r\\n1\\r\\n4\\r\\n5\\r\\n6\\r\\n2\\r\\n9\\r\\n8\\r\\n3\\r\\n8\\r\\n4\\r\\n9\\r\\n3\\r\\n9\\r\\n8\\r\\n2\\r\\n5\\r\\n2\\r\\n6\\r\\n9\\r\\n2\\r\\n8\\r\\n7\\r\\n8\\r\\n8\\r\\n']}, {'input': ['45\\r\\n10 9 3 4 5 1 3 4 2 10 9 10 9 10 2 4 6 2 5 3 6 4 9 10 3 9 8 1 2 5 9 2 10 4 6 10 8 10 9 1 2 5 8 6 6\\r\\n45\\r\\n27 31\\r\\n7 13\\r\\n1 10\\r\\n6 22\\r\\n14 36\\r\\n17 18\\r\\n26 44\\r\\n27 34\\r\\n14 39\\r\\n29 35\\r\\n33 44\\r\\n29 42\\r\\n7 10\\r\\n2 2\\r\\n12 30\\r\\n1 2\\r\\n2 32\\r\\n1 1\\r\\n14 42\\r\\n5 8\\r\\n16 36\\r\\n1 37\\r\\n17 23\\r\\n6 7\\r\\n16 25\\r\\n1 22\\r\\n40 44\\r\\n15 27\\r\\n12 28\\r\\n19 20\\r\\n12 14\\r\\n1 42\\r\\n6 19\\r\\n7 13\\r\\n27 38\\r\\n7 8\\r\\n29 38\\r\\n6 11\\r\\n4 17\\r\\n1 34\\r\\n4 5\\r\\n9 16\\r\\n4 8\\r\\n11 42\\r\\n9 20\\r\\n'], 'output': ['5\\r\\n5\\r\\n7\\r\\n8\\r\\n9\\r\\n2\\r\\n8\\r\\n7\\r\\n9\\r\\n6\\r\\n8\\r\\n8\\r\\n4\\r\\n1\\r\\n9\\r\\n2\\r\\n9\\r\\n1\\r\\n9\\r\\n4\\r\\n9\\r\\n9\\r\\n6\\r\\n2\\r\\n7\\r\\n8\\r\\n5\\r\\n8\\r\\n9\\r\\n2\\r\\n2\\r\\n9\\r\\n8\\r\\n5\\r\\n8\\r\\n2\\r\\n7\\r\\n6\\r\\n8\\r\\n9\\r\\n2\\r\\n4\\r\\n4\\r\\n9\\r\\n7\\r\\n']}, {'input': ['50\\r\\n1 4 10 6 8 5 3 7 3 2 9 4 5 11 11 5 11 10 2 1 2 4 1 2 10 4 2 1 3 8 3 3 5 11 7 7 9 6 6 3 6 10 5 1 11 10 2 1 4 9\\r\\n50\\r\\n26 27\\r\\n25 50\\r\\n2 44\\r\\n6 20\\r\\n1 17\\r\\n9 15\\r\\n6 10\\r\\n13 40\\r\\n4 9\\r\\n2 11\\r\\n4 11\\r\\n7 46\\r\\n2 3\\r\\n16 23\\r\\n2 28\\r\\n24 45\\r\\n25 32\\r\\n25 29\\r\\n8 9\\r\\n5 10\\r\\n6 20\\r\\n12 17\\r\\n19 38\\r\\n12 48\\r\\n8 32\\r\\n11 24\\r\\n13 21\\r\\n6 41\\r\\n16 28\\r\\n9 28\\r\\n42 47\\r\\n8 27\\r\\n1 4\\r\\n5 9\\r\\n2 44\\r\\n25 29\\r\\n25 43\\r\\n2 16\\r\\n33 35\\r\\n2 2\\r\\n7 21\\r\\n20 41\\r\\n20 30\\r\\n23 43\\r\\n20 27\\r\\n2 2\\r\\n1 34\\r\\n21 23\\r\\n19 19\\r\\n39 39\\r\\n'], 'output': ['2\\r\\n11\\r\\n11\\r\\n9\\r\\n11\\r\\n6\\r\\n4\\r\\n11\\r\\n5\\r\\n9\\r\\n7\\r\\n11\\r\\n2\\r\\n6\\r\\n11\\r\\n11\\r\\n6\\r\\n5\\r\\n2\\r\\n5\\r\\n9\\r\\n3\\r\\n11\\r\\n11\\r\\n10\\r\\n7\\r\\n5\\r\\n11\\r\\n6\\r\\n8\\r\\n5\\r\\n9\\r\\n4\\r\\n4\\r\\n11\\r\\n5\\r\\n11\\r\\n10\\r\\n3\\r\\n1\\r\\n9\\r\\n11\\r\\n6\\r\\n11\\r\\n4\\r\\n1\\r\\n11\\r\\n3\\r\\n1\\r\\n1\\r\\n']}, {'input': ['10\\r\\n1 2 3 1 2 3 1 1 1 100000\\r\\n5\\r\\n1 10\\r\\n2 9\\r\\n3 8\\r\\n1 7\\r\\n1 3\\r\\n'], 'output': ['4\\r\\n3\\r\\n3\\r\\n3\\r\\n3\\r\\n']}, {'input': ['1\\r\\n1\\r\\n1\\r\\n1 1\\r\\n'], 'output': ['1\\r\\n']}, {'input': ['1\\r\\n100000\\r\\n5\\r\\n1 1\\r\\n1 1\\r\\n1 1\\r\\n1 1\\r\\n1 1\\r\\n'], 'output': ['1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n']}]","id":163,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    m = int(input())\\n    b = list(map(int, input().split()))\\n    q = int(input())\\n    queries = []\\n    for _ in range(q):\\n        queries.append(list(map(int, input().split())))\\n\\n    def calculate_beauty(arr):\\n        n = len(arr)\\n        if n == 0:\\n            return 0\\n        \\n        ans = float('inf')\\n        for i in range(1 << n):\\n            temp_arr = arr[:]  # Create a copy to avoid modifying the original\\n            ops = 0\\n            indices_to_remove = []\\n            \\n            for j in range(n):\\n                if (i >> j) & 1:\\n                    indices_to_remove.append(j)\\n            \\n            indices_to_remove.sort(reverse=True)\\n            \\n            for idx in indices_to_remove:\\n                val = temp_arr[idx]  \\n                k = 0\\n                while idx + k < len(temp_arr) and temp_arr[idx+k] == val:\\n                    k += 1\\n                \\n                if k > 1:\\n                    ops += 1\\n                    del temp_arr[idx:idx+k]  \\n            \\n            if len(temp_arr) == 0:\\n                ans = min(ans, ops)\\n            else:\\n                ans = min(ans, ops + len(temp_arr))\\n        return ans\\n\\n    for l, r in queries:\\n        sub_array = b[l-1:r]  \\n        print(calculate_beauty(sub_array))\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    m = int(input())\\n    b = list(map(int, input().split()))\\n    q = int(input())\\n\\n    def calculate_beauty(arr):\\n        n = len(arr)\\n        if n == 0: return 0\\n        \n        counts = {}\\n        for x in arr:\\n            counts[x] = counts.get(x, 0) + 1\\n        \\n        if len(counts) == 0: return 0\\n        \\n        ans = float('inf')\\n        for start_val in set(arr):\\n            temp_arr = arr[:]  # Create a copy to avoid modifying the original\\n            ops = 0\\n            while len(temp_arr) > 0:\\n                best_op = None\\n                max_len = 0\\n\\n                for v in range(len(temp_arr)):\\n                    for t in range(1, len(temp_arr) + 1):\\n                        k = 0\\n                        while v + t * k < len(temp_arr) and temp_arr[v + t * k] == temp_arr[v]:\\n                            k += 1\\n                        k -= 1\\n                        if k >= 0:\\n                            if k > max_len and temp_arr[v] == start_val:\\n                                max_len = k\\n                                best_op = (v,t,k)\\n                if best_op is not None:\\n                    v, t, k = best_op\\n                    temp_arr = temp_arr[:v] + temp_arr[v+t*(k+1):]\\n                    ops += 1\\n                else: \\n                    break\\n            ans = min(ans, ops)\\n        return ans\\n\\n    for _ in range(q):\\n        l, r = map(int, input().split())\\n        sub_array = b[l-1:r]\\n        print(calculate_beauty(sub_array))\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    m = int(input())\\n    b = list(map(int, input().split()))\\n    q = int(input())\\n    queries = []\\n    for _ in range(q):\\n        queries.append(list(map(int, input().split())))\\n\\n    def calculate_beauty(arr):\\n        n = len(arr)\\n        if n == 0:\\n            return 0\\n        \\n        ans = float('inf')\\n        for i in range(1 << n):\\n            temp_arr = arr[:]  # Create a copy to avoid modifying the original\\n            ops = 0\\n            indices_to_remove = []\\n            \\n            for j in range(n):\\n                if (i >> j) & 1:\\n                    indices_to_remove.append(j)\\n            \\n            indices_to_remove.sort(reverse=True)\\n            \\n            for idx in indices_to_remove:\\n                val = temp_arr[idx]  \\n                k = 0\\n                while idx + k < len(temp_arr) and temp_arr[idx+k] == val:\\n                    k += 1\\n                \\n                if k > 1:\\n                    ops += 1\\n                    del temp_arr[idx:idx+k]  \\n            \\n            if len(temp_arr) == 0:\\n                ans = min(ans, ops)\\n            else:\\n                ans = min(ans, ops + len(temp_arr))\\n        return ans\\n\\n    for l, r in queries:\\n        sub_array = b[l-1:r]  \\n        print(calculate_beauty(sub_array))\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    m = int(input())\\n    b = list(map(int, input().split()))\\n    q = int(input())\\n\\n    def calculate_beauty(arr):\\n        n = len(arr)\\n        if n == 0: return 0\\n        \n        counts = {}\\n        for x in arr:\\n            counts[x] = counts.get(x, 0) + 1\\n        \\n        if len(counts) == 0: return 0\\n        \\n        ans = float('inf')\\n        for start_val in set(arr):\\n            temp_arr = arr[:]  # Create a copy to avoid modifying the original\\n            ops = 0\\n            while len(temp_arr) > 0:\\n                best_op = None\\n                max_len = 0\\n\\n                for v in range(len(temp_arr)):\\n                    for t in range(1, len(temp_arr) + 1):\\n                        k = 0\\n                        while v + t * k < len(temp_arr) and temp_arr[v + t * k] == temp_arr[v]:\\n                            k += 1\\n                        k -= 1\\n                        if k >= 0:\\n                            if k > max_len and temp_arr[v] == start_val:\\n                                max_len = k\\n                                best_op = (v,t,k)\\n                if best_op is not None:\\n                    v, t, k = best_op\\n                    temp_arr = temp_arr[:v] + temp_arr[v+t*(k+1):]\\n                    ops += 1\\n                else: \\n                    break\\n            ans = min(ans, ops)\\n        return ans\\n\\n    for _ in range(q):\\n        l, r = map(int, input().split())\\n        sub_array = b[l-1:r]\\n        print(calculate_beauty(sub_array))\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"The only difference between easy and hard versions is constraints.Nauuo is a girl who loves random picture websites.One day she made a random picture website by herself which includes $$$n$$$ pictures.When Nauuo visits the website, she sees exactly one picture. The website does not display each picture with equal probability. The $$$i$$$-th picture has a non-negative weight $$$w_i$$$, and the probability of the $$$i$$$-th picture being displayed is $$$\\frac{w_i}{\\sum_{j=1}^nw_j}$$$. That is to say, the probability of a picture to be displayed is proportional to its weight.However, Nauuo discovered that some pictures she does not like were displayed too often. To solve this problem, she came up with a great idea: when she saw a picture she likes, she would add $$$1$$$ to its weight; otherwise, she would subtract $$$1$$$ from its weight.Nauuo will visit the website $$$m$$$ times. She wants to know the expected weight of each picture after all the $$$m$$$ visits modulo $$$998244353$$$. Can you help her?The expected weight of the $$$i$$$-th picture can be denoted by $$$\\frac {q_i} {p_i}$$$ where $$$\\gcd(p_i,q_i)=1$$$, you need to print an integer $$$r_i$$$ satisfying $$$0\\le r_i&lt;998244353$$$ and $$$r_i\\cdot p_i\\equiv q_i\\pmod{998244353}$$$. It can be proved that such $$$r_i$$$ exists and is unique.","input_specification":"The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1\\le n\\le 2\\cdot 10^5$$$, $$$1\\le m\\le 3000$$$) \u2014 the number of pictures and the number of visits to the website. The second line contains $$$n$$$ integers $$$a_1,a_2,\\ldots,a_n$$$ ($$$a_i$$$ is either $$$0$$$ or $$$1$$$) \u2014 if $$$a_i=0$$$ , Nauuo does not like the $$$i$$$-th picture; otherwise Nauuo likes the $$$i$$$-th picture. It is guaranteed that there is at least one picture which Nauuo likes. The third line contains $$$n$$$ positive integers $$$w_1,w_2,\\ldots,w_n$$$ ($$$w_i \\geq 1$$$) \u2014 the initial weights of the pictures. It is guaranteed that the sum of all the initial weights does not exceed $$$998244352-m$$$.","output_specification":"The output contains $$$n$$$ integers $$$r_1,r_2,\\ldots,r_n$$$ \u2014 the expected weights modulo $$$998244353$$$.","notes":"NoteIn the first example, if the only visit shows the first picture with a probability of $$$\\frac 2 3$$$, the final weights are $$$(1,1)$$$; if the only visit shows the second picture with a probability of $$$\\frac1 3$$$, the final weights are $$$(2,2)$$$.So, both expected weights are $$$\\frac2 3\\cdot 1+\\frac 1 3\\cdot 2=\\frac4 3$$$ .Because $$$332748119\\cdot 3\\equiv 4\\pmod{998244353}$$$, you need to print $$$332748119$$$ instead of $$$\\frac4 3$$$ or $$$1.3333333333$$$.In the second example, there is only one picture which Nauuo likes, so every time Nauuo visits the website, $$$w_1$$$ will be increased by $$$1$$$.So, the expected weight is $$$1+2=3$$$.Nauuo is very naughty so she didn't give you any hint of the third example.","sample_inputs":["2 1\n0 1\n2 1","1 2\n1\n1","3 3\n0 1 1\n4 3 5"],"sample_outputs":["332748119\n332748119","3","160955686\n185138929\n974061117"],"src_uid":"ba9c136f84375cd317f0f8b53e3939c7","lang_cluster":"Python","difficulty":2600,"human_solution":"P = 998244353\nN, M = map(int, input().split())\nA = [int(a) for a in input().split()]\nB = [int(a) for a in input().split()]\nli = sum([A[i]*B[i] for i in range(N)])\ndi = sum([(A[i]^1)*B[i] for i in range(N)])\nX = [1]\nSU = li+di\nPO = [0] * (5*M+10)\nfor i in range(-M-5, 2*M+5):\n    PO[i] = pow((SU+i)%P, P-2, P)\n\ndef calc(L):\n    su = sum(L)\n    pl = 0\n    pd = 0\n    RE = []\n    for i in range(len(L)):\n        a = li + i\n        b = di - (len(L) - 1 - i)\n        pd = b * L[i] * PO[a+b-SU]\n        RE.append((pl+pd)%P)\n        pl = a * L[i] * PO[a+b-SU]\n    RE.append(pl%P)\n    return RE\n\nfor i in range(M):\n    X = calc(X)\nne = 0\npo = 0\nfor i in range(M+1):\n    po = (po + X[i] * (li + i)) % P\n    ne = (ne + X[i] * (di - M + i)) % P\ninvli = pow(li, P-2, P)\ninvdi = pow(di, P-2, P)\nfor i in range(N):\n    print(po * B[i] * invli % P if A[i] else ne * B[i] * invdi % P)\n","testcases":"[{'input': '2 1\\r\\n0 1\\r\\n2 1\\r\\n', 'output': ['332748119\\r\\n332748119']}, {'input': '1 2\\r\\n1\\r\\n1\\r\\n', 'output': ['3']}, {'input': '3 3\\r\\n0 1 1\\r\\n4 3 5\\r\\n', 'output': ['160955686\\r\\n185138929\\r\\n974061117']}, {'input': '5 5\\r\\n0 1 0 0 1\\r\\n9 8 3 8 8\\r\\n', 'output': ['45170585\\r\\n105647559\\r\\n680553097\\r\\n483815788\\r\\n105647559']}, {'input': '10 10\\r\\n0 1 0 0 1 1 1 1 1 1\\r\\n12 18 6 18 7 2 9 18 1 9\\r\\n', 'output': ['199115375\\r\\n823101465\\r\\n598679864\\r\\n797795239\\r\\n486469073\\r\\n424203836\\r\\n910672909\\r\\n823101465\\r\\n212101918\\r\\n910672909']}, {'input': '20 20\\r\\n1 1 1 1 0 1 1 1 0 1 0 1 0 0 1 0 1 1 0 1\\r\\n1 13 7 11 17 15 19 18 14 11 15 1 12 4 5 16 14 11 18 9\\r\\n', 'output': ['688505688\\r\\n964619120\\r\\n826562404\\r\\n585852097\\r\\n851622699\\r\\n345141790\\r\\n104431483\\r\\n414170148\\r\\n349014804\\r\\n585852097\\r\\n516550769\\r\\n688505688\\r\\n13942874\\r\\n670143860\\r\\n447795381\\r\\n684086734\\r\\n654880455\\r\\n585852097\\r\\n20914311\\r\\n207085074']}, {'input': '30 50\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0\\r\\n1 2 1 1 2 1 1 1 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 2 2 1 1 2 2 2\\r\\n', 'output': ['346646202\\r\\n693292404\\r\\n346646202\\r\\n346646202\\r\\n693292404\\r\\n346646202\\r\\n346646202\\r\\n346646202\\r\\n346646202\\r\\n346646202\\r\\n346646202\\r\\n693292404\\r\\n346646202\\r\\n346646202\\r\\n693292404\\r\\n346646202\\r\\n346646202\\r\\n346646202\\r\\n693292404\\r\\n346646202\\r\\n346646202\\r\\n693292404\\r\\n346646202\\r\\n542025302\\r\\n693292404\\r\\n346646202\\r\\n346646202\\r\\n693292404\\r\\n693292404\\r\\n693292404']}, {'input': '40 40\\r\\n1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n28 13 22 35 22 13 23 35 14 36 30 10 10 15 3 9 35 35 9 29 14 28 8 29 22 30 4 31 39 24 4 19 37 4 20 7 11 17 3 25\\r\\n', 'output': ['368107101\\r\\n848286965\\r\\n360530176\\r\\n210572788\\r\\n199380339\\r\\n848286965\\r\\n195418938\\r\\n210572788\\r\\n683175727\\r\\n45461550\\r\\n37884625\\r\\n544374860\\r\\n345376326\\r\\n518064489\\r\\n502910639\\r\\n510487564\\r\\n210572788\\r\\n210572788\\r\\n510487564\\r\\n202995863\\r\\n683175727\\r\\n526005255\\r\\n675598802\\r\\n202995863\\r\\n360530176\\r\\n37884625\\r\\n337799401\\r\\n871017740\\r\\n548372189\\r\\n30307700\\r\\n337799401\\r\\n855863890\\r\\n878594665\\r\\n337799401\\r\\n690752652\\r\\n840710040\\r\\n180265088\\r\\n187842013\\r\\n502910639\\r\\n863440815']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n13 18 27 40 3 1 20 11 25 11 2 31 22 15 36 12 11 24 8 39 31 36 19 24 10 39 27 4 10 22 14 3 25 5 24 19 20 33 17 19 30 15 37 33 3 27 26 29 37 34\\r\\n', 'output': ['30685719\\r\\n733580163\\r\\n601248068\\r\\n631933787\\r\\n621385537\\r\\n539876630\\r\\n815089070\\r\\n947421165\\r\\n519739161\\r\\n947421165\\r\\n81508907\\r\\n764265882\\r\\n896597977\\r\\n112194626\\r\\n468915973\\r\\n489053442\\r\\n947421165\\r\\n978106884\\r\\n326035628\\r\\n92057157\\r\\n764265882\\r\\n468915973\\r\\n275212440\\r\\n978106884\\r\\n407544535\\r\\n92057157\\r\\n601248068\\r\\n163017814\\r\\n407544535\\r\\n896597977\\r\\n570562349\\r\\n621385537\\r\\n519739161\\r\\n702894444\\r\\n978106884\\r\\n275212440\\r\\n815089070\\r\\n845774789\\r\\n193703533\\r\\n275212440\\r\\n224389252\\r\\n112194626\\r\\n10548250\\r\\n845774789\\r\\n621385537\\r\\n601248068\\r\\n61371438\\r\\n...']}, {'input': '50 50\\r\\n0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0\\r\\n2 50 37 21 21 2 26 49 15 44 8 27 30 28 26 40 26 45 41 37 27 34 8 35 2 23 2 49 13 1 39 37 12 42 7 11 4 50 42 21 27 50 28 31 17 22 10 43 46 13\\r\\n', 'output': ['380563607\\r\\n529890998\\r\\n551838435\\r\\n502062638\\r\\n635094670\\r\\n380563607\\r\\n954349479\\r\\n816391328\\r\\n358616170\\r\\n386444530\\r\\n907437062\\r\\n645509106\\r\\n717232340\\r\\n336668733\\r\\n954349479\\r\\n623561669\\r\\n954349479\\r\\n77604157\\r\\n314721296\\r\\n453480088\\r\\n645509106\\r\\n480115201\\r\\n907437062\\r\\n725742999\\r\\n380563607\\r\\n362831759\\r\\n725981442\\r\\n838731371\\r\\n976296916\\r\\n362990721\\r\\n932402042\\r\\n551838435\\r\\n286892936\\r\\n5880923\\r\\n832850448\\r\\n998164872\\r\\n761127214\\r\\n529890998\\r\\n5880923\\r\\n502062638\\r\\n645509106\\r\\n181137696\\r\\n181296658\\r\\n408391967\\r\\n739179777\\r\\n193222265\\r\\n904573682\\r...']}, {'input': '10 10\\r\\n1 1 1 1 1 1 1 1 1 1\\r\\n1 2 2 1 2 2 2 1 1 1\\r\\n', 'output': ['665496237\\r\\n332748121\\r\\n332748121\\r\\n665496237\\r\\n332748121\\r\\n332748121\\r\\n332748121\\r\\n665496237\\r\\n665496237\\r\\n665496237']}, {'input': '10 10\\r\\n1 1 1 1 1 1 1 0 1 1\\r\\n2 1 2 2 1 1 1 1 1 1\\r\\n', 'output': ['771370640\\r\\n385685320\\r\\n771370640\\r\\n771370640\\r\\n385685320\\r\\n385685320\\r\\n385685320\\r\\n635246407\\r\\n385685320\\r\\n385685320']}, {'input': '10 10\\r\\n0 0 0 1 0 0 0 0 0 0\\r\\n2 2 2 2 2 2 2 1 2 2\\r\\n', 'output': ['973938381\\r\\n973938381\\r\\n973938381\\r\\n791643586\\r\\n973938381\\r\\n973938381\\r\\n973938381\\r\\n986091367\\r\\n973938381\\r\\n973938381']}, {'input': '10 10\\r\\n0 0 1 0 0 0 1 0 0 0\\r\\n2 1 2 1 1 2 1 1 1 1\\r\\n', 'output': ['44896189\\r\\n521570271\\r\\n482402083\\r\\n521570271\\r\\n521570271\\r\\n44896189\\r\\n740323218\\r\\n521570271\\r\\n521570271\\r\\n521570271']}, {'input': '10 10\\r\\n1 0 0 0 1 1 1 0 1 0\\r\\n1 2 1 2 1 1 2 2 2 1\\r\\n', 'output': ['910950063\\r\\n595918255\\r\\n797081304\\r\\n595918255\\r\\n910950063\\r\\n910950063\\r\\n823655773\\r\\n595918255\\r\\n823655773\\r\\n797081304']}, {'input': '10 10\\r\\n1 1 1 1 1 1 1 1 1 1\\r\\n17 10 8 34 5 4 3 44 20 14\\r\\n', 'output': ['709444118\\r\\n6278277\\r\\n803618104\\r\\n420643883\\r\\n502261315\\r\\n401809052\\r\\n301356789\\r\\n426922160\\r\\n12556554\\r\\n408087329']}, {'input': '10 10\\r\\n1 1 1 1 1 1 1 1 0 1\\r\\n40 36 29 4 36 35 9 38 40 18\\r\\n', 'output': ['59109317\\r\\n951618303\\r\\n17898146\\r\\n105735367\\r\\n951618303\\r\\n675623373\\r\\n487465664\\r\\n505363810\\r\\n736385984\\r\\n974931328']}, {'input': '10 10\\r\\n0 0 0 0 0 0 0 1 0 0\\r\\n8 33 37 18 30 48 45 34 25 48\\r\\n', 'output': ['211347083\\r\\n497465085\\r\\n104016450\\r\\n725092025\\r\\n542990473\\r\\n269838145\\r\\n315363533\\r\\n227335634\\r\\n286118002\\r\\n269838145']}, {'input': '10 10\\r\\n0 0 1 0 0 0 0 0 1 0\\r\\n47 34 36 9 3 16 17 46 47 1\\r\\n', 'output': ['167709201\\r\\n57603825\\r\\n597597985\\r\\n690531016\\r\\n562925123\\r\\n673030499\\r\\n527924089\\r\\n312815611\\r\\n253346183\\r\\n853137943']}, {'input': '10 10\\r\\n1 0 0 1 1 0 1 0 0 1\\r\\n24 7 10 9 6 13 27 17 6 39\\r\\n', 'output': ['976715988\\r\\n573793375\\r\\n391885813\\r\\n865390672\\r\\n244178997\\r\\n209978251\\r\\n599683310\\r\\n965679188\\r\\n634429229\\r\\n89796951']}, {'input': '10 10\\r\\n0 0 0 0 0 1 0 0 0 0\\r\\n34 34 34 34 34 34 34 34 34 34\\r\\n', 'output': ['971203339\\r\\n971203339\\r\\n971203339\\r\\n971203339\\r\\n971203339\\r\\n754874965\\r\\n971203339\\r\\n971203339\\r\\n971203339\\r\\n971203339']}, {'input': '10 10\\r\\n1 1 1 1 1 1 1 1 1 1\\r\\n43 43 43 43 43 43 43 43 43 43\\r\\n', 'output': ['44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44\\r\\n44']}, {'input': '30 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1 2 2 2 1 1 2 1 1 1 2 1 1 2 1 2 1 2 1 2 1 2 2 2 1 2 2 2 2 1\\r\\n', 'output': ['260411572\\r\\n520823144\\r\\n520823144\\r\\n520823144\\r\\n260411572\\r\\n260411572\\r\\n520823144\\r\\n260411572\\r\\n260411572\\r\\n260411572\\r\\n520823144\\r\\n260411572\\r\\n260411572\\r\\n520823144\\r\\n260411572\\r\\n520823144\\r\\n260411572\\r\\n520823144\\r\\n260411572\\r\\n520823144\\r\\n260411572\\r\\n520823144\\r\\n520823144\\r\\n520823144\\r\\n260411572\\r\\n520823144\\r\\n520823144\\r\\n520823144\\r\\n520823144\\r\\n260411572']}, {'input': '30 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1\\r\\n2 1 1 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 2 1 2 1 2 1 1 1 1 2 1\\r\\n', 'output': ['720162001\\r\\n859203177\\r\\n859203177\\r\\n859203177\\r\\n720162001\\r\\n859203177\\r\\n859203177\\r\\n720162001\\r\\n859203177\\r\\n859203177\\r\\n859203177\\r\\n720162001\\r\\n859203177\\r\\n859203177\\r\\n859203177\\r\\n859203177\\r\\n720162001\\r\\n720162001\\r\\n720162001\\r\\n720162001\\r\\n859203177\\r\\n720162001\\r\\n859203177\\r\\n720162001\\r\\n427819009\\r\\n859203177\\r\\n859203177\\r\\n859203177\\r\\n720162001\\r\\n859203177']}, {'input': '30 30\\r\\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n2 1 1 2 1 2 2 2 2 2 1 1 2 2 2 1 2 2 2 1 2 1 1 1 1 1 2 1 1 1\\r\\n', 'output': ['188114875\\r\\n593179614\\r\\n593179614\\r\\n550614566\\r\\n593179614\\r\\n188114875\\r\\n188114875\\r\\n188114875\\r\\n188114875\\r\\n188114875\\r\\n593179614\\r\\n593179614\\r\\n188114875\\r\\n188114875\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n188114875\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n593179614\\r\\n593179614\\r\\n593179614\\r\\n593179614\\r\\n593179614\\r\\n188114875\\r\\n593179614\\r\\n593179614\\r\\n593179614']}, {'input': '30 30\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0\\r\\n1 1 1 1 2 1 2 2 1 2 1 2 1 1 2 2 1 2 1 2 1 2 2 2 1 1 2 1 2 2\\r\\n', 'output': ['593179614\\r\\n593179614\\r\\n593179614\\r\\n593179614\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n593179614\\r\\n275307283\\r\\n188114875\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n275307283\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n188114875\\r\\n188114875\\r\\n593179614\\r\\n593179614\\r\\n188114875\\r\\n593179614\\r\\n188114875\\r\\n188114875']}, {'input': '30 30\\r\\n1 1 1 0 1 0 0 1 1 1 0 0 0 0 0 1 1 0 1 0 1 0 0 1 1 0 1 0 1 0\\r\\n1 1 1 2 2 1 2 1 2 1 1 2 2 2 1 2 1 1 1 1 1 2 1 2 1 2 1 2 1 1\\r\\n', 'output': ['297674502\\r\\n297674502\\r\\n297674502\\r\\n101192689\\r\\n595349004\\r\\n549718521\\r\\n101192689\\r\\n297674502\\r\\n595349004\\r\\n297674502\\r\\n549718521\\r\\n101192689\\r\\n101192689\\r\\n101192689\\r\\n549718521\\r\\n595349004\\r\\n297674502\\r\\n549718521\\r\\n297674502\\r\\n549718521\\r\\n297674502\\r\\n101192689\\r\\n549718521\\r\\n595349004\\r\\n297674502\\r\\n101192689\\r\\n297674502\\r\\n101192689\\r\\n297674502\\r\\n549718521']}, {'input': '30 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n23 45 44 49 17 36 32 26 40 8 36 11 5 19 41 16 7 38 23 40 13 16 24 44 22 13 1 2 32 31\\r\\n', 'output': ['42365832\\r\\n603712812\\r\\n124449607\\r\\n524276926\\r\\n161519661\\r\\n283321379\\r\\n362757265\\r\\n481911094\\r\\n203885493\\r\\n839372581\\r\\n283321379\\r\\n280673490\\r\\n399827319\\r\\n121801718\\r\\n683148698\\r\\n680500809\\r\\n360109376\\r\\n243603436\\r\\n42365832\\r\\n203885493\\r\\n240955547\\r\\n680500809\\r\\n521629037\\r\\n124449607\\r\\n561346980\\r\\n240955547\\r\\n479263205\\r\\n958526410\\r\\n362757265\\r\\n881738413']}, {'input': '30 30\\r\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n41 39 15 34 45 27 18 7 48 33 46 11 24 16 35 43 7 31 26 17 30 15 5 9 29 20 21 37 3 7\\r\\n', 'output': ['61128841\\r\\n655563720\\r\\n98563838\\r\\n955457225\\r\\n295691514\\r\\n377063779\\r\\n916872088\\r\\n578393446\\r\\n115755411\\r\\n17191573\\r\\n235712813\\r\\n338478642\\r\\n556999882\\r\\n38585137\\r\\n895478524\\r\\n415648916\\r\\n578393446\\r\\n137148975\\r\\n437042480\\r\\n976850789\\r\\n197127676\\r\\n98563838\\r\\n698350848\\r\\n458436044\\r\\n257106377\\r\\n796914686\\r\\n736935985\\r\\n775521122\\r\\n818308250\\r\\n578393446']}, {'input': '30 30\\r\\n0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n29 38 18 19 46 28 12 5 46 17 31 20 24 33 9 6 47 2 2 41 34 2 50 5 47 10 40 21 49 28\\r\\n', 'output': ['528451192\\r\\n658031067\\r\\n259159750\\r\\n828137710\\r\\n218632982\\r\\n957717585\\r\\n838269402\\r\\n848401094\\r\\n218632982\\r\\n688426143\\r\\n942792071\\r\\n398871317\\r\\n678294451\\r\\n807874326\\r\\n129579875\\r\\n419134701\\r\\n787610942\\r\\n139711567\\r\\n139711567\\r\\n368476241\\r\\n378607933\\r\\n139711567\\r\\n498056116\\r\\n848401094\\r\\n787610942\\r\\n698557835\\r\\n797742634\\r\\n967849277\\r\\n927322509\\r\\n957717585']}, {'input': '30 30\\r\\n0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n1 12 9 1 5 32 38 25 34 31 27 43 13 38 48 40 5 42 20 45 1 4 35 38 1 44 31 42 8 37\\r\\n', 'output': ['399967190\\r\\n806628868\\r\\n604971651\\r\\n399967190\\r\\n3347244\\r\\n800038448\\r\\n225087925\\r\\n16736220\\r\\n621707871\\r\\n420050654\\r\\n816670600\\r\\n228435169\\r\\n208351705\\r\\n225087925\\r\\n231782413\\r\\n26777952\\r\\n3347244\\r\\n51806110\\r\\n13388976\\r\\n30125196\\r\\n399967190\\r\\n601624407\\r\\n23430708\\r\\n225087925\\r\\n399967190\\r\\n628402359\\r\\n420050654\\r\\n826712332\\r\\n205004461\\r\\n823365088']}, {'input': '30 30\\r\\n0 1 1 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0\\r\\n5 20 47 27 17 5 18 30 43 23 44 6 47 8 23 41 2 46 49 33 45 27 33 16 36 2 42 36 8 23\\r\\n', 'output': ['114252107\\r\\n760713694\\r\\n489959522\\r\\n18014766\\r\\n787754905\\r\\n689300600\\r\\n484993454\\r\\n142826188\\r\\n936763395\\r\\n126261951\\r\\n805769671\\r\\n827160720\\r\\n475023194\\r\\n781749983\\r\\n176049701\\r\\n138271795\\r\\n444998584\\r\\n252523902\\r\\n765679762\\r\\n354766165\\r\\n214239282\\r\\n727490181\\r\\n354766165\\r\\n565255613\\r\\n24019688\\r\\n275720240\\r\\n798903275\\r\\n969986908\\r\\n104636607\\r\\n126261951']}, {'input': '30 30\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\\r\\n39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39\\r\\n', 'output': ['417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n417992317\\r\\n142843895']}, {'input': '30 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22\\r\\n', 'output': ['23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23\\r\\n23']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n2 1 1 2 2 1 2 1 1 2 2 2 1 2 2 1 1 1 2 1 2 1 2 2 2 1 2 1 1 2 2 2 2 2 1 2 2 2 2 2 2 1 2 1 2 2 2 1 1 2\\r\\n', 'output': ['714792256\\r\\n357396128\\r\\n357396128\\r\\n714792256\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n357396128\\r\\n357396128\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n714792256\\r\\n357396128\\r\\n357396128\\r\\n357396128\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n357396128\\r\\n357396128\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n357396128\\r\\n714792256\\r\\n714792256\\r\\n71479...']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1 1 1 2 1 1 1 1 1 2 1 1 1 2 2 2 1 1 1 1 2 2 1 2 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 2 1 1 2 2 2 1\\r\\n', 'output': ['964858256\\r\\n964858256\\r\\n964858256\\r\\n931472159\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n931472159\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n931472159\\r\\n931472159\\r\\n931472159\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n824636640\\r\\n931472159\\r\\n931472159\\r\\n964858256\\r\\n931472159\\r\\n964858256\\r\\n931472159\\r\\n931472159\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n964858256\\r\\n931472159\\r\\n964858256\\r\\n931472159\\r\\n931472159\\r\\n964858256\\r\\n964858256\\r\\n93147...']}, {'input': '50 50\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0\\r\\n1 2 2 2 2 2 2 1 1 2 2 1 1 2 1 2 2 1 2 1 2 2 1 2 2 2 1 1 1 1 2 2 2 1 2 2 1 2 2 1 1 2 2 2 2 2 1 2 2 1\\r\\n', 'output': ['512801870\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n512801870\\r\\n27359387\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n27359387\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n512801870\\r\\n512801870\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n512801870\\r\\n512801870\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n27359387\\r\\n96131098\\r\\n27359387\\r\\n27359387\\r\\n5128...']}, {'input': '50 50\\r\\n0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\\r\\n2 1 1 1 1 2 2 2 1 1 2 2 2 1 2 1 2 2 2 1 1 1 1 2 2 1 1 1 1 2 1 2 2 2 2 1 1 1 2 1 2 1 1 2 2 1 1 2 2 1\\r\\n', 'output': ['303976482\\r\\n151988241\\r\\n151988241\\r\\n151988241\\r\\n480354901\\r\\n303976482\\r\\n303976482\\r\\n303976482\\r\\n151988241\\r\\n151988241\\r\\n303976482\\r\\n303976482\\r\\n303976482\\r\\n151988241\\r\\n303976482\\r\\n151988241\\r\\n303976482\\r\\n303976482\\r\\n303976482\\r\\n151988241\\r\\n151988241\\r\\n151988241\\r\\n151988241\\r\\n303976482\\r\\n303976482\\r\\n151988241\\r\\n151988241\\r\\n151988241\\r\\n151988241\\r\\n303976482\\r\\n151988241\\r\\n303976482\\r\\n303976482\\r\\n303976482\\r\\n303976482\\r\\n151988241\\r\\n151988241\\r\\n151988241\\r\\n303976482\\r\\n151988241\\r\\n303976482\\r\\n151988241\\r\\n151988241\\r\\n303976482\\r\\n303976482\\r\\n151988241\\r\\n15198...']}, {'input': '50 50\\r\\n0 0 1 0 0 0 1 0 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 0 1 0 1 0 1 0 0 0 0 1 1 0 0 1 1 0 0 1 1 0 1 0 0 0 0\\r\\n1 1 1 1 1 2 2 1 1 2 2 2 1 1 1 2 2 2 1 1 1 1 2 1 1 1 2 2 1 1 1 2 2 1 1 2 1 1 2 2 2 2 2 2 2 2 2 1 2 1\\r\\n', 'output': ['525100120\\r\\n525100120\\r\\n392384920\\r\\n525100120\\r\\n525100120\\r\\n51955887\\r\\n784769840\\r\\n525100120\\r\\n392384920\\r\\n784769840\\r\\n784769840\\r\\n51955887\\r\\n392384920\\r\\n392384920\\r\\n525100120\\r\\n784769840\\r\\n784769840\\r\\n51955887\\r\\n392384920\\r\\n392384920\\r\\n392384920\\r\\n392384920\\r\\n784769840\\r\\n392384920\\r\\n525100120\\r\\n392384920\\r\\n51955887\\r\\n784769840\\r\\n525100120\\r\\n392384920\\r\\n525100120\\r\\n51955887\\r\\n51955887\\r\\n525100120\\r\\n392384920\\r\\n784769840\\r\\n525100120\\r\\n525100120\\r\\n784769840\\r\\n784769840\\r\\n51955887\\r\\n51955887\\r\\n784769840\\r\\n784769840\\r\\n51955887\\r\\n784769840\\r\\n51955887\\r\\n5251...']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n32 22 24 45 22 17 10 5 27 1 48 15 14 43 11 16 38 31 24 19 5 28 2 4 34 29 18 32 47 11 2 34 39 29 36 11 39 24 23 16 41 45 17 39 30 15 16 3 3 8\\r\\n', 'output': ['118672439\\r\\n268758118\\r\\n837687594\\r\\n821980974\\r\\n268758118\\r\\n842923134\\r\\n848158674\\r\\n424079337\\r\\n692837455\\r\\n284464738\\r\\n677130835\\r\\n273993658\\r\\n987773273\\r\\n253051498\\r\\n134379059\\r\\n558458396\\r\\n827216514\\r\\n832452054\\r\\n837687594\\r\\n413608257\\r\\n424079337\\r\\n977302193\\r\\n568929476\\r\\n139614599\\r\\n687601915\\r\\n263522578\\r\\n129143519\\r\\n118672439\\r\\n392666097\\r\\n134379059\\r\\n568929476\\r\\n687601915\\r\\n113436899\\r\\n263522578\\r\\n258287038\\r\\n134379059\\r\\n113436899\\r\\n837687594\\r\\n553222856\\r\\n558458396\\r\\n682366375\\r\\n821980974\\r\\n842923134\\r\\n113436899\\r\\n547987316\\r\\n273993658\\r\\n55845...']}, {'input': '50 50\\r\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n49 34 4 15 32 20 22 35 3 28 15 46 4 46 16 11 45 42 11 4 15 36 29 10 27 32 1 1 23 11 6 34 35 19 11 5 2 37 9 20 39 33 27 4 21 33 6 23 37 50\\r\\n', 'output': ['41887747\\r\\n858571128\\r\\n101008368\\r\\n378781380\\r\\n808066944\\r\\n505041840\\r\\n555546024\\r\\n883823220\\r\\n75756276\\r\\n707058576\\r\\n378781380\\r\\n163351879\\r\\n101008368\\r\\n163351879\\r\\n404033472\\r\\n277773012\\r\\n138099787\\r\\n62343511\\r\\n277773012\\r\\n101008368\\r\\n378781380\\r\\n909075312\\r\\n732310668\\r\\n252520920\\r\\n681806484\\r\\n808066944\\r\\n25252092\\r\\n25252092\\r\\n580798116\\r\\n277773012\\r\\n151512552\\r\\n858571128\\r\\n883823220\\r\\n479789748\\r\\n277773012\\r\\n126260460\\r\\n50504184\\r\\n934327404\\r\\n227268828\\r\\n505041840\\r\\n984831588\\r\\n833319036\\r\\n681806484\\r\\n101008368\\r\\n530293932\\r\\n833319036\\r\\n151512552\\r\\n...']}, {'input': '50 50\\r\\n0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n12 29 36 24 44 22 38 43 30 19 15 2 39 8 13 50 29 18 37 19 32 39 42 41 20 11 14 25 4 35 14 23 17 29 1 19 3 6 8 31 26 46 9 31 36 49 21 38 17 27\\r\\n', 'output': ['820896192\\r\\n985588111\\r\\n466199870\\r\\n643548031\\r\\n15219645\\r\\n506731999\\r\\n603015902\\r\\n945055982\\r\\n986069299\\r\\n301507951\\r\\n27875887\\r\\n136816032\\r\\n671423918\\r\\n547264128\\r\\n889304208\\r\\n425667741\\r\\n985588111\\r\\n233099935\\r\\n534607886\\r\\n301507951\\r\\n192567806\\r\\n671423918\\r\\n876647966\\r\\n808239950\\r\\n369915967\\r\\n752488176\\r\\n957712224\\r\\n711956047\\r\\n273632064\\r\\n397791854\\r\\n957712224\\r\\n575140015\\r\\n164691919\\r\\n985588111\\r\\n68408016\\r\\n301507951\\r\\n205224048\\r\\n410448096\\r\\n547264128\\r\\n124159790\\r\\n780364063\\r\\n152035677\\r\\n615672144\\r\\n124159790\\r\\n466199870\\r\\n357259725\\r\\n43832398...']}, {'input': '50 50\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n25 31 26 45 2 6 25 14 35 23 31 16 24 36 44 8 18 41 36 3 27 21 15 44 45 45 25 8 3 43 7 25 48 45 44 33 25 49 8 46 14 12 12 46 45 43 29 40 1 47\\r\\n', 'output': ['26673909\\r\\n312584066\\r\\n906195896\\r\\n646959648\\r\\n760799621\\r\\n285910157\\r\\n26673909\\r\\n334375582\\r\\n835938955\\r\\n264118641\\r\\n312584066\\r\\n96930850\\r\\n145396275\\r\\n717216589\\r\\n765682014\\r\\n48465425\\r\\n857730471\\r\\n123604759\\r\\n717216589\\r\\n642077255\\r\\n787473530\\r\\n501563373\\r\\n215653216\\r\\n765682014\\r\\n646959648\\r\\n108381283\\r\\n26673909\\r\\n48465425\\r\\n642077255\\r\\n884404380\\r\\n167187791\\r\\n26673909\\r\\n290792550\\r\\n646959648\\r\\n765682014\\r\\n75139334\\r\\n614792020\\r\\n172070184\\r\\n48465425\\r\\n528237282\\r\\n334375582\\r\\n571820314\\r\\n571820314\\r\\n528237282\\r\\n646959648\\r\\n884404380\\r\\n550028798\\r\\n242...']}, {'input': '50 50\\r\\n0 0 0 1 0 0 1 1 1 0 1 1 1 0 0 1 1 1 0 0 1 1 0 0 1 1 0 1 0 1 0 0 1 1 1 0 0 1 1 0 0 1 0 0 1 0 1 1 0 0\\r\\n45 49 17 22 28 34 24 38 5 46 22 36 11 12 43 21 47 39 38 38 38 27 10 49 19 46 23 7 46 35 11 38 25 16 7 32 12 13 44 14 41 36 7 31 4 46 40 28 28 46\\r\\n', 'output': ['644620779\\r\\n102973792\\r\\n443172276\\r\\n267699221\\r\\n201448503\\r\\n886344552\\r\\n745782947\\r\\n99391617\\r\\n196964962\\r\\n259647944\\r\\n267699221\\r\\n619552244\\r\\n632971787\\r\\n371547745\\r\\n416322096\\r\\n28657358\\r\\n254279678\\r\\n338433480\\r\\n344697565\\r\\n344697565\\r\\n99391617\\r\\n464664183\\r\\n143249062\\r\\n102973792\\r\\n548817985\\r\\n15237815\\r\\n129823972\\r\\n675048688\\r\\n259647944\\r\\n380510381\\r\\n756520580\\r\\n344697565\\r\\n984824810\\r\\n829936749\\r\\n675048688\\r\\n658045869\\r\\n371547745\\r\\n112811160\\r\\n535398442\\r\\n599846428\\r\\n188023413\\r\\n619552244\\r\\n299923214\\r\\n44774351\\r\\n956167452\\r\\n259647944\\r\\n577475343\\r...']}, {'input': '50 50\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47\\r\\n', 'output': ['529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n988406960\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n529479959\\r\\n52947...']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\\r\\n', 'output': ['9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9\\r\\n9']}, {'input': '5 50\\r\\n1 1 1 1 1\\r\\n1 1 4 2 3\\r\\n', 'output': ['635246412\\r\\n635246412\\r\\n544496942\\r\\n272248471\\r\\n907494883']}, {'input': '10 50\\r\\n0 0 0 0 0 0 0 0 1 0\\r\\n3 1 3 3 1 3 1 2 2 1\\r\\n', 'output': ['187134581\\r\\n727874429\\r\\n187134581\\r\\n187134581\\r\\n727874429\\r\\n187134581\\r\\n727874429\\r\\n457504505\\r\\n124563167\\r\\n727874429']}, {'input': '20 50\\r\\n1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 1\\r\\n1 2 2 1 2 2 2 2 2 2 1 1 2 2 2 1 1 1 2 2\\r\\n', 'output': ['853605709\\r\\n708967065\\r\\n708967065\\r\\n853605709\\r\\n708967065\\r\\n708967065\\r\\n708967065\\r\\n922030188\\r\\n708967065\\r\\n922030188\\r\\n853605709\\r\\n853605709\\r\\n708967065\\r\\n922030188\\r\\n708967065\\r\\n461015094\\r\\n853605709\\r\\n853605709\\r\\n708967065\\r\\n708967065']}, {'input': '20 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1 2 2 2 2 2 2 1 2 1 2 1 2 1 1 2 1 2 2 1\\r\\n', 'output': ['436731907\\r\\n873463814\\r\\n873463814\\r\\n873463814\\r\\n873463814\\r\\n873463814\\r\\n873463814\\r\\n436731907\\r\\n873463814\\r\\n436731907\\r\\n873463814\\r\\n436731907\\r\\n873463814\\r\\n436731907\\r\\n436731907\\r\\n873463814\\r\\n436731907\\r\\n873463814\\r\\n873463814\\r\\n436731907']}, {'input': '40 50\\r\\n0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0\\r\\n33 26 4 19 42 43 19 32 13 23 19 1 18 43 43 43 19 31 4 25 28 23 33 37 36 23 5 12 18 32 34 1 21 22 34 35 37 16 41 39\\r\\n', 'output': ['729284231\\r\\n60340485\\r\\n239647233\\r\\n389641092\\r\\n20685064\\r\\n829280137\\r\\n389641092\\r\\n918933511\\r\\n529292419\\r\\n629288325\\r\\n366487398\\r\\n808595073\\r\\n579290372\\r\\n829280137\\r\\n829280137\\r\\n41331201\\r\\n389641092\\r\\n110338438\\r\\n239647233\\r\\n249989765\\r\\n679286278\\r\\n629288325\\r\\n426374038\\r\\n968931464\\r\\n160336391\\r\\n629288325\\r\\n49997953\\r\\n718941699\\r\\n579290372\\r\\n918933511\\r\\n539634951\\r\\n808595073\\r\\n89829960\\r\\n818937605\\r\\n539634951\\r\\n349985671\\r\\n968931464\\r\\n958588932\\r\\n210334344\\r\\n589632904']}, {'input': '41 50\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n1 2 4 2 3 2 4 3 1 1 3 1 3 2 5 3 3 5 4 4 1 1 2 3 2 1 5 5 5 4 2 2 2 1 2 4 4 5 2 1 4\\r\\n', 'output': ['394710173\\r\\n789420346\\r\\n580596339\\r\\n789420346\\r\\n185886166\\r\\n789420346\\r\\n580596339\\r\\n185886166\\r\\n394710173\\r\\n394710173\\r\\n185886166\\r\\n394710173\\r\\n581788048\\r\\n789420346\\r\\n636898629\\r\\n185886166\\r\\n185886166\\r\\n975306512\\r\\n580596339\\r\\n580596339\\r\\n394710173\\r\\n394710173\\r\\n55110581\\r\\n185886166\\r\\n55110581\\r\\n394710173\\r\\n975306512\\r\\n975306512\\r\\n975306512\\r\\n580596339\\r\\n789420346\\r\\n789420346\\r\\n789420346\\r\\n394710173\\r\\n789420346\\r\\n580596339\\r\\n580596339\\r\\n975306512\\r\\n789420346\\r\\n394710173\\r\\n580596339']}, {'input': '42 50\\r\\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0\\r\\n2 4 6 8 1 3 6 1 4 1 3 4 3 7 6 6 8 7 4 1 7 4 6 9 3 1 9 7 1 2 9 3 1 6 1 5 1 8 2 6 8 8\\r\\n', 'output': ['11284873\\r\\n329090227\\r\\n33854619\\r\\n45139492\\r\\n504764613\\r\\n995500935\\r\\n33854619\\r\\n504764613\\r\\n22569746\\r\\n504764613\\r\\n516049486\\r\\n22569746\\r\\n516049486\\r\\n538619232\\r\\n33854619\\r\\n33854619\\r\\n45139492\\r\\n538619232\\r\\n22569746\\r\\n504764613\\r\\n538619232\\r\\n22569746\\r\\n33854619\\r\\n549904105\\r\\n516049486\\r\\n504764613\\r\\n549904105\\r\\n538619232\\r\\n504764613\\r\\n11284873\\r\\n990014099\\r\\n516049486\\r\\n504764613\\r\\n33854619\\r\\n504764613\\r\\n527334359\\r\\n504764613\\r\\n45139492\\r\\n663667290\\r\\n33854619\\r\\n45139492\\r\\n45139492']}, {'input': '43 50\\r\\n1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n13 7 13 15 8 9 11 1 15 9 3 7 3 15 4 7 7 16 9 13 12 16 16 1 5 5 14 5 17 2 1 13 4 13 10 17 17 6 11 15 14 3 6\\r\\n', 'output': ['175780254\\r\\n94650906\\r\\n163530008\\r\\n802992688\\r\\n561362014\\r\\n881093354\\r\\n522311681\\r\\n319731340\\r\\n802992688\\r\\n881093354\\r\\n959194020\\r\\n241630674\\r\\n959194020\\r\\n802992688\\r\\n280681007\\r\\n241630674\\r\\n241630674\\r\\n124479675\\r\\n881093354\\r\\n163530008\\r\\n842043021\\r\\n124479675\\r\\n124479675\\r\\n13521558\\r\\n600412347\\r\\n600412347\\r\\n483261348\\r\\n67607790\\r\\n444211015\\r\\n639462680\\r\\n319731340\\r\\n163530008\\r\\n280681007\\r\\n163530008\\r\\n202580341\\r\\n444211015\\r\\n444211015\\r\\n920143687\\r\\n522311681\\r\\n802992688\\r\\n483261348\\r\\n959194020\\r\\n920143687']}, {'input': '44 50\\r\\n0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\\r\\n2 6 6 11 2 4 11 10 5 15 15 20 20 7 9 8 17 4 16 19 12 16 12 13 2 11 20 2 6 10 2 18 7 5 18 10 15 6 11 9 7 5 17 11\\r\\n', 'output': ['327775237\\r\\n983325711\\r\\n983325711\\r\\n305397274\\r\\n327775237\\r\\n853173373\\r\\n305397274\\r\\n640631832\\r\\n320315916\\r\\n960947748\\r\\n960947748\\r\\n272889453\\r\\n283019311\\r\\n648091153\\r\\n975866390\\r\\n312856595\\r\\n290478632\\r\\n655550474\\r\\n625713190\\r\\n618253869\\r\\n968407069\\r\\n625713190\\r\\n968407069\\r\\n633172511\\r\\n327775237\\r\\n305397274\\r\\n283019311\\r\\n327775237\\r\\n983325711\\r\\n640631832\\r\\n327775237\\r\\n953488427\\r\\n648091153\\r\\n816905628\\r\\n953488427\\r\\n640631832\\r\\n960947748\\r\\n983325711\\r\\n305397274\\r\\n975866390\\r\\n648091153\\r\\n320315916\\r\\n290478632\\r\\n305397274']}, {'input': '45 50\\r\\n0 1 0 1 0 1 0 1 1 0 0 1 0 0 1 1 0 1 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 1 0 0 1 1 1 1 0\\r\\n4 4 23 23 13 23 9 16 4 18 20 15 21 24 22 20 22 1 15 7 10 17 20 6 15 7 4 10 16 7 14 9 13 17 10 14 22 23 3 5 20 11 4 24 24\\r\\n', 'output': ['630266647\\r\\n555616275\\r\\n379739073\\r\\n948743787\\r\\n301438985\\r\\n948743787\\r\\n669416691\\r\\n225976394\\r\\n555616275\\r\\n340589029\\r\\n156600176\\r\\n835755590\\r\\n563727926\\r\\n786866823\\r\\n560278630\\r\\n781592669\\r\\n970855676\\r\\n388465157\\r\\n835755590\\r\\n853405544\\r\\n889918511\\r\\n614441551\\r\\n156600176\\r\\n446277794\\r\\n117450132\\r\\n853405544\\r\\n630266647\\r\\n78300088\\r\\n225976394\\r\\n722767393\\r\\n708566735\\r\\n669416691\\r\\n58825276\\r\\n931705632\\r\\n78300088\\r\\n708566735\\r\\n970855676\\r\\n948743787\\r\\n223138897\\r\\n39150044\\r\\n781592669\\r\\n280139315\\r\\n555616275\\r\\n338964591\\r\\n786866823']}, {'input': '46 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n29 22 30 33 13 31 19 11 12 21 5 4 24 21 20 6 28 16 27 18 21 11 3 24 21 8 8 33 24 7 34 12 13 32 26 33 33 22 18 2 3 7 24 17 9 30\\r\\n', 'output': ['265429165\\r\\n98093399\\r\\n859759619\\r\\n646262275\\r\\n738585431\\r\\n455845720\\r\\n311590743\\r\\n548168876\\r\\n144254977\\r\\n502007298\\r\\n975163564\\r\\n380833110\\r\\n288509954\\r\\n502007298\\r\\n905921197\\r\\n571249665\\r\\n669343064\\r\\n525088087\\r\\n75012610\\r\\n715504642\\r\\n502007298\\r\\n548168876\\r\\n784747009\\r\\n288509954\\r\\n502007298\\r\\n761666220\\r\\n761666220\\r\\n646262275\\r\\n288509954\\r\\n167335766\\r\\n242348376\\r\\n144254977\\r\\n738585431\\r\\n51931821\\r\\n478926509\\r\\n646262275\\r\\n646262275\\r\\n98093399\\r\\n715504642\\r\\n190416555\\r\\n784747009\\r\\n167335766\\r\\n288509954\\r\\n121174188\\r\\n357752321\\r\\n859759619']}, {'input': '47 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n30 32 21 7 15 4 39 36 23 17 13 4 8 18 38 24 13 27 37 27 32 16 8 12 7 23 28 38 11 36 19 33 10 34 4 8 5 22 3 29 21 30 7 32 35 26 23\\r\\n', 'output': ['243227082\\r\\n658739962\\r\\n369907828\\r\\n456050727\\r\\n121613541\\r\\n831025760\\r\\n116546336\\r\\n491521369\\r\\n785420708\\r\\n537126421\\r\\n704345014\\r\\n831025760\\r\\n663807167\\r\\n744882861\\r\\n907034249\\r\\n993177148\\r\\n704345014\\r\\n618202115\\r\\n699277809\\r\\n618202115\\r\\n658739962\\r\\n329369981\\r\\n663807167\\r\\n496588574\\r\\n456050727\\r\\n785420708\\r\\n825958555\\r\\n907034249\\r\\n288832134\\r\\n491521369\\r\\n952639301\\r\\n866496402\\r\\n81075694\\r\\n76008489\\r\\n831025760\\r\\n663807167\\r\\n40537847\\r\\n577664268\\r\\n623269320\\r\\n35470642\\r\\n369907828\\r\\n243227082\\r\\n456050727\\r\\n658739962\\r\\n283764929\\r\\n410445675\\r\\n785420708...']}, {'input': '48 50\\r\\n1 0 1 0 1 0 0 1 0 0 0 1 1 0 0 0 1 0 1 0 1 0 0 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 1\\r\\n9 42 15 12 2 9 41 13 23 14 17 42 25 10 10 2 38 36 41 31 9 20 31 41 20 41 40 28 7 37 14 25 23 38 27 17 6 40 2 19 19 3 8 32 13 22 41 20\\r\\n', 'output': ['386033769\\r\\n373559702\\r\\n643389615\\r\\n677156688\\r\\n85785282\\r\\n507867516\\r\\n317129978\\r\\n557604333\\r\\n299639299\\r\\n790016136\\r\\n959305308\\r\\n803246569\\r\\n74071672\\r\\n564297240\\r\\n564297240\\r\\n112859448\\r\\n631676005\\r\\n34981358\\r\\n760353928\\r\\n751077091\\r\\n386033769\\r\\n130350127\\r\\n751077091\\r\\n760353928\\r\\n130350127\\r\\n760353928\\r\\n717461287\\r\\n581787919\\r\\n395008068\\r\\n91411082\\r\\n790016136\\r\\n412498747\\r\\n299639299\\r\\n631676005\\r\\n159856954\\r\\n959305308\\r\\n338578344\\r\\n717461287\\r\\n112859448\\r\\n814960179\\r\\n73920403\\r\\n169289172\\r\\n451437792\\r\\n807506815\\r\\n733586412\\r\\n243209575\\r\\n317129978\\r...']}, {'input': '49 50\\r\\n0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 1 0 0 0 0 0\\r\\n2 3 2 3 4 2 1 1 1 1 1 1 3 1 2 3 2 4 1 2 2 1 1 2 4 3 2 4 1 2 1 1 2 3 1 3 3 2 2 1 4 3 4 1 3 3 4 1 3\\r\\n', 'output': ['136570933\\r\\n703978576\\r\\n136570933\\r\\n703978576\\r\\n273141866\\r\\n136570933\\r\\n567407643\\r\\n478951804\\r\\n567407643\\r\\n567407643\\r\\n478951804\\r\\n478951804\\r\\n703978576\\r\\n567407643\\r\\n136570933\\r\\n703978576\\r\\n136570933\\r\\n273141866\\r\\n567407643\\r\\n136570933\\r\\n136570933\\r\\n567407643\\r\\n567407643\\r\\n136570933\\r\\n273141866\\r\\n703978576\\r\\n957903608\\r\\n273141866\\r\\n567407643\\r\\n136570933\\r\\n567407643\\r\\n567407643\\r\\n136570933\\r\\n703978576\\r\\n567407643\\r\\n438611059\\r\\n438611059\\r\\n136570933\\r\\n136570933\\r\\n478951804\\r\\n273141866\\r\\n703978576\\r\\n917562863\\r\\n478951804\\r\\n703978576\\r\\n703978576\\r\\n27314...']}, {'input': '50 50\\r\\n0 0 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 1 1 0 1\\r\\n1 9 24 8 8 11 21 11 8 5 16 32 31 15 29 14 16 20 5 18 5 10 31 23 21 4 4 20 20 11 1 4 4 15 9 14 5 30 13 16 32 27 19 10 19 24 21 1 21 15\\r\\n', 'output': ['475420905\\r\\n285810733\\r\\n429413837\\r\\n935878068\\r\\n808634181\\r\\n787710167\\r\\n1395475\\r\\n787710167\\r\\n808634181\\r\\n85801616\\r\\n619024009\\r\\n748779213\\r\\n762627113\\r\\n143603104\\r\\n896947114\\r\\n666426552\\r\\n619024009\\r\\n343206464\\r\\n380615819\\r\\n571621466\\r\\n380615819\\r\\n171603232\\r\\n132672278\\r\\n952237285\\r\\n1395475\\r\\n467939034\\r\\n467939034\\r\\n524218923\\r\\n343206464\\r\\n238408190\\r\\n616106935\\r\\n467939034\\r\\n467939034\\r\\n143603104\\r\\n285810733\\r\\n639542266\\r\\n85801616\\r\\n514809696\\r\\n23435331\\r\\n619024009\\r\\n748779213\\r\\n662977597\\r\\n725343882\\r\\n761231638\\r\\n48798018\\r\\n429413837\\r\\n959313399\\r\\n61...']}, {'input': '47 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39\\r\\n', 'output': ['573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n573459562\\r\\n57345...']}, {'input': '48 50\\r\\n1 0 1 0 1 0 0 1 0 0 0 1 1 0 0 0 1 0 1 0 1 0 0 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 1\\r\\n42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42\\r\\n', 'output': ['612040887\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n612040887\\r\\n612040887\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n612040887\\r\\n612040887\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n612040887\\r\\n612040887\\r\\n271232481\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n612040887\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n271232481\\r\\n27123...']}, {'input': '49 50\\r\\n0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 1 0 0 0 0 0\\r\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\r\\n', 'output': ['371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n872512215\\r\\n371008012\\r\\n371008012\\r\\n872512215\\r\\n872512215\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n872512215\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n371008012\\r\\n872512215\\r\\n872512215\\r\\n371008012\\r\\n371008012\\r\\n872512215\\r\\n371008012\\r\\n371008012\\r\\n872512215\\r\\n872512215\\r\\n371008012\\r\\n371008012\\r\\n37100...']}, {'input': '50 50\\r\\n0 0 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 1 1 0 1\\r\\n33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33\\r\\n', 'output': ['677141055\\r\\n677141055\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141055\\r\\n677141055\\r\\n677141057\\r\\n677141057\\r\\n677141055\\r\\n677141055\\r\\n677141057\\r\\n677141057\\r\\n677141055\\r\\n677141057\\r\\n677141055\\r\\n677141057\\r\\n677141057\\r\\n677141057\\r\\n677141055\\r\\n677141055\\r\\n677141057\\r\\n677141057\\r\\n677141057\\r\\n677141057\\r\\n677141055\\r\\n677141057\\r\\n677141057\\r\\n677141057\\r\\n677141055\\r\\n677141055\\r\\n677141055\\r\\n67714...']}, {'input': '50 50\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n982795629\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n834950403\\r\\n83495...']}, {'input': '50 50\\r\\n1 0 1 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 1 0 1 0 1 0 1 1 0 0 1 1 0 0 1 0 0 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306344\\r\\n996306346\\r\\n996306346\\r\\n996306346\\r\\n996306344\\r\\n996306344\\r\\n996306344\\r\\n996306346\\r\\n996306346\\r\\n996306346\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306344\\r\\n996306346\\r\\n996306346\\r\\n996306344\\r\\n996306344\\r\\n996306346\\r\\n996306346\\r\\n996306344\\r\\n996306344\\r\\n99630...']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n584830027\\r\\n70582...']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n', 'output': ['2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2\\r\\n2']}, {'input': '50 50\\r\\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\\r\\n', 'output': ['382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n798399400\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n382995896\\r\\n38299...']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\\r\\n', 'output': ['459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n533798960\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n459085224\\r\\n45908...']}, {'input': '50 50\\r\\n0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\\r\\n', 'output': ['311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n273616393\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n311169062\\r\\n31116...']}, {'input': '50 50\\r\\n0 0 0 1 0 0 1 1 1 0 1 1 1 0 0 1 1 1 0 0 1 1 0 0 1 1 0 1 0 1 0 0 1 1 1 0 0 1 1 0 0 1 0 0 1 0 1 1 0 0\\r\\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\\r\\n', 'output': ['123180764\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180766\\r\\n123180766\\r\\n123180764\\r\\n123180766\\r\\n123180766\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180766\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180766\\r\\n123180764\\r\\n123180766\\r\\n123180764\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180766\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180764\\r\\n123180764\\r\\n123180766\\r\\n123180764\\r\\n12318...']}, {'input': '50 50\\r\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\\r\\n', 'output': ['80661140\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858868\\r\\n286858...']}, {'input': '50 50\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\\r\\n', 'output': ['51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51\\r\\n51']}, {'input': '5 5\\r\\n0 1 0 0 1\\r\\n2 4 1 2 1\\r\\n', 'output': ['665717847\\r\\n333191345\\r\\n831981100\\r\\n665717847\\r\\n831981101']}, {'input': '20 20\\r\\n0 1 0 1 1 1 0 0 0 1 1 1 1 0 1 1 1 1 1 0\\r\\n109 1 24 122 136 42 25 112 110 15 26 48 35 10 86 13 41 6 24 15\\r\\n', 'output': ['217595927\\r\\n149660176\\r\\n322657182\\r\\n290143118\\r\\n388896876\\r\\n296261274\\r\\n86540143\\r\\n507489163\\r\\n979723241\\r\\n248413934\\r\\n896431517\\r\\n195977977\\r\\n246884395\\r\\n633562669\\r\\n891842900\\r\\n947337935\\r\\n146601098\\r\\n897961056\\r\\n597111165\\r\\n451221827']}, {'input': '100 100\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n2360379 9167688 488710 6896065 5243867 11762954 673012 1669264 265550 10921726 9383074 9523863 13429215 3223202 5372988 8197773 13052301 6045370 18630475 23534272 14923100 17181531 1112172 24623774 16991041 2363652 10720874 7171147 1261895 13127315 454592 1510882 12229327 15445105 15722482 5467131 92...', 'output': ['19790585\\r\\n929149870\\r\\n158142558\\r\\n415179791\\r\\n770973301\\r\\n197788614\\r\\n662208363\\r\\n968610058\\r\\n711622366\\r\\n89060603\\r\\n49510939\\r\\n593110743\\r\\n227455934\\r\\n197704062\\r\\n89005665\\r\\n237287745\\r\\n266986632\\r\\n365753331\\r\\n365877936\\r\\n464762563\\r\\n879788817\\r\\n148424226\\r\\n355820880\\r\\n830466826\\r\\n583301068\\r\\n553505420\\r\\n59407792\\r\\n988431747\\r\\n889537165\\r\\n425125094\\r\\n978481639\\r\\n494195332\\r\\n98957157\\r\\n850143163\\r\\n474568826\\r\\n889578801\\r\\n691943729\\r\\n751249179\\r\\n29723781\\r\\n385464681\\r\\n494219413\\r\\n968727719\\r\\n622687463\\r\\n929103141\\r\\n89090024\\r\\n563393484\\r\\n29714966\\r\\n484...']}, {'input': '1000 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...', 'output': ['652684471\\r\\n652684471\\r\\n959809060\\r\\n652684471\\r\\n307124589\\r\\n652684471\\r\\n652684471\\r\\n614249178\\r\\n307124589\\r\\n307124589\\r\\n307124589\\r\\n959809060\\r\\n652684471\\r\\n652684471\\r\\n959809060\\r\\n307124589\\r\\n307124589\\r\\n614249178\\r\\n652684471\\r\\n307124589\\r\\n652684471\\r\\n307124589\\r\\n307124589\\r\\n652684471\\r\\n268689296\\r\\n307124589\\r\\n959809060\\r\\n652684471\\r\\n307124589\\r\\n652684471\\r\\n614249178\\r\\n959809060\\r\\n652684471\\r\\n652684471\\r\\n307124589\\r\\n614249178\\r\\n307124589\\r\\n652684471\\r\\n652684471\\r\\n959809060\\r\\n307124589\\r\\n959809060\\r\\n307124589\\r\\n307124589\\r\\n959809060\\r\\n307124589\\r\\n95980...']}, {'input': '50000 1000\\r\\n1 0 0 1 0 0 0 1 1 1 0 1 0 1 1 0 1 1 1 0 0 0 0 1 0 1 0 1 0 0 1 1 1 1 0 1 0 0 1 1 1 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 1 0 1 0 0 0 0 1 0 1 0 1 1 1 1 0 0 1 0 1 0 1 0 1 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 1 1 0 0 0 1 1 1 1 1 1 0 1 1 0 0 0 1 1 0 1 0 0 1 1 1 0 0 1 0 0 0 0 1 0 1 0 0 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 0 0 0 1 0 0 0 1 1 1 1 0 1 0 1 1 0 0 1 0 1 0 0 1 0 0 1 0 1 1 0 1 0 0 0 1 1 0 1 0 1 1 0 1 0 1 0 0 0 1 0 1 0 1 1 1 0 0 1 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0...', 'output': ['512182090\\r\\n641172382\\r\\n697325018\\r\\n818311552\\r\\n590906119\\r\\n461103680\\r\\n370418391\\r\\n653972733\\r\\n766040380\\r\\n237657896\\r\\n893425807\\r\\n807372188\\r\\n964959592\\r\\n319396135\\r\\n111079234\\r\\n137994713\\r\\n9663504\\r\\n92358638\\r\\n965938119\\r\\n98687680\\r\\n675026792\\r\\n279244742\\r\\n15543727\\r\\n479206408\\r\\n519670811\\r\\n684652624\\r\\n777078382\\r\\n554151828\\r\\n865485075\\r\\n937290032\\r\\n565154228\\r\\n221807985\\r\\n218937300\\r\\n112386612\\r\\n310142313\\r\\n986922988\\r\\n267227503\\r\\n40988675\\r\\n369434552\\r\\n763776107\\r\\n694666611\\r\\n182771968\\r\\n494768207\\r\\n633944759\\r\\n635638470\\r\\n761724538\\r\\n162219074\\r\\n...']}, {'input': '200000 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...', 'output': ['967977965\\r\\n983111159\\r\\n952844771\\r\\n937711577\\r\\n937711577\\r\\n771246443\\r\\n483715757\\r\\n892311995\\r\\n967977965\\r\\n801512831\\r\\n846912413\\r\\n831779219\\r\\n967977965\\r\\n786379637\\r\\n892311995\\r\\n604781309\\r\\n710713667\\r\\n952844771\\r\\n952844771\\r\\n937711577\\r\\n874943312\\r\\n120519101\\r\\n892311995\\r\\n589648115\\r\\n619914503\\r\\n665314085\\r\\n374637533\\r\\n892311995\\r\\n937711577\\r\\n892311995\\r\\n650180891\\r\\n771246443\\r\\n922578383\\r\\n877178801\\r\\n483715757\\r\\n892311995\\r\\n952844771\\r\\n619914503\\r\\n574514921\\r\\n62834123\\r\\n907445189\\r\\n816646025\\r\\n846912413\\r\\n816646025\\r\\n937711577\\r\\n756113249\\r\\n846912...']}, {'input': '200000 3000\\r\\n0 1 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 1 0 0 0 0 0 1 0 1 1 0 1 0 0 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 1 0 0 1 0 1 0 0 1 1 0 0 1 0 0 0 1 0 1 1 1 1 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 0 1 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 ...', 'output': ['568390992\\r\\n182388528\\r\\n352385861\\r\\n315979953\\r\\n743372559\\r\\n632628120\\r\\n995395434\\r\\n506334569\\r\\n667771666\\r\\n453192833\\r\\n680429762\\r\\n407446046\\r\\n471154985\\r\\n147648615\\r\\n936047905\\r\\n830053040\\r\\n251214636\\r\\n602162072\\r\\n263562703\\r\\n990790012\\r\\n150217484\\r\\n82075059\\r\\n932318671\\r\\n687474214\\r\\n345881774\\r\\n771937952\\r\\n356541287\\r\\n15233024\\r\\n811478946\\r\\n737405100\\r\\n892805310\\r\\n176354033\\r\\n997083988\\r\\n281716722\\r\\n628262667\\r\\n556117647\\r\\n359954433\\r\\n926451677\\r\\n992018326\\r\\n134736321\\r\\n139309832\\r\\n510415929\\r\\n125029199\\r\\n222157092\\r\\n859462710\\r\\n16077301\\r\\n83159806...']}, {'input': '20 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1 1 3 2 1 3 2 1 1 2 1 1 2 2 4 2 1 5 2 3\\r\\n', 'output': ['249561090\\r\\n249561090\\r\\n748683270\\r\\n499122180\\r\\n249561090\\r\\n748683270\\r\\n499122180\\r\\n249561090\\r\\n249561090\\r\\n499122180\\r\\n249561090\\r\\n249561090\\r\\n499122180\\r\\n499122180\\r\\n7\\r\\n499122180\\r\\n249561090\\r\\n249561097\\r\\n499122180\\r\\n748683270']}, {'input': '20 30\\r\\n1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n1 2 1 3 1 4 1 5 1 1 2 3 1 1 3 3 2 2 1 2\\r\\n', 'output': ['902255482\\r\\n806266611\\r\\n902255482\\r\\n710277740\\r\\n902255482\\r\\n537377994\\r\\n902255482\\r\\n518299998\\r\\n902255482\\r\\n902255482\\r\\n806266611\\r\\n710277740\\r\\n902255482\\r\\n902255482\\r\\n710277740\\r\\n710277740\\r\\n806266611\\r\\n806266611\\r\\n902255482\\r\\n806266611']}, {'input': '20 30\\r\\n0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\\r\\n3 4 1 2 1 1 1 2 5 2 1 2 3 1 1 2 3 2 1 2\\r\\n', 'output': ['441078046\\r\\n920852179\\r\\n479774133\\r\\n959548266\\r\\n479774133\\r\\n479774133\\r\\n479774133\\r\\n959548266\\r\\n402381959\\r\\n263018694\\r\\n479774133\\r\\n959548266\\r\\n441078046\\r\\n479774133\\r\\n479774133\\r\\n959548266\\r\\n441078046\\r\\n959548266\\r\\n479774133\\r\\n959548266']}, {'input': '20 30\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0\\r\\n1 1 3 2 3 1 2 2 3 2 2 2 2 2 2 3 3 1 1 2\\r\\n', 'output': ['550803098\\r\\n550803098\\r\\n654164941\\r\\n103361843\\r\\n654164941\\r\\n550803098\\r\\n103361843\\r\\n103361843\\r\\n654164941\\r\\n103361843\\r\\n103361843\\r\\n103361843\\r\\n103361843\\r\\n103361843\\r\\n276551708\\r\\n654164941\\r\\n654164941\\r\\n138275854\\r\\n550803098\\r\\n103361843']}, {'input': '20 30\\r\\n0 0 1 1 1 0 0 1 0 0 1 0 0 1 1 1 1 0 0 1\\r\\n1 2 2 2 2 2 1 1 2 1 4 1 2 5 3 4 1 1 2 1\\r\\n', 'output': ['297511613\\r\\n595023226\\r\\n756311680\\r\\n756311680\\r\\n756311680\\r\\n595023226\\r\\n297511613\\r\\n378155840\\r\\n595023226\\r\\n297511613\\r\\n514379007\\r\\n297511613\\r\\n595023226\\r\\n892534847\\r\\n136223167\\r\\n514379007\\r\\n378155840\\r\\n297511613\\r\\n595023226\\r\\n378155840']}, {'input': '20 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n765 451 7275 385 1686 78 554 114 1980 394 776 232 627 760 782 7 486 32 1100 1516\\r\\n', 'output': ['491636110\\r\\n498623506\\r\\n486651408\\r\\n182179980\\r\\n6989399\\r\\n10980766\\r\\n871467875\\r\\n92836839\\r\\n509106603\\r\\n951327263\\r\\n211628580\\r\\n83852758\\r\\n11480438\\r\\n618912260\\r\\n58897200\\r\\n820057743\\r\\n605934809\\r\\n183676993\\r\\n948333237\\r\\n341401087']}, {'input': '20 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1\\r\\n779 1317 1275 234 857 1531 785 265 679 767 1994 11 918 1146 1807 71 813 245 3926 580\\r\\n', 'output': ['552990868\\r\\n90431251\\r\\n712871250\\r\\n952916426\\r\\n537881559\\r\\n151361542\\r\\n321464532\\r\\n89445141\\r\\n86037605\\r\\n17799187\\r\\n586392419\\r\\n241031286\\r\\n40642277\\r\\n699465709\\r\\n481837969\\r\\n920500985\\r\\n572000768\\r\\n195703359\\r\\n903238702\\r\\n911489090']}, {'input': '20 30\\r\\n0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n128 574 205 490 611 1294 283 1690 1466 1896 272 19 1020 5032 357 1500 36 1749 1202 176\\r\\n', 'output': ['389864218\\r\\n157345415\\r\\n537589523\\r\\n962131647\\r\\n753565149\\r\\n104281847\\r\\n378440811\\r\\n873692367\\r\\n690552162\\r\\n658861420\\r\\n578900375\\r\\n198248582\\r\\n923070965\\r\\n228091231\\r\\n572635926\\r\\n887695253\\r\\n795942304\\r\\n70748620\\r\\n510359933\\r\\n785624388']}, {'input': '20 30\\r\\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\\r\\n61 849 320 1007 624 441 1332 3939 1176 718 419 634 657 914 858 882 1019 1567 62 2521\\r\\n', 'output': ['514012356\\r\\n393871659\\r\\n166092575\\r\\n569465276\\r\\n74319433\\r\\n306884170\\r\\n254628439\\r\\n656312237\\r\\n485609669\\r\\n216694535\\r\\n825782618\\r\\n110704962\\r\\n294216114\\r\\n131255421\\r\\n733108087\\r\\n613768340\\r\\n14181299\\r\\n610566194\\r\\n624888021\\r\\n887363731']}, {'input': '20 30\\r\\n0 1 0 1 1 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0\\r\\n244 1901 938 1350 1010 763 318 2158 1645 534 1356 563 295 1449 2306 224 1302 195 639 810\\r\\n', 'output': ['300071414\\r\\n595185476\\r\\n40756239\\r\\n113904636\\r\\n440148868\\r\\n947268885\\r\\n456535325\\r\\n542868956\\r\\n183161324\\r\\n427608407\\r\\n61171180\\r\\n375813928\\r\\n43680359\\r\\n55509680\\r\\n30410255\\r\\n360521133\\r\\n535772284\\r\\n722568686\\r\\n663107799\\r\\n390646234']}, {'input': '20 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n126679203 179924771 16639504 67055540 14134870 36407782 15024189 39367944 121531542 5400023 5834434 8539193 3686913 11287136 36370086 71808281 138206490 59846864 19052959 21446598\\r\\n', 'output': ['615913610\\r\\n488825486\\r\\n773371096\\r\\n742795989\\r\\n193664548\\r\\n323188752\\r\\n32686082\\r\\n709701410\\r\\n293733249\\r\\n161181348\\r\\n193396792\\r\\n354491196\\r\\n708550409\\r\\n644392716\\r\\n323187536\\r\\n646345011\\r\\n487479735\\r\\n1930544\\r\\n322628919\\r\\n966734748']}, {'input': '20 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1\\r\\n144831196 28660251 62050800 52660762 23189000 12771861 73096012 25119113 119648684 16011144 51600638 74708999 6312006 26945863 68746869 58112898 5070 19157938 74351320 60263898\\r\\n', 'output': ['132556548\\r\\n711988928\\r\\n6999755\\r\\n208709864\\r\\n320161276\\r\\n865416376\\r\\n320896979\\r\\n458941660\\r\\n671806481\\r\\n158009043\\r\\n351362956\\r\\n78248147\\r\\n927871852\\r\\n882014191\\r\\n988190329\\r\\n830735503\\r\\n1958329\\r\\n787106839\\r\\n942059547\\r\\n341315444']}, {'input': '20 30\\r\\n0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\\r\\n34095514 37349809 60555988 40280455 19504485 77297461 41415742 66290058 20631093 185280391 7151718 64927972 15611855 4317891 24600598 24588269 60808977 9108470 13217752 191209824\\r\\n', 'output': ['313283482\\r\\n21804622\\r\\n682197550\\r\\n361027027\\r\\n756362680\\r\\n151917509\\r\\n716108102\\r\\n131732975\\r\\n237068086\\r\\n731869119\\r\\n190595295\\r\\n847684643\\r\\n847454143\\r\\n501579235\\r\\n129856516\\r\\n246699402\\r\\n205385635\\r\\n639100445\\r\\n614421017\\r\\n227076269']}, {'input': '20 30\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0\\r\\n9380933 34450681 12329733 7732927 73910078 16165679 149467043 56914401 21809098 36934833 71019254 168559440 12033996 40465391 7156881 3312348 37150678 130625432 42709585 66115911\\r\\n', 'output': ['813231583\\r\\n458087744\\r\\n445793615\\r\\n651101155\\r\\n484645642\\r\\n506668954\\r\\n896602699\\r\\n556862659\\r\\n145127201\\r\\n302005399\\r\\n558418033\\r\\n213871822\\r\\n57299634\\r\\n564466143\\r\\n767349204\\r\\n290138481\\r\\n12657688\\r\\n925337836\\r\\n827843024\\r\\n119362169']}, {'input': '20 30\\r\\n0 0 1 0 1 0 1 1 1 0 1 1 0 0 1 0 0 1 0 1\\r\\n66166717 200301718 6725634 95379617 42880832 48874211 64912554 36809296 13248978 58406666 53142218 45080678 19902257 58554006 23570140 14484661 7589423 78746789 11072716 52395211\\r\\n', 'output': ['823107880\\r\\n742699237\\r\\n987770596\\r\\n549924308\\r\\n730188349\\r\\n913535291\\r\\n936423447\\r\\n122869154\\r\\n581668441\\r\\n749452306\\r\\n615454312\\r\\n176148736\\r\\n874336841\\r\\n897418997\\r\\n235568492\\r\\n24727530\\r\\n143875067\\r\\n15270097\\r\\n200154604\\r\\n356406452']}, {'input': '20 30\\r\\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661\\r\\n', 'output': ['76898501\\r\\n989279651\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501\\r\\n76898501']}, {'input': '20 30\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\r\\n5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803\\r\\n', 'output': ['504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981\\r\\n504888981']}, {'input': '2000 300\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1...', 'output': ['527557309\\r\\n527557309\\r\\n762900831\\r\\n527557309\\r\\n819771096\\r\\n527557309\\r\\n762900831\\r\\n527557309\\r\\n527557309\\r\\n527557309\\r\\n527557309\\r\\n762900831\\r\\n762900831\\r\\n762900831\\r\\n292213787\\r\\n762900831\\r\\n527557309\\r\\n292213787\\r\\n762900831\\r\\n292213787\\r\\n527557309\\r\\n762900831\\r\\n292213787\\r\\n527557309\\r\\n527557309\\r\\n527557309\\r\\n527557309\\r\\n762900831\\r\\n527557309\\r\\n819771096\\r\\n527557309\\r\\n527557309\\r\\n762900831\\r\\n292213787\\r\\n762900831\\r\\n527557309\\r\\n527557309\\r\\n527557309\\r\\n527557309\\r\\n762900831\\r\\n762900831\\r\\n527557309\\r\\n762900831\\r\\n527557309\\r\\n762900831\\r\\n527557309\\r\\n76290...', '126026410\\r\\n26532090\\r\\n89545496\\r\\n348227668\\r\\n407921745\\r\\n822476105\\r\\n815841057\\r\\n129343473\\r\\n683184486\\r\\n182403525\\r\\n971714643\\r\\n669922973\\r\\n195669656\\r\\n643389211\\r\\n596958847\\r\\n991612114\\r\\n26531426\\r\\n494147799\\r\\n587007825\\r\\n646703323\\r\\n192353616\\r\\n198987665\\r\\n116075186\\r\\n208935334\\r\\n451035127\\r\\n991612774\\r\\n630129722\\r\\n673238446\\r\\n965081504\\r\\n404604334\\r\\n762781111\\r\\n945182265\\r\\n613540647\\r\\n855640163\\r\\n540577710\\r\\n739563385\\r\\n185720640\\r\\n13265829\\r\\n460984258\\r\\n182404969\\r\\n988297561\\r\\n726301539\\r\\n301795019\\r\\n46434122\\r\\n882170987\\r\\n533948601\\r\\n729615799\\r...', '257947573\\r\\n350833899\\r\\n998147431\\r\\n282054341\\r\\n689337877\\r\\n802790225\\r\\n636332064\\r\\n611526839\\r\\n405886622\\r\\n295781176\\r\\n577883978\\r\\n211877869\\r\\n476761551\\r\\n471920813\\r\\n313000296\\r\\n8886097\\r\\n165109708\\r\\n231143899\\r\\n91489412\\r\\n972042214\\r\\n584771626\\r\\n771892731\\r\\n841370746\\r\\n736106038\\r\\n702414716\\r\\n368751476\\r\\n510452873\\r\\n253155296\\r\\n619859862\\r\\n14376831\\r\\n37833603\\r\\n94933236\\r\\n485696109\\r\\n96233228\\r\\n33691322\\r\\n403791251\\r\\n233190809\\r\\n447164049\\r\\n173248887\\r\\n549683390\\r\\n863382143\\r\\n717538465\\r\\n704413165\\r\\n210480955\\r\\n414122723\\r\\n922528686\\r\\n131321464\\r\\n40...', '723727157\\r\\n723727157\\r\\n898419922\\r\\n449209961\\r\\n898419922\\r\\n174692765\\r\\n723727157\\r\\n723727157\\r\\n723727157\\r\\n449209961\\r\\n449209961\\r\\n174692765\\r\\n723727157\\r\\n174692765\\r\\n723727157\\r\\n723727157\\r\\n623902726\\r\\n723727157\\r\\n723727157\\r\\n449209961\\r\\n723727157\\r\\n449209961\\r\\n449209961\\r\\n174692765\\r\\n723727157\\r\\n449209961\\r\\n349385530\\r\\n449209961\\r\\n449209961\\r\\n449209961\\r\\n449209961\\r\\n723727157\\r\\n449209961\\r\\n449209961\\r\\n449209961\\r\\n623902726\\r\\n449209961\\r\\n449209961\\r\\n898419922\\r\\n898419922\\r\\n723727157\\r\\n449209961\\r\\n723727157\\r\\n723727157\\r\\n723727157\\r\\n174692765\\r\\n17469...', '449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n449543865\\r\\n44954...', '228892698\\r\\n323233274\\r\\n31331450\\r\\n583630535\\r\\n530020844\\r\\n200867506\\r\\n762566026\\r\\n461091654\\r\\n900597519\\r\\n687197433\\r\\n232025843\\r\\n294169404\\r\\n557699810\\r\\n988325579\\r\\n966739790\\r\\n633933968\\r\\n156657250\\r\\n762046687\\r\\n338898999\\r\\n134379009\\r\\n458304735\\r\\n975792999\\r\\n343970609\\r\\n589896825\\r\\n188161813\\r\\n733675269\\r\\n708610109\\r\\n303222613\\r\\n919742615\\r\\n718701996\\r\\n235158988\\r\\n5746951\\r\\n831841442\\r\\n194601216\\r\\n389029319\\r\\n946729129\\r\\n65449819\\r\\n768486090\\r\\n213226973\\r\\n847160941\\r\\n853773457\\r\\n913476325\\r\\n847334054\\r\\n435334042\\r\\n997551901\\r\\n781018670\\r\\n847334054...', '280562572\\r\\n27981324\\r\\n930424996\\r\\n580126064\\r\\n653672085\\r\\n638998124\\r\\n192370181\\r\\n304975360\\r\\n268606553\\r\\n887998181\\r\\n902057157\\r\\n419880164\\r\\n965999027\\r\\n37849969\\r\\n655704617\\r\\n915939588\\r\\n290316653\\r\\n133632797\\r\\n916310849\\r\\n291352554\\r\\n315435621\\r\\n753760137\\r\\n617080324\\r\\n863678858\\r\\n719694519\\r\\n658038314\\r\\n750307459\\r\\n915589744\\r\\n530437886\\r\\n512060713\\r\\n157922588\\r\\n178644172\\r\\n5715303\\r\\n194942404\\r\\n852097346\\r\\n696406228\\r\\n891303846\\r\\n489183600\\r\\n892182349\\r\\n437838373\\r\\n390449491\\r\\n931412865\\r\\n520118475\\r\\n724052962\\r\\n624309238\\r\\n315358057\\r\\n157108994...']}, {'input': '2000 300\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...', 'output': ['510770111\\r\\n586552453\\r\\n521518610\\r\\n729496815\\r\\n925336870\\r\\n218501419\\r\\n210003823\\r\\n721775463\\r\\n410294316\\r\\n59753754\\r\\n445916833\\r\\n149785626\\r\\n397166471\\r\\n850878761\\r\\n322612228\\r\\n400512598\\r\\n962933991\\r\\n238352988\\r\\n481795882\\r\\n312429269\\r\\n230724223\\r\\n668360989\\r\\n538774766\\r\\n7521020\\r\\n782227455\\r\\n932947153\\r\\n766620629\\r\\n621895347\\r\\n948462500\\r\\n49828435\\r\\n465611859\\r\\n508795684\\r\\n965408363\\r\\n876217222\\r\\n27461852\\r\\n849541586\\r\\n889517699\\r\\n887546242\\r\\n347913548\\r\\n274305965\\r\\n434804057\\r\\n916014055\\r\\n822187302\\r\\n339400794\\r\\n604867800\\r\\n368133826\\r\\n799958426\\r...', '738045334\\r\\n159282105\\r\\n578763229\\r\\n578763229\\r\\n477846315\\r\\n578763229\\r\\n159282105\\r\\n159282105\\r\\n159282105\\r\\n738045334\\r\\n159282105\\r\\n159282105\\r\\n738045334\\r\\n159282105\\r\\n738045334\\r\\n159282105\\r\\n578763229\\r\\n738045334\\r\\n578763229\\r\\n159282105\\r\\n159282105\\r\\n738045334\\r\\n578763229\\r\\n578763229\\r\\n578763229\\r\\n159282105\\r\\n578763229\\r\\n318564210\\r\\n578763229\\r\\n578763229\\r\\n159282105\\r\\n578763229\\r\\n159282105\\r\\n159282105\\r\\n159282105\\r\\n578763229\\r\\n159282105\\r\\n738045334\\r\\n578763229\\r\\n159282105\\r\\n159282105\\r\\n578763229\\r\\n738045334\\r\\n159282105\\r\\n738045334\\r\\n318564210\\r\\n73804...', '536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n536539890\\r\\n53653...', '544865927\\r\\n362689553\\r\\n554047941\\r\\n662901553\\r\\n528631083\\r\\n623245685\\r\\n408599623\\r\\n383515404\\r\\n454842332\\r\\n96411147\\r\\n49835799\\r\\n979215047\\r\\n123957189\\r\\n241194187\\r\\n232012173\\r\\n930510515\\r\\n682596137\\r\\n940690446\\r\\n985602599\\r\\n592905181\\r\\n837226469\\r\\n463026429\\r\\n366947921\\r\\n259890854\\r\\n259558215\\r\\n423037922\\r\\n336940056\\r\\n739152127\\r\\n906091574\\r\\n273663875\\r\\n103463977\\r\\n218239152\\r\\n323832313\\r\\n988397061\\r\\n861312771\\r\\n369742383\\r\\n261687399\\r\\n997579075\\r\\n494364850\\r\\n668490477\\r\\n306599552\\r\\n268740229\\r\\n776878100\\r\\n482521724\\r\\n140192033\\r\\n252172746\\r\\n5279658...', '156061854\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n52020618\\r\\n52020618\\r\\n52020618\\r\\n104041236\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n156061854\\r\\n104041236\\r\\n104041236\\r\\n104041236\\r\\n104041236\\r\\n104041236\\r\\n208082472\\r\\n208082472\\r\\n104041236\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n156061854\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n52020618\\r\\n52020618\\r\\n156061854\\r\\n156061854\\r\\n104041236\\r\\n52020618\\r\\n52020618\\r\\n156061854\\r\\n104041236\\r\\n52020618\\r\\n104041236\\r\\n104041236\\r\\n104041236\\r\\n156061854\\r\\n52020618\\r...', '696015721\\r\\n931773777\\r\\n559486112\\r\\n847360916\\r\\n520999237\\r\\n330674091\\r\\n901387332\\r\\n817005789\\r\\n311776972\\r\\n19589756\\r\\n894472615\\r\\n644360731\\r\\n540588993\\r\\n761762342\\r\\n387103251\\r\\n712279217\\r\\n24626123\\r\\n870308250\\r\\n487286532\\r\\n403104550\\r\\n728773592\\r\\n564260282\\r\\n775161336\\r\\n604919022\\r\\n382066884\\r\\n133895986\\r\\n14584707\\r\\n323728056\\r\\n371794589\\r\\n189832070\\r\\n664212684\\r\\n375120849\\r\\n841631912\\r\\n277833388\\r\\n899970740\\r\\n674023221\\r\\n550168651\\r\\n205864687\\r\\n292155898\\r\\n484652909\\r\\n899246785\\r\\n641496229\\r\\n604195067\\r\\n520275282\\r\\n140579824\\r\\n200828320\\r\\n88943624...', '381761597\\r\\n749914123\\r\\n734966985\\r\\n451112838\\r\\n254375974\\r\\n408043495\\r\\n50147455\\r\\n317426730\\r\\n691474180\\r\\n297424671\\r\\n16576556\\r\\n950550287\\r\\n615062290\\r\\n508772409\\r\\n574097914\\r\\n755479957\\r\\n504073337\\r\\n232598914\\r\\n376960541\\r\\n704800943\\r\\n722703963\\r\\n943084953\\r\\n852281936\\r\\n604167024\\r\\n430991955\\r\\n691776511\\r\\n979477939\\r\\n916779041\\r\\n928976757\\r\\n9004809\\r\\n66623088\\r\\n160364271\\r\\n569831785\\r\\n753768578\\r\\n10158931\\r\\n829943628\\r\\n860984852\\r\\n599688760\\r\\n746963293\\r\\n90503616\\r\\n665117495\\r\\n843614199\\r\\n773004798\\r\\n52464119\\r\\n40225734\\r\\n193061049\\r\\n476979003\\r\\n451...']}, {'input': '2000 300\\r\\n1 1 1 0 0 1 1 0 0 1 0 1 1 0 0 1 0 0 0 1 1 1 1 1 0 0 0 0 0 1 0 1 1 1 1 1 1 1 0 1 0 1 1 0 0 0 1 0 0 0 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 1 1 0 0 0 0 1 1 0 0 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 0 1 0 1 0 0 0 0 1 0 1 0 1 1 1 1 0 0 0 1 1 0 1 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1 0 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 0 0 0 1 1 0 1 0 0 0 0 0 1 1 1 0 1 1 1 0 0 1 1 1 0 0 1 0 0 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 0 1 1 0 1 1 1 0 0 0 0 1 0 0 0 0 1 0...', 'output': ['520991218\\r\\n260495609\\r\\n781486827\\r\\n281527765\\r\\n460706912\\r\\n260495609\\r\\n43738083\\r\\n819065206\\r\\n639886059\\r\\n260495609\\r\\n639886059\\r\\n520991218\\r\\n520991218\\r\\n639886059\\r\\n819065206\\r\\n520991218\\r\\n639886059\\r\\n819065206\\r\\n639886059\\r\\n43738083\\r\\n781486827\\r\\n260495609\\r\\n520991218\\r\\n781486827\\r\\n819065206\\r\\n639886059\\r\\n281527765\\r\\n819065206\\r\\n460706912\\r\\n260495609\\r\\n639886059\\r\\n260495609\\r\\n304233692\\r\\n781486827\\r\\n260495609\\r\\n260495609\\r\\n43738083\\r\\n260495609\\r\\n639886059\\r\\n260495609\\r\\n819065206\\r\\n520991218\\r\\n520991218\\r\\n639886059\\r\\n639886059\\r\\n460706912\\r\\n26049560...']}, {'input': '2000 300\\r\\n1 1 1 0 0 0 1 0 1 1 1 0 1 0 0 1 1 1 1 0 0 1 0 1 0 1 0 0 1 0 0 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 1 1 1 1 1 0 1 0 1 0 0 0 1 1 0 0 1 0 1 0 0 1 0 1 0 1 0 1 1 0 0 0 0 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 1 0 1 0 1 1 0 0 0 1 0 1 1 0 1 1 0 0 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 1 0 0 1 1 0 0 1 1 1 1 0 0 1 0 1 0 1 0 1 0 1 0 0 0 0 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1...', 'output': ['967309723\\r\\n488979754\\r\\n894231131\\r\\n227079250\\r\\n800673042\\r\\n803173636\\r\\n302660701\\r\\n49359452\\r\\n361182334\\r\\n613837368\\r\\n903714465\\r\\n783149148\\r\\n772569418\\r\\n153771444\\r\\n347053203\\r\\n383800081\\r\\n305903959\\r\\n591371347\\r\\n504143617\\r\\n554819601\\r\\n711091639\\r\\n993123371\\r\\n662636534\\r\\n799549517\\r\\n755795853\\r\\n257472564\\r\\n749178682\\r\\n44165553\\r\\n754769201\\r\\n677121173\\r\\n77251408\\r\\n825363165\\r\\n94378162\\r\\n905743915\\r\\n555723948\\r\\n401067893\\r\\n365827394\\r\\n778249947\\r\\n641361749\\r\\n657808321\\r\\n76885722\\r\\n205390090\\r\\n357248290\\r\\n762413024\\r\\n471855369\\r\\n953559875\\r\\n452364595\\r...']}, {'input': '2000 300\\r\\n1 1 0 1 0 0 0 0 0 0 1 0 0 1 0 0 1 1 1 1 0 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 1 1 1 1 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 0 1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 1 1 1 1 0 1 0 0 0 1 0 1 0 1 1 1 1 1 0 0 1 1 1 1 1 1 0 0 1 0 0 1 0 0 1 1 1 1 1 0 0 1 1 1 0 0 1 1 1 0 0 0 0 1 1 1 1 1 1 0 1 1 0 1 1 1 0 1 1 1 0 0 0 0 1 1 1 1 0 1 0 0 1 0 0 1 1 0 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 1 0 1 1 1 0 1 0 0 0 1 0 0 1 0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 1 0 0 1 0 1 1 1 0 1 0 1 0 0 0 1 1 0 1...', 'output': ['353668818\\r\\n180952778\\r\\n350267066\\r\\n85276305\\r\\n498935339\\r\\n570367769\\r\\n947922902\\r\\n520199571\\r\\n977020824\\r\\n311854081\\r\\n369942273\\r\\n709342799\\r\\n241020253\\r\\n306637091\\r\\n574362410\\r\\n924893301\\r\\n259050261\\r\\n881412462\\r\\n505397126\\r\\n426307000\\r\\n368001455\\r\\n187561592\\r\\n507502858\\r\\n422600821\\r\\n840032307\\r\\n570586935\\r\\n847077944\\r\\n633577890\\r\\n21924242\\r\\n429617104\\r\\n40169532\\r\\n200231692\\r\\n301247265\\r\\n526536756\\r\\n236599712\\r\\n449404280\\r\\n482154139\\r\\n74891321\\r\\n744845075\\r\\n202529472\\r\\n497487224\\r\\n750227627\\r\\n791509388\\r\\n365064757\\r\\n435991351\\r\\n911452637\\r\\n230155510...']}, {'input': '200000 3000\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n830309264\\r\\n83030...', '746090912\\r\\n987874942\\r\\n493937471\\r\\n493937471\\r\\n241784030\\r\\n493937471\\r\\n746090912\\r\\n241784030\\r\\n746090912\\r\\n987874942\\r\\n493937471\\r\\n241784030\\r\\n493937471\\r\\n493937471\\r\\n987874942\\r\\n493937471\\r\\n987874942\\r\\n746090912\\r\\n746090912\\r\\n493937471\\r\\n746090912\\r\\n493937471\\r\\n493937471\\r\\n483568060\\r\\n493937471\\r\\n746090912\\r\\n746090912\\r\\n241784030\\r\\n746090912\\r\\n746090912\\r\\n987874942\\r\\n493937471\\r\\n746090912\\r\\n493937471\\r\\n746090912\\r\\n746090912\\r\\n746090912\\r\\n493937471\\r\\n746090912\\r\\n746090912\\r\\n746090912\\r\\n241784030\\r\\n493937471\\r\\n746090912\\r\\n241784030\\r\\n493937471\\r\\n49393...', '249477932\\r\\n163324885\\r\\n619370540\\r\\n591761649\\r\\n381202278\\r\\n400495236\\r\\n181619933\\r\\n483987183\\r\\n768059384\\r\\n853879792\\r\\n648642618\\r\\n525566838\\r\\n955999425\\r\\n754753895\\r\\n409143808\\r\\n470016419\\r\\n322658124\\r\\n100123809\\r\\n150684670\\r\\n101454359\\r\\n634006577\\r\\n229187060\\r\\n466357410\\r\\n35592186\\r\\n769389935\\r\\n547853534\\r\\n85820409\\r\\n289061762\\r\\n201245531\\r\\n244821008\\r\\n910095485\\r\\n40581744\\r\\n910760760\\r\\n733797749\\r\\n450390828\\r\\n440079067\\r\\n811634863\\r\\n573799237\\r\\n619703176\\r\\n460037301\\r\\n90144696\\r\\n512261348\\r\\n656958547\\r\\n636002401\\r\\n271099351\\r\\n573799237\\r\\n748766427...', '337242164\\r\\n175981139\\r\\n705993748\\r\\n951319188\\r\\n208728534\\r\\n926966446\\r\\n894219051\\r\\n142402527\\r\\n394342301\\r\\n747271382\\r\\n832167014\\r\\n925728471\\r\\n915824671\\r\\n371227534\\r\\n265828671\\r\\n404110515\\r\\n737503168\\r\\n526705442\\r\\n275596885\\r\\n225789012\\r\\n140757794\\r\\n548311062\\r\\n834642964\\r\\n960680644\\r\\n982693022\\r\\n298440480\\r\\n97139796\\r\\n357880981\\r\\n649164783\\r\\n74025029\\r\\n270644985\\r\\n37970467\\r\\n945129313\\r\\n422137796\\r\\n739979118\\r\\n389390401\\r\\n815106536\\r\\n311922619\\r\\n858860120\\r\\n411267193\\r\\n976503147\\r\\n835880939\\r\\n13346553\\r\\n661137775\\r\\n978979097\\r\\n527943417\\r\\n707231723...', '895547075\\r\\n50488475\\r\\n972784199\\r\\n737802803\\r\\n134349212\\r\\n579628449\\r\\n120501272\\r\\n588315405\\r\\n599840552\\r\\n714837825\\r\\n262849659\\r\\n448375127\\r\\n596572279\\r\\n172710075\\r\\n108458976\\r\\n317466571\\r\\n845058600\\r\\n348860806\\r\\n506174996\\r\\n501269960\\r\\n76979425\\r\\n561049607\\r\\n754144168\\r\\n500496863\\r\\n56852638\\r\\n736253107\\r\\n323142953\\r\\n631062404\\r\\n987492303\\r\\n864152840\\r\\n155163780\\r\\n16686131\\r\\n341291713\\r\\n213479047\\r\\n623578627\\r\\n815212310\\r\\n74571316\\r\\n580316230\\r\\n11782846\\r\\n9977202\\r\\n56164857\\r\\n453363728\\r\\n283577160\\r\\n112674480\\r\\n770828548\\r\\n441236116\\r\\n475210843\\r\\n997...', '743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n743696736\\r\\n74369...', '743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n743692044\\r\\n74369...', '34499784\\r\\n374247743\\r\\n362747815\\r\\n297560637\\r\\n574121750\\r\\n869682055\\r\\n449997441\\r\\n458622387\\r\\n930182193\\r\\n940681955\\r\\n376622642\\r\\n28249737\\r\\n622933686\\r\\n969931858\\r\\n400622664\\r\\n671871138\\r\\n811807848\\r\\n331623096\\r\\n223311188\\r\\n305748258\\r\\n203623639\\r\\n439935004\\r\\n185436339\\r\\n481622243\\r\\n517559518\\r\\n585621678\\r\\n66124586\\r\\n679996001\\r\\n894244918\\r\\n45999712\\r\\n243436062\\r\\n887057463\\r\\n525184298\\r\\n990056732\\r\\n154311620\\r\\n198873841\\r\\n227623661\\r\\n430809975\\r\\n12937419\\r\\n194561368\\r\\n140374035\\r\\n610059025\\r\\n715495951\\r\\n677058261\\r\\n731308352\\r\\n710120554\\r\\n143749100\\r...', '743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n743697003\\r\\n74369...', '563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n563659040\\r\\n56365...', '948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n948860384\\r\\n94886...', '616415891\\r\\n743692045\\r\\n743692045\\r\\n616415891\\r\\n489139737\\r\\n743692045\\r\\n743692045\\r\\n870968199\\r\\n743692045\\r\\n870968199\\r\\n616415891\\r\\n743692045\\r\\n616415891\\r\\n743692045\\r\\n743692045\\r\\n743692045\\r\\n743692045\\r\\n870968199\\r\\n743692045\\r\\n489139737\\r\\n870968199\\r\\n870968199\\r\\n743692045\\r\\n743692045\\r\\n870968199\\r\\n743692045\\r\\n616415891\\r\\n743692045\\r\\n743692045\\r\\n743692045\\r\\n361863583\\r\\n743692045\\r\\n743692045\\r\\n870968199\\r\\n743692045\\r\\n743692045\\r\\n870968199\\r\\n870968199\\r\\n616415891\\r\\n870968199\\r\\n743692045\\r\\n743692045\\r\\n107311275\\r\\n743692045\\r\\n870968199\\r\\n870968199\\r\\n87096...']}, {'input': '200000 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...', 'output': ['534464893\\r\\n70685433\\r\\n141370866\\r\\n605150326\\r\\n534464893\\r\\n70685433\\r\\n534464893\\r\\n70685433\\r\\n605150326\\r\\n605150326\\r\\n70685433\\r\\n70685433\\r\\n70685433\\r\\n534464893\\r\\n70685433\\r\\n141370866\\r\\n70685433\\r\\n534464893\\r\\n141370866\\r\\n70685433\\r\\n70685433\\r\\n70685433\\r\\n70685433\\r\\n70685433\\r\\n70685433\\r\\n534464893\\r\\n70685433\\r\\n534464893\\r\\n534464893\\r\\n70685433\\r\\n534464893\\r\\n534464893\\r\\n70685433\\r\\n70685433\\r\\n70685433\\r\\n534464893\\r\\n70685433\\r\\n534464893\\r\\n70685433\\r\\n534464893\\r\\n70685433\\r\\n70685433\\r\\n534464893\\r\\n70685433\\r\\n70685433\\r\\n605150326\\r\\n70685433\\r\\n70685433\\r\\n70685433\\r\\n...', '434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n434349889\\r\\n43434...', '479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n479343004\\r\\n47934...', '983882738\\r\\n723119688\\r\\n459823065\\r\\n556901314\\r\\n70724963\\r\\n266615302\\r\\n669551615\\r\\n128160584\\r\\n374823721\\r\\n636048406\\r\\n410086236\\r\\n880577836\\r\\n119251355\\r\\n80183061\\r\\n594759171\\r\\n13376576\\r\\n422252375\\r\\n548479185\\r\\n235532967\\r\\n555429175\\r\\n697576973\\r\\n194705367\\r\\n244991065\\r\\n696417466\\r\\n575930209\\r\\n911572937\\r\\n690252582\\r\\n173917166\\r\\n286156762\\r\\n203240195\\r\\n371392343\\r\\n232850391\\r\\n10955702\\r\\n65159878\\r\\n81942367\\r\\n928468125\\r\\n286592932\\r\\n499727395\\r\\n803102816\\r\\n81855133\\r\\n235158566\\r\\n824901521\\r\\n295851097\\r\\n716980269\\r\\n913157775\\r\\n996485047\\r\\n807919099\\r\\n4...', '535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n535630737\\r\\n53563...', '483259721\\r\\n483259721\\r\\n451534810\\r\\n740752037\\r\\n483259721\\r\\n483259721\\r\\n709027126\\r\\n483259721\\r\\n966519442\\r\\n740752037\\r\\n483259721\\r\\n483259721\\r\\n483259721\\r\\n483259721\\r\\n740752037\\r\\n225767405\\r\\n483259721\\r\\n740752037\\r\\n483259721\\r\\n451534810\\r\\n483259721\\r\\n740752037\\r\\n483259721\\r\\n483259721\\r\\n483259721\\r\\n740752037\\r\\n483259721\\r\\n966519442\\r\\n225767405\\r\\n740752037\\r\\n483259721\\r\\n740752037\\r\\n483259721\\r\\n740752037\\r\\n740752037\\r\\n483259721\\r\\n740752037\\r\\n483259721\\r\\n483259721\\r\\n483259721\\r\\n483259721\\r\\n225767405\\r\\n740752037\\r\\n483259721\\r\\n225767405\\r\\n740752037\\r\\n74075...', '365182673\\r\\n453133330\\r\\n646237559\\r\\n383557795\\r\\n419033749\\r\\n340436101\\r\\n116418016\\r\\n678527788\\r\\n945667567\\r\\n79030627\\r\\n870994872\\r\\n815130278\\r\\n370916978\\r\\n677151415\\r\\n467150520\\r\\n882361399\\r\\n890542201\\r\\n249936864\\r\\n39196741\\r\\n947579002\\r\\n636680384\\r\\n295607138\\r\\n675342063\\r\\n808325849\\r\\n29104504\\r\\n25918779\\r\\n103037971\\r\\n291784268\\r\\n445589673\\r\\n215200138\\r\\n658241231\\r\\n704446567\\r\\n478414964\\r\\n374535682\\r\\n193639291\\r\\n871632017\\r\\n186732779\\r\\n291784268\\r\\n138616008\\r\\n491795009\\r\\n475331322\\r\\n689894315\\r\\n243667497\\r\\n853256895\\r\\n714003742\\r\\n774124185\\r\\n363271238...', '985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n985422205\\r\\n98542...', '155925765\\r\\n487818429\\r\\n547205425\\r\\n780737503\\r\\n891037610\\r\\n578930143\\r\\n825301017\\r\\n138861660\\r\\n552655747\\r\\n896394864\\r\\n881431780\\r\\n167493014\\r\\n480546290\\r\\n147428613\\r\\n697960072\\r\\n762448385\\r\\n870903408\\r\\n251332589\\r\\n614973238\\r\\n898519152\\r\\n581333635\\r\\n223833180\\r\\n271513325\\r\\n829479792\\r\\n130457576\\r\\n488950374\\r\\n631091534\\r\\n259853008\\r\\n403102846\\r\\n643511524\\r\\n491144463\\r\\n683066789\\r\\n279987210\\r\\n916459265\\r\\n497517327\\r\\n461078693\\r\\n513286618\\r\\n11055375\\r\\n943036132\\r\\n453946156\\r\\n770116063\\r\\n285321197\\r\\n954649915\\r\\n686299755\\r\\n305432132\\r\\n314991428\\r\\n917591...', '979248391\\r\\n467909552\\r\\n175190733\\r\\n498757573\\r\\n436634896\\r\\n282945489\\r\\n831422982\\r\\n525572199\\r\\n608769567\\r\\n291190788\\r\\n623553625\\r\\n907228321\\r\\n19120025\\r\\n908756352\\r\\n635157558\\r\\n367120190\\r\\n895500325\\r\\n121864053\\r\\n271093430\\r\\n805461626\\r\\n799170993\\r\\n621048261\\r\\n209948086\\r\\n214834751\\r\\n291190788\\r\\n88084033\\r\\n941559039\\r\\n256433435\\r\\n462472189\\r\\n261870798\\r\\n718354926\\r\\n62673375\\r\\n599120300\\r\\n207566785\\r\\n71042737\\r\\n669914911\\r\\n844128311\\r\\n594233635\\r\\n758976277\\r\\n186492094\\r\\n238841441\\r\\n949377703\\r\\n280013490\\r\\n621474896\\r\\n309333480\\r\\n356245464\\r\\n817740320...']}, {'input': '200000 3000\\r\\n0 1 1 1 1 1 0 1 1 1 1 0 0 0 1 1 1 0 1 0 0 1 1 1 1 1 0 1 0 1 1 0 0 0 1 1 1 1 0 1 1 0 0 1 0 0 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 1 1 1 0 0 1 0 1 0 0 1 0 1 0 1 1 0 0 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 0 1 1 1 0 0 1 0 0 1 0 0 0 1 1 1 0 0 1 1 1 0 0 0 1 0 0 1 0 0 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 0 1 1 1 1 1 1 0 1 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 0 1 0 1 1 1 0 0 0 1 1 0 1 1 1 0 0 1 1 1 1 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0 1 0 1 1 0 1 0 0 1 0 0 0 1 1 0 1 0 0 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 ...', 'output': ['684128648\\r\\n534537704\\r\\n70831055\\r\\n605368759\\r\\n605368759\\r\\n534537704\\r\\n55897238\\r\\n70831055\\r\\n534537704\\r\\n534537704\\r\\n605368759\\r\\n684128648\\r\\n55897238\\r\\n740025886\\r\\n534537704\\r\\n70831055\\r\\n70831055\\r\\n684128648\\r\\n70831055\\r\\n684128648\\r\\n425910181\\r\\n70831055\\r\\n605368759\\r\\n534537704\\r\\n534537704\\r\\n605368759\\r\\n684128648\\r\\n70831055\\r\\n684128648\\r\\n605368759\\r\\n70831055\\r\\n370012943\\r\\n370012943\\r\\n370012943\\r\\n605368759\\r\\n70831055\\r\\n534537704\\r\\n70831055\\r\\n370012943\\r\\n141662110\\r\\n534537704\\r\\n370012943\\r\\n370012943\\r\\n70831055\\r\\n684128648\\r\\n370012943\\r\\n684128648\\r\\n5345377...']}, {'input': '200000 3000\\r\\n1 1 0 1 1 1 1 1 1 1 0 0 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 1 1 0 1 1 0 1 1 0 1 1 1 0 0 0 0 1 0 0 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 1 0 0 0 0 1 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 1 1 0 1 0 1 1 0 0 1 1 0 0 1 0 1 0 1 1 0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 1 0 0 1 1 1 1 1 0 1 0 0 1 1 0 1 0 1 1 0 0 1 1 1 0 1 0 1 0 1 0 1 0 0 0 1 0 1 1 0 1 0 1 1 1 0 1 1 0 0 1 0 1 1 0 0 0 1 1 1 1 0 1 1 1 0 0 0 1 0 1 0 0 1 0 0 1 0 0 1 1 1 0 1 1 1 0 1 1 0 1 1 0 0 1 0 1 0 0 0 1 1 0 1 0 0 0 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 1 ...', 'output': ['331265679\\r\\n248932636\\r\\n609274319\\r\\n474255977\\r\\n102055814\\r\\n485644908\\r\\n626044190\\r\\n431097835\\r\\n319780031\\r\\n47044666\\r\\n687413158\\r\\n404806427\\r\\n125126455\\r\\n282606731\\r\\n307585492\\r\\n584577913\\r\\n604465119\\r\\n366599088\\r\\n490459582\\r\\n11853006\\r\\n753101524\\r\\n749114305\\r\\n816668970\\r\\n25465595\\r\\n942396724\\r\\n387086401\\r\\n558715961\\r\\n470999022\\r\\n908318742\\r\\n535377307\\r\\n712631115\\r\\n501708418\\r\\n465458062\\r\\n906281962\\r\\n309027298\\r\\n466289495\\r\\n88346508\\r\\n21689911\\r\\n46580591\\r\\n650678352\\r\\n435081076\\r\\n202663995\\r\\n554027989\\r\\n280201535\\r\\n865380747\\r\\n516485969\\r\\n226759102\\r\\n...']}, {'input': '200000 3000\\r\\n0 0 1 1 1 0 0 0 1 1 0 0 1 0 0 1 1 0 0 0 0 1 0 0 1 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 1 0 0 0 0 1 0 0 1 0 1 0 0 0 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 0 0 0 1 0 0 0 0 1 0 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 1 1 1 0 0 1 1 0 1 0 0 1 0 1 0 1 0 1 1 0 0 0 0 0 0 1 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 1 0 1 1 0 1 0 1 0 0 1 1 0 1 0 0 0 1 0 1 1 1 0 1 1 1 0 1 0 1 1 1 1 0 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 0 1 0 0 0 1 0 1 0 1 ...', 'output': ['702758762\\r\\n222668721\\r\\n663197048\\r\\n675792950\\r\\n759259581\\r\\n332486741\\r\\n171127920\\r\\n414458191\\r\\n349087590\\r\\n847918503\\r\\n522872021\\r\\n540727038\\r\\n813504457\\r\\n278812310\\r\\n949679696\\r\\n784095578\\r\\n918470307\\r\\n482110597\\r\\n535952792\\r\\n109088580\\r\\n967478176\\r\\n268019403\\r\\n523209396\\r\\n80286422\\r\\n566422901\\r\\n182974112\\r\\n166764579\\r\\n716767192\\r\\n203579125\\r\\n975507557\\r\\n770975186\\r\\n884777286\\r\\n433828625\\r\\n891459014\\r\\n519109900\\r\\n907459392\\r\\n591988953\\r\\n479131884\\r\\n989822907\\r\\n846824242\\r\\n304414023\\r\\n13755521\\r\\n6710438\\r\\n355497544\\r\\n718926904\\r\\n912736930\\r\\n173287893...']}, {'input': '10 3000\\r\\n1 1 1 1 1 0 0 0 1 1\\r\\n6 22 5 2 4 15 4 7 31 4\\r\\n', 'output': ['561258918\\r\\n61460660\\r\\n467715765\\r\\n187086306\\r\\n374172612\\r\\n538110090\\r\\n143496024\\r\\n251118042\\r\\n903349037\\r\\n374172612']}, {'input': '100 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\r\\n10 8 1 9 7 5 12 9 15 7 16 5 17 5 17 21 11 3 4 4 30 17 3 84 12 30 2 8 2 2 22 24 15 11 15 13 7 17 1 12 8 4 3 6 5 15 1 3 4 2 27 3 11 11 3 3 3 5 14 2 5 13 6 2 6 5 6 19 3 16 4 12 11 2 2 3 25 14 6 11 22 4 10 32 9 19 14 2 2 3 4 3 2 5 18 14 2 7 3 8\\r\\n', 'output': ['23677346\\r\\n418239618\\r\\n800963217\\r\\n220958482\\r\\n615520754\\r\\n11838673\\r\\n627359427\\r\\n220958482\\r\\n35516019\\r\\n615520754\\r\\n836479236\\r\\n11838673\\r\\n639198100\\r\\n11838673\\r\\n639198100\\r\\n848317909\\r\\n824640563\\r\\n406400945\\r\\n209119809\\r\\n209119809\\r\\n71032038\\r\\n639198100\\r\\n406400945\\r\\n398538577\\r\\n627359427\\r\\n71032038\\r\\n603682081\\r\\n418239618\\r\\n19778681\\r\\n603682081\\r\\n651036773\\r\\n256474501\\r\\n35516019\\r\\n824640563\\r\\n35516019\\r\\n430078291\\r\\n615520754\\r\\n639198100\\r\\n800963217\\r\\n627359427\\r\\n418239618\\r\\n209119809\\r\\n406400945\\r\\n812801890\\r\\n11838673\\r\\n35516019\\r\\n800963217\\r\\n406400...']}, {'input': '1000 3000\\r\\n0 0 1 0 1 0 0 1 1 1 1 0 1 0 0 1 1 0 0 0 0 0 0 1 0 1 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 1 0 0 0 0 1 0 0 1 0 0 0 1 1 0 0 0 1 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 1 1 0 1 0 0 0 1 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 1 0 1 0 1 1 1 1 0 0 0 0 0 0 1 1 0 0 0 1 0 0 1 1 0 0 0 0 0 0 1 1 0 0 0 1 0 1 0 0 0 1 0 0 1 0 0 0 0 1 1 1 1 0 1 0 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0 1 0 0 0 1 0 0 ...', 'output': ['984664827\\r\\n971085301\\r\\n837724678\\r\\n984664827\\r\\n225735001\\r\\n971085301\\r\\n984664827\\r\\n611989677\\r\\n65215326\\r\\n611989677\\r\\n837724678\\r\\n984664827\\r\\n225735001\\r\\n984664827\\r\\n971085301\\r\\n225735001\\r\\n225735001\\r\\n984664827\\r\\n971085301\\r\\n957505775\\r\\n971085301\\r\\n984664827\\r\\n943926249\\r\\n225735001\\r\\n971085301\\r\\n611989677\\r\\n837724678\\r\\n971085301\\r\\n225735001\\r\\n971085301\\r\\n225735001\\r\\n971085301\\r\\n984664827\\r\\n971085301\\r\\n943926249\\r\\n943926249\\r\\n611989677\\r\\n971085301\\r\\n984664827\\r\\n957505775\\r\\n971085301\\r\\n225735001\\r\\n971085301\\r\\n971085301\\r\\n225735001\\r\\n837724678\\r\\n611989...']}, {'input': '1000 3000\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['499122179\\r\\n5\\r\\n499122179\\r\\n5\\r\\n5\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n499122179\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n499122184\\r\\n499122179\\r\\n5\\r\\n5\\r\\n5\\r\\n499122184\\r\\n10\\r\\n499122179\\r\\n499122179\\r\\n499122184\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n499122179\\r\\n499122184\\r\\n5\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n499122184\\r\\n499122184\\r\\n5\\r\\n499122179\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n499122179\\r\\n499122184\\r\\n5\\r\\n499122184\\r\\n5\\r\\n499122184\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n499122179\\r\\n499122184\\r\\n5\\r\\n499122179\\r\\n5\\r\\n499122184\\r\\n5\\r\\n499122179\\r\\n5\\r\\n499122179\\r\\n499122184\\r\\n499122184\\r\\n5...']}, {'input': '199990 3000\\r\\n1 0 0 1 0 1 1 0 0 0 1 0 0 0 1 0 1 1 0 0 1 1 1 1 1 1 0 1 1 1 0 0 0 1 0 1 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 1 1 0 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 1 0 0 1 1 0 1 0 1 0 1 1 0 1 1 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 1 1 1 1 0 1 0 0 0 1 0 0 0 1 1 1 0 1 0 1 0 0 0 1 0 1 0 1 1 0 1 1 0 1 0 0 0 1 0 0 1 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 1 1 0 0 1 0 0 1 1 0 0 1 0 1 0 0 1 0 1 1 1 1 0 0 1 1 1 1 0 1 1 0 1 0 0 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 0 1 1 0 1 0 0 1 0 1 0 0 1 1 1 0 1 0 1 1 0 1 1 0 1 0 1 0 1 1 1 0 0 0 1 0 1 0 ...', 'output': ['646452156\\r\\n960868656\\r\\n118518242\\r\\n184272685\\r\\n747024268\\r\\n964037469\\r\\n951101180\\r\\n377347150\\r\\n254993892\\r\\n11139421\\r\\n70322210\\r\\n525571057\\r\\n926475930\\r\\n63428346\\r\\n756018063\\r\\n626131891\\r\\n466781454\\r\\n656042659\\r\\n69698706\\r\\n359694160\\r\\n226813875\\r\\n191435355\\r\\n897230167\\r\\n851910875\\r\\n872964055\\r\\n741910138\\r\\n963242791\\r\\n859073545\\r\\n501205753\\r\\n252469038\\r\\n77916365\\r\\n622358084\\r\\n867246600\\r\\n381481659\\r\\n57646031\\r\\n326439010\\r\\n37314488\\r\\n267966014\\r\\n386173645\\r\\n224253188\\r\\n693822089\\r\\n652063749\\r\\n209704954\\r\\n936775840\\r\\n675102836\\r\\n581756207\\r\\n18809453\\r\\n84...']}, {'input': '199991 3000\\r\\n1 0 1 0 0 1 1 0 0 1 1 1 1 0 1 0 0 1 1 1 1 1 0 1 1 0 0 0 0 1 0 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 1 0 0 1 0 0 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 0 1 0 1 1 1 1 1 0 0 1 1 0 1 1 0 0 1 1 1 1 0 1 1 1 1 1 0 1 1 0 0 0 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 1 0 0 1 1 ...', 'output': ['576788803\\r\\n851579816\\r\\n464431389\\r\\n925910539\\r\\n240339104\\r\\n317886519\\r\\n67707478\\r\\n262772669\\r\\n221595177\\r\\n612937974\\r\\n736137684\\r\\n268724388\\r\\n68361383\\r\\n847191682\\r\\n557301933\\r\\n913346054\\r\\n648280739\\r\\n171995554\\r\\n235269506\\r\\n530242292\\r\\n148650394\\r\\n908499525\\r\\n304200830\\r\\n721371958\\r\\n474031015\\r\\n817280262\\r\\n825707282\\r\\n465373250\\r\\n245622892\\r\\n341231679\\r\\n845696111\\r\\n853007293\\r\\n68361383\\r\\n915771149\\r\\n987480726\\r\\n726171771\\r\\n707992711\\r\\n478931968\\r\\n847890178\\r\\n687514833\\r\\n732279394\\r\\n927044872\\r\\n856499296\\r\\n862463110\\r\\n77307104\\r\\n484794642\\r\\n615409785...']}, {'input': '199992 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 1 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 ...', 'output': ['944579271\\r\\n815447430\\r\\n121435610\\r\\n89385736\\r\\n85360285\\r\\n56962924\\r\\n289585947\\r\\n344015172\\r\\n223771444\\r\\n652123221\\r\\n591303048\\r\\n4248454\\r\\n306743823\\r\\n968709911\\r\\n670850059\\r\\n672191876\\r\\n417953645\\r\\n24521845\\r\\n946915719\\r\\n777789018\\r\\n60838440\\r\\n839186865\\r\\n79733480\\r\\n134590444\\r\\n755625163\\r\\n504520550\\r\\n752912502\\r\\n172585260\\r\\n452314215\\r\\n812559060\\r\\n865646468\\r\\n584772439\\r\\n717751255\\r\\n344015172\\r\\n217454686\\r\\n551825\\r\\n985330789\\r\\n733776192\\r\\n951920831\\r\\n371680341\\r\\n447096882\\r\\n332238689\\r\\n688429333\\r\\n390729899\\r\\n623930596\\r\\n453096625\\r\\n858100172\\r\\n14638...']}, {'input': '199993 3000\\r\\n1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...', 'output': ['189220773\\r\\n219328456\\r\\n767760662\\r\\n806220888\\r\\n797979411\\r\\n545740580\\r\\n219383989\\r\\n75297991\\r\\n40929720\\r\\n935115229\\r\\n532004785\\r\\n529257626\\r\\n49282263\\r\\n789793467\\r\\n545740580\\r\\n962586819\\r\\n485358615\\r\\n471678353\\r\\n907699172\\r\\n803473729\\r\\n408604762\\r\\n963918788\\r\\n35602001\\r\\n847372740\\r\\n611561330\\r\\n216636830\\r\\n729467035\\r\\n298885001\\r\\n73784562\\r\\n95928433\\r\\n405857603\\r\\n312620796\\r\\n126147182\\r\\n518268990\\r\\n353717115\\r\\n501841569\\r\\n512830205\\r\\n685568024\\r\\n252294364\\r\\n962586819\\r\\n477172671\\r\\n252637898\\r\\n246744513\\r\\n434391811\\r\\n52084955\\r\\n807039242\\r\\n414043547\\r\\n2...']}, {'input': '199994 3000\\r\\n0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 1 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 1 0 0 1 1 1 0 1 0 0 0 1 1 0 1 0 1 0 0 0 0 0 0 1 1 0 1 0 0 1 1 0 0 1 0 0 0 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 0 0 1 1 0 1 0 0 1 0 0 0 1 1 1 0 0 1 0 1 1 1 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 1 0 0 1 1 0 0 0 0 1 0 0 1 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 ...', 'output': ['336654971\\r\\n732535\\r\\n815250185\\r\\n326444659\\r\\n729180253\\r\\n129624924\\r\\n358796707\\r\\n444866639\\r\\n754810869\\r\\n843551608\\r\\n256744726\\r\\n70820418\\r\\n164515107\\r\\n207034102\\r\\n575220043\\r\\n87535002\\r\\n682699176\\r\\n43984065\\r\\n797070531\\r\\n806189316\\r\\n815982720\\r\\n704840912\\r\\n900587582\\r\\n585042405\\r\\n921264248\\r\\n459213067\\r\\n352526818\\r\\n883140463\\r\\n815669240\\r\\n511377385\\r\\n785483692\\r\\n225259507\\r\\n505565288\\r\\n832271475\\r\\n46481077\\r\\n860266192\\r\\n560703064\\r\\n99613410\\r\\n150730663\\r\\n410704936\\r\\n704840912\\r\\n915837096\\r\\n953960881\\r\\n968477860\\r\\n589004487\\r\\n187389378\\r\\n517884662\\r\\n93...']}, {'input': '199995 3000\\r\\n0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 ...', 'output': ['662762303\\r\\n929872487\\r\\n874878479\\r\\n456275271\\r\\n715183658\\r\\n400437516\\r\\n521458497\\r\\n76578537\\r\\n927594887\\r\\n897280874\\r\\n185062970\\r\\n530346011\\r\\n941267798\\r\\n71793140\\r\\n377419134\\r\\n675559304\\r\\n591654880\\r\\n719511098\\r\\n599406031\\r\\n622421976\\r\\n250476393\\r\\n605557988\\r\\n772627865\\r\\n133099572\\r\\n594620634\\r\\n848508553\\r\\n404542070\\r\\n193952921\\r\\n255031593\\r\\n40568087\\r\\n771704693\\r\\n756662785\\r\\n869935052\\r\\n847369753\\r\\n36238210\\r\\n358730629\\r\\n164552385\\r\\n938076721\\r\\n767600139\\r\\n458579571\\r\\n693757159\\r\\n843723156\\r\\n975014694\\r\\n858992824\\r\\n955398666\\r\\n756432588\\r\\n585958443...']}, {'input': '199996 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 ...', 'output': ['670876956\\r\\n282683795\\r\\n377011834\\r\\n803395587\\r\\n676385588\\r\\n935914218\\r\\n718622147\\r\\n536417373\\r\\n403228588\\r\\n282205508\\r\\n715874782\\r\\n593703261\\r\\n180906172\\r\\n125082949\\r\\n159213672\\r\\n79114647\\r\\n828013417\\r\\n919922217\\r\\n269261194\\r\\n677998414\\r\\n539957249\\r\\n116020539\\r\\n719578721\\r\\n947915860\\r\\n933837007\\r\\n911830283\\r\\n475864127\\r\\n320232037\\r\\n207122926\\r\\n915004383\\r\\n801796663\\r\\n301300804\\r\\n489000308\\r\\n929955103\\r\\n208735752\\r\\n169096397\\r\\n431236133\\r\\n485282467\\r\\n675865595\\r\\n711172563\\r\\n31711484\\r\\n780760415\\r\\n330893371\\r\\n339149368\\r\\n107928605\\r\\n630648538\\r\\n1150500...']}, {'input': '199997 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...', 'output': ['509540793\\r\\n120976575\\r\\n549866318\\r\\n103886913\\r\\n46471726\\r\\n486304930\\r\\n356783524\\r\\n889560180\\r\\n199228995\\r\\n889560180\\r\\n825998792\\r\\n728258080\\r\\n40325525\\r\\n723460820\\r\\n584045642\\r\\n849234655\\r\\n398457990\\r\\n44073096\\r\\n355733835\\r\\n753892573\\r\\n259042812\\r\\n526630455\\r\\n218717287\\r\\n69707589\\r\\n445979405\\r\\n843088454\\r\\n549866318\\r\\n900503641\\r\\n915194673\\r\\n110033114\\r\\n233408319\\r\\n632915998\\r\\n443580775\\r\\n883413979\\r\\n356783524\\r\\n63561388\\r\\n314059369\\r\\n628118738\\r\\n543720117\\r\\n420344912\\r\\n705022217\\r\\n89195881\\r\\n535175286\\r\\n987300892\\r\\n72106219\\r\\n543720117\\r\\n785673267\\r\\n2...', '791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n791536630\\r\\n79153...']}, {'input': '199998 3000\\r\\n1 0 1 1 1 0 1 0 1 1 1 1 0 1 0 0 0 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 0 1 1 1 1 0 1 1 0 0 1 1 1 0 1 0 1 0 0 0 1 0 1 1 1 0 1 1 1 1 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 0 1 0 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 1 1 0 1 1 0 0 0 0 1 0 0 0 1 1 1 1 0 1 1 1 0 1 1 1 1 0 1 0 0 1 0 1 0 1 0 0 0 0 1 0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 0 0 0 1 1 1 1 0 1 1 0 1 0 0 0 1 1 1 0 1 0 1 1 1 0 0 1 0 1 0 1 1 0 1 1 1 1 0 0 0 1 0 1 1 1 0 0 1 0 0 0 1 0 1 1 1 0 1 0 0 0 1 0 1 0 0 1 0 0 1 1 1 1 0 0 1 1 0 0 ...', 'output': ['728321596\\r\\n638956912\\r\\n987568459\\r\\n799092377\\r\\n597086927\\r\\n782772546\\r\\n770287170\\r\\n255784080\\r\\n699516389\\r\\n256762390\\r\\n656812813\\r\\n513524780\\r\\n416026596\\r\\n285567597\\r\\n279669471\\r\\n136357125\\r\\n790734343\\r\\n479381626\\r\\n898668365\\r\\n822581531\\r\\n870855601\\r\\n827897584\\r\\n408064799\\r\\n759611276\\r\\n235779603\\r\\n990282556\\r\\n571135194\\r\\n279669471\\r\\n311516659\\r\\n287631268\\r\\n607109724\\r\\n822559637\\r\\n639460200\\r\\n369129744\\r\\n111968446\\r\\n157186402\\r\\n495141278\\r\\n652212868\\r\\n143815634\\r\\n367752526\\r\\n165008822\\r\\n592117981\\r\\n400788425\\r\\n793754430\\r\\n966900453\\r\\n2484473\\r\\n9089752...', '964927693\\r\\n278374139\\r\\n964927693\\r\\n964927693\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n964927693\\r\\n964927693\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n278374139\\r\\n278374139\\r\\n964927693\\r\\n964927693\\r\\n278374139\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n278374139\\r\\n278374139\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n278374139\\r\\n278374139\\r\\n964927693\\r\\n964927693\\r\\n964927693\\r\\n964927693\\r\\n278374139\\r\\n964927693\\r\\n96492...']}, {'input': '199999 3000\\r\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 1 0 0 1 1 0 0 1 0 1 1 1 0 1 1 1 0 1 1 ...', 'output': ['659992102\\r\\n43534688\\r\\n613251861\\r\\n688791385\\r\\n969096633\\r\\n244584877\\r\\n407865304\\r\\n186960964\\r\\n243317864\\r\\n549539932\\r\\n991833247\\r\\n262687380\\r\\n543128826\\r\\n494636937\\r\\n223625258\\r\\n610530943\\r\\n823731817\\r\\n148706567\\r\\n321255216\\r\\n793342431\\r\\n574351284\\r\\n666241663\\r\\n731705240\\r\\n759075965\\r\\n574351284\\r\\n267483036\\r\\n533214424\\r\\n650213898\\r\\n38254397\\r\\n748651581\\r\\n341432457\\r\\n458755021\\r\\n851102542\\r\\n458618823\\r\\n777016923\\r\\n879306339\\r\\n831596828\\r\\n223948348\\r\\n334458632\\r\\n214654779\\r\\n250672893\\r\\n599162636\\r\\n601914362\\r\\n888897651\\r\\n620419998\\r\\n546470577\\r\\n2155987...', '959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n550771238\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n550771238\\r\\n959626450\\r\\n959626450\\r\\n959626450\\r\\n95962...']}, {'input': '200000 3000\\r\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 1 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 ...', 'output': ['893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n917300718\\r\\n917300718\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n917300718\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n917300718\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n917300718\\r\\n917300718\\r\\n917300718\\r\\n893407370\\r\\n893407370\\r\\n893407370\\r\\n89340...', '777798569\\r\\n231173131\\r\\n230887037\\r\\n573284389\\r\\n184819702\\r\\n389069614\\r\\n336642733\\r\\n374568480\\r\\n855432105\\r\\n25206655\\r\\n4356888\\r\\n605147597\\r\\n575616793\\r\\n296362756\\r\\n407873071\\r\\n112177054\\r\\n213967495\\r\\n814007752\\r\\n159623960\\r\\n280717246\\r\\n614422648\\r\\n758973286\\r\\n52239134\\r\\n765343745\\r\\n464084652\\r\\n192059356\\r\\n447272940\\r\\n617899428\\r\\n590679202\\r\\n570104616\\r\\n874554395\\r\\n774321789\\r\\n991301706\\r\\n991873894\\r\\n397156637\\r\\n113523353\\r\\n617052059\\r\\n46639523\\r\\n446403745\\r\\n35361814\\r\\n921640272\\r\\n891146426\\r\\n273084002\\r\\n58808253\\r\\n533015325\\r\\n30707919\\r\\n154980978\\r\\n71...']}, {'input': '200000 3000\\r\\n1 0 0 0 0 1 0 0 0 1 0 0 1 0 1 1 1 1 1 1 0 1 1 1 1 0 0 0 0 0 1 1 0 0 0 1 0 0 0 1 0 0 1 0 1 1 0 1 1 0 1 0 1 0 1 0 0 0 0 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 1 1 1 0 1 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 1 0 1 1 0 0 1 0 1 1 1 1 0 1 0 1 1 0 1 1 0 0 0 1 0 0 1 1 0 1 1 0 1 1 0 0 0 1 1 1 1 1 0 1 0 1 0 0 1 0 1 1 1 1 0 1 0 0 0 1 0 0 0 1 1 1 0 0 1 1 0 1 1 0 0 1 1 1 1 1 0 0 1 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 1 1 0 1 0 1 0 0 1 0 0 0 1 0 ...', 'output': ['203557555\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n203557555\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n203557555\\r\\n712662175\\r\\n712662175\\r\\n203557555\\r\\n712662175\\r\\n203557555\\r\\n203557555\\r\\n203557555\\r\\n203557555\\r\\n203557555\\r\\n203557555\\r\\n712662175\\r\\n203557555\\r\\n203557555\\r\\n203557555\\r\\n203557555\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n203557555\\r\\n203557555\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n203557555\\r\\n712662175\\r\\n712662175\\r\\n712662175\\r\\n203557555\\r\\n712662175\\r\\n712662175\\r\\n203557555\\r\\n712662175\\r\\n203557555\\r\\n203557555\\r\\n71266...']}, {'input': '200000 3000\\r\\n0 0 0 0 1 0 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 0 1 0 1 0 1 1 1 0 0 0 1 0 1 1 0 1 1 0 0 0 1 0 1 1 0 0 0 1 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 1 1 1 0 1 0 0 0 0 1 0 1 1 1 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 1 0 1 1 0 1 1 0 0 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 1 0 0 0 0 1 1 1 0 0 1 1 1 1 0 1 1 1 1 1 0 0 1 1 0 0 1 0 0 1 1 0 0 1 1 1 1 1 1 0 0 1 0 1 1 0 1 1 1 1 0 0 0 1 1 1 1 1 0 0 1 1 0 0 1 1 0 1 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 1 0 1 1 0 1 1 1 0 1 0 1 1 0 0 1 0 1 ...', 'output': ['532284272\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n23179652\\r\\n532284272\\r\\n532284272\\r\\n23179652\\r\\n23179652\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n23179652\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n23179652\\r\\n23179652\\r\\n532284272\\r\\n23179652\\r\\n532284272\\r\\n23179652\\r\\n532284272\\r\\n23179652\\r\\n23179652\\r\\n23179652\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n23179652\\r\\n532284272\\r\\n23179652\\r\\n23179652\\r\\n532284272\\r\\n23179652\\r\\n23179652\\r\\n532284272\\r\\n532284272\\r\\n532284272\\r\\n23179652\\r\\n532284272\\r\\n23179652\\r\\n23179652\\r\\n532284272\\r\\n532284272\\r\\n53...']}]","id":165,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def mod_inv(a, m):\\n    return pow(a, m - 2, m)\\n\\ndef solve():\\n    n, m = map(int, input().split())\\n    a = list(map(int, input().split()))\\n    w = list(map(int, input().split()))\\n    mod = 998244353\\n    \\n    expected_weights = [0] * n\\n    \\n    for i in range(n):\\n        expected_weight = w[i]\\n        for _ in range(m):\\n            total_weight = sum(w)\\n            prob_like = 0\\n            for j in range(n):\\n                if a[j] == 1:\\n                    prob_like += (w[j] * mod_inv(total_weight, mod)) % mod\\n                    prob_like %= mod\\n            \\n            prob_dislike = 1 - prob_like\\n            prob_dislike = (prob_dislike + mod) % mod\\n            \\n            expected_weight_after_visit = (expected_weight + prob_like - prob_dislike) % mod\\n            expected_weight = expected_weight_after_visit\\n            \\n            w_temp = [x for x in w]  # Create a temporary copy\\n            \\n            for j in range(n):\\n                if a[j] == 1:\\n                    w_temp[j] = (w_temp[j] + (w[j] * mod_inv(total_weight, mod)) % mod) % mod\\n                else:\\n                    w_temp[j] = (w_temp[j] - (w[j] * mod_inv(total_weight, mod)) % mod + mod) % mod\\n            \\n            w = [x for x in w_temp]  # Update w after each visit\\n        \\n        expected_weights[i] = expected_weight\\n    \\n    print(*expected_weights)\\n\\nsolve()\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def mod_inv(a, m):\\n    return pow(a, m - 2, m)\\n\\ndef solve():\\n    n, m = map(int, input().split())\\n    a = list(map(int, input().split()))\\n    w = list(map(int, input().split()))\\n    mod = 998244353\\n\\n    expected_w = [0] * n\\n    for i in range(n):\\n        for _ in range(m):\\n            total_w = sum(w)\\n            prob = [wi \/ total_w for wi in w]\\n            new_w = [0] * n\\n            for j in range(n):\\n                if a[j] == 1:\\n                    new_w[j] = w[j] + 1\\n                else:\\n                    new_w[j] = w[j] - 1\\n            w = new_w\\n        expected_w[i] = w[i]\\n        w = list(map(int, input().split()))\\n    \\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n        \\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n        \\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n    \\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n      print(expected_w[i] % mod)\\n\\nsolve()\\n\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def mod_inv(a, m):\\n    return pow(a, m - 2, m)\\n\\ndef solve():\\n    n, m = map(int, input().split())\\n    a = list(map(int, input().split()))\\n    w = list(map(int, input().split()))\\n    mod = 998244353\\n    \\n    expected_weights = [0] * n\\n    \\n    for i in range(n):\\n        expected_weight = w[i]\\n        for _ in range(m):\\n            total_weight = sum(w)\\n            prob_like = 0\\n            for j in range(n):\\n                if a[j] == 1:\\n                    prob_like += (w[j] * mod_inv(total_weight, mod)) % mod\\n                    prob_like %= mod\\n            \\n            prob_dislike = 1 - prob_like\\n            prob_dislike = (prob_dislike + mod) % mod\\n            \\n            expected_weight_after_visit = (expected_weight + prob_like - prob_dislike) % mod\\n            expected_weight = expected_weight_after_visit\\n            \\n            w_temp = [x for x in w]  # Create a temporary copy\\n            \\n            for j in range(n):\\n                if a[j] == 1:\\n                    w_temp[j] = (w_temp[j] + (w[j] * mod_inv(total_weight, mod)) % mod) % mod\\n                else:\\n                    w_temp[j] = (w_temp[j] - (w[j] * mod_inv(total_weight, mod)) % mod + mod) % mod\\n            \\n            w = [x for x in w_temp]  # Update w after each visit\\n        \\n        expected_weights[i] = expected_weight\\n    \\n    print(*expected_weights)\\n\\nsolve()\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def mod_inv(a, m):\\n    return pow(a, m - 2, m)\\n\\ndef solve():\\n    n, m = map(int, input().split())\\n    a = list(map(int, input().split()))\\n    w = list(map(int, input().split()))\\n    mod = 998244353\\n\\n    expected_w = [0] * n\\n    for i in range(n):\\n        for _ in range(m):\\n            total_w = sum(w)\\n            prob = [wi \/ total_w for wi in w]\\n            new_w = [0] * n\\n            for j in range(n):\\n                if a[j] == 1:\\n                    new_w[j] = w[j] + 1\\n                else:\\n                    new_w[j] = w[j] - 1\\n            w = new_w\\n        expected_w[i] = w[i]\\n        w = list(map(int, input().split()))\\n    \\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n        \\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n        \\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n    \\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n        total_w = sum(w)\\n        prob = [wi \/ total_w for wi in w]\\n        expected_w_i = 0\\n        for j in range(n):\\n            if a[j] == 1:\\n                expected_w_i += (w[j] + 1) * prob[j]\\n            else:\\n                expected_w_i += (w[j] - 1) * prob[j]\\n        expected_w[i] = int(expected_w_i)\\n\\n    for i in range(n):\\n      print(expected_w[i] % mod)\\n\\nsolve()\\n\"\n  }\n]\n```"}
{"description":"Game \"Minesweeper 1D\" is played on a line of squares, the line's height is 1 square, the line's width is n squares. Some of the squares contain bombs. If a square doesn't contain a bomb, then it contains a number from 0 to 2 \u2014 the total number of bombs in adjacent squares.For example, the correct field to play looks like that: 001*2***101*. The cells that are marked with \"*\" contain bombs. Note that on the correct field the numbers represent the number of bombs in adjacent cells. For example, field 2* is not correct, because cell with value 2 must have two adjacent cells with bombs.Valera wants to make a correct field to play \"Minesweeper 1D\". He has already painted a squared field with width of n cells, put several bombs on the field and wrote numbers into some cells. Now he wonders how many ways to fill the remaining cells with bombs and numbers are there if we should get a correct field in the end.","input_specification":"The first line contains sequence of characters without spaces s1s2... sn (1\u2009\u2264\u2009n\u2009\u2264\u2009106), containing only characters \"*\", \"?\" and digits \"0\", \"1\" or \"2\". If character si equals \"*\", then the i-th cell of the field contains a bomb. If character si equals \"?\", then Valera hasn't yet decided what to put in the i-th cell. Character si, that is equal to a digit, represents the digit written in the i-th square.","output_specification":"Print a single integer \u2014 the number of ways Valera can fill the empty cells and get a correct field. As the answer can be rather large, print it modulo 1000000007 (109\u2009+\u20097).","notes":"NoteIn the first test sample you can get the following correct fields: 001**1, 001***, 001*2*, 001*10.","sample_inputs":["?01???","?","**12","1"],"sample_outputs":["4","2","0","0"],"src_uid":"c16c49baf7b2d179764871204475036e","lang_cluster":"Python","difficulty":1900,"human_solution":"from sys import stdin\ndef main():\n    s = stdin.readline().strip()\n    if s[0] == '2' or s[-1] == '2':\n        print 0\n        return\n    # 0, *1, 1*, *2*, *\n    if s[0] == '?':\n        dp = [1, 0, 1, 0, 1]\n    elif s[0] == '0':\n        dp = [1, 0, 0, 0, 0]\n    elif s[0] == '1':\n        dp = [0, 0, 1, 0, 0]\n    elif s[0] == '*':\n        dp = [0, 0, 0, 0, 1]\n    def add(x, y):\n        z = x + y\n        return z if z < 1000000007 else z - 1000000007\n    for c in s[1:]:\n        if c == '*':\n            ndp = [0, 0, 0, 0, add(dp[2], add(dp[3], dp[4]))]\n        elif c == '0':\n            ndp = [add(dp[0], dp[1]), 0, 0, 0, 0]\n        elif c == '1':\n            ndp = [0, dp[4], add(dp[0], dp[1]), 0, 0]\n        elif c == '2':\n            ndp = [0, 0, 0, dp[4], 0]\n        else:   \n            ndp = [add(dp[0], dp[1]), dp[4], add(dp[0], dp[1]), dp[4], add(dp[2], add(dp[3], dp[4]))]\n        dp = ndp\n    print add(dp[0], add(dp[1], dp[4]))\nmain()\n","testcases":"[{'input': '?01???\\r\\n', 'output': ['4\\r\\n']}, {'input': '?\\r\\n', 'output': ['2\\r\\n']}, {'input': '**12\\r\\n', 'output': ['0\\r\\n']}, {'input': '1\\r\\n', 'output': ['0\\r\\n']}, {'input': '?01*??****\\r\\n', 'output': ['4\\r\\n']}, {'input': '0\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n', 'output': ['0\\r\\n']}, {'input': '*\\r\\n', 'output': ['1\\r\\n']}, {'input': '0*\\r\\n', 'output': ['0\\r\\n']}, {'input': '0?\\r\\n', 'output': ['1\\r\\n']}, {'input': '01\\r\\n', 'output': ['0\\r\\n']}, {'input': '1*\\r\\n', 'output': ['1\\r\\n']}, {'input': '1?\\r\\n', 'output': ['1\\r\\n']}, {'input': '?1?\\r\\n', 'output': ['2\\r\\n']}, {'input': '12\\r\\n', 'output': ['0\\r\\n']}, {'input': '2*\\r\\n', 'output': ['0\\r\\n']}, {'input': '2?\\r\\n', 'output': ['0\\r\\n']}, {'input': '2??\\r\\n', 'output': ['0\\r\\n']}, {'input': '?2?\\r\\n', 'output': ['1\\r\\n']}, {'input': '?2*?2*??1*2**?2*1???*2???100?????*???*?*????0????2?*?*?1??1??*?01**2**1001??**??**??1*?*???00??**??*\\r\\n', 'output': ['147483634\\r\\n']}, {'input': '00***???01\\r\\n', 'output': ['0\\r\\n']}, {'input': '21?20*0000?2?22??0001*?1??12?20020200?**0*12?*221*0*1200*?0*11?022*110*2*2022120*2*2100*0?0*02?012?1\\r\\n', 'output': ['0\\r\\n']}]","id":166,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    s = input()\\n    n = len(s)\\n    MOD = 1000000007\\n    dp = [[0, 0, 0] for _ in range(n + 1)]  # [no_bomb_prev, bomb_prev, invalid]\\n    dp[0][0] = 1\\n\\n    for i in range(n):\\n        if s[i] == '*':\\n            dp[i+1][1] = (dp[i][0] + dp[i][1] + dp[i][2]) % MOD\\n        elif s[i].isdigit():\\n            digit = int(s[i])\\n            if digit == 0:\\n                dp[i+1][0] = dp[i][0]\\n                dp[i+1][1] = 0\\n                dp[i+1][2] = (dp[i][1] + dp[i][2]) % MOD\\n            elif digit == 1:\\n                dp[i+1][0] = dp[i][1]\\n                dp[i+1][1] = 0\\n                dp[i+1][2] = (dp[i][0] + dp[i][2]) % MOD\\n            elif digit == 2:\\n                dp[i+1][0] = 0\\n                dp[i+1][1] = 0\\n                dp[i+1][2] = (dp[i][0] + dp[i][1] + dp[i][2]) % MOD\\n        else:  # ?\\n            dp[i+1][0] = (dp[i][0] + dp[i][1]) % MOD\\n            dp[i+1][1] = (dp[i][0] + dp[i][1] + dp[i][2]) % MOD\\n            dp[i+1][2] = dp[i][2]\\n\\n    print((dp[n][0] + dp[n][1] + dp[n][2]) % MOD)\\n\\nsolve()\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    s = input()\\n    n = len(s)\\n    mod = 1000000007\\n    dp = [[0, 0, 0] for _ in range(n + 1)]  # [no_bomb, bomb_left, bomb_right]\\n    dp[0][0] = 1\\n\\n    for i in range(n):\\n        if s[i] == '*':\\n            dp[i+1][1] = (dp[i][0] + dp[i][1] + dp[i][2]) % mod\\n        elif s[i].isdigit():\\n            digit = int(s[i])\\n            if digit == 0:\\n                dp[i+1][0] = dp[i][0]\\n            elif digit == 1:\\n                dp[i+1][2] = dp[i][0]\\n                dp[i+1][1] = dp[i][1] + dp[i][2] # bomb_left\\n            elif digit == 2:\\n                dp[i+1][1] = dp[i][1]\\n        else:  # ?\\n            dp[i+1][0] = (dp[i][0] + dp[i][2]) % mod\\n            dp[i+1][1] = (dp[i][0] + dp[i][1] + dp[i][2]) % mod\\n            dp[i+1][2] = dp[i][0] % mod\\n\\n    print((dp[n][0] + dp[n][1] + dp[n][2]) % mod)\\n\\n\\nsolve()\\n\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    s = input()\\n    n = len(s)\\n    MOD = 1000000007\\n    dp = [[0, 0, 0] for _ in range(n + 1)]  # [no_bomb_prev, bomb_prev, invalid]\\n    dp[0][0] = 1\\n\\n    for i in range(n):\\n        if s[i] == '*':\\n            dp[i+1][1] = (dp[i][0] + dp[i][1] + dp[i][2]) % MOD\\n        elif s[i].isdigit():\\n            digit = int(s[i])\\n            if digit == 0:\\n                dp[i+1][0] = dp[i][0]\\n                dp[i+1][1] = 0\\n                dp[i+1][2] = (dp[i][1] + dp[i][2]) % MOD\\n            elif digit == 1:\\n                dp[i+1][0] = dp[i][1]\\n                dp[i+1][1] = 0\\n                dp[i+1][2] = (dp[i][0] + dp[i][2]) % MOD\\n            elif digit == 2:\\n                dp[i+1][0] = 0\\n                dp[i+1][1] = 0\\n                dp[i+1][2] = (dp[i][0] + dp[i][1] + dp[i][2]) % MOD\\n        else:  # ?\\n            dp[i+1][0] = (dp[i][0] + dp[i][1]) % MOD\\n            dp[i+1][1] = (dp[i][0] + dp[i][1] + dp[i][2]) % MOD\\n            dp[i+1][2] = dp[i][2]\\n\\n    print((dp[n][0] + dp[n][1] + dp[n][2]) % MOD)\\n\\nsolve()\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    s = input()\\n    n = len(s)\\n    mod = 1000000007\\n    dp = [[0, 0, 0] for _ in range(n + 1)]  # [no_bomb, bomb_left, bomb_right]\\n    dp[0][0] = 1\\n\\n    for i in range(n):\\n        if s[i] == '*':\\n            dp[i+1][1] = (dp[i][0] + dp[i][1] + dp[i][2]) % mod\\n        elif s[i].isdigit():\\n            digit = int(s[i])\\n            if digit == 0:\\n                dp[i+1][0] = dp[i][0]\\n            elif digit == 1:\\n                dp[i+1][2] = dp[i][0]\\n                dp[i+1][1] = dp[i][1] + dp[i][2] # bomb_left\\n            elif digit == 2:\\n                dp[i+1][1] = dp[i][1]\\n        else:  # ?\\n            dp[i+1][0] = (dp[i][0] + dp[i][2]) % mod\\n            dp[i+1][1] = (dp[i][0] + dp[i][1] + dp[i][2]) % mod\\n            dp[i+1][2] = dp[i][0] % mod\\n\\n    print((dp[n][0] + dp[n][1] + dp[n][2]) % mod)\\n\\n\\nsolve()\\n\"\n  }\n]\n```"}
{"description":"Andrey's favourite number is n. Andrey's friends gave him two identical numbers n as a New Year present. He hung them on a wall and watched them adoringly.Then Andrey got bored from looking at the same number and he started to swap digits first in one, then in the other number, then again in the first number and so on (arbitrary number of changes could be made in each number). At some point it turned out that if we sum the resulting numbers, then the number of zeroes with which the sum will end would be maximum among the possible variants of digit permutations in those numbers.Given number n, can you find the two digit permutations that have this property?","input_specification":"The first line contains a positive integer n \u2014 the original number. The number of digits in this number does not exceed 105. The number is written without any leading zeroes.","output_specification":"Print two permutations of digits of number n, such that the sum of these numbers ends with the maximum number of zeroes. The permutations can have leading zeroes (if they are present, they all should be printed). The permutations do not have to be different. If there are several answers, print any of them.","notes":null,"sample_inputs":["198","500"],"sample_outputs":["981\n819","500\n500"],"src_uid":"34b67958a37865e1ca0529bbf528dd9a","lang_cluster":"Python","difficulty":1900,"human_solution":"num = [0] * 10\nline = list(input().strip())  \nfor i in line:\n    num[ord(i) - ord('0')] += 1\n\nans = 0\nretstr1 = retstr2 = ''.join(sorted(line))\n\nfor first_i in range(1, 10):\n    first_j = (10 - first_i) % 10\n    cntx = [0] * 10\n    cnty = [0] * 10\n    cntx[first_i] += 1\n    cnty[first_j] += 1\n\n    if cntx[first_i] > num[first_i] or cnty[first_j] > num[first_j]:\n        continue\n\n    tmpstr1 = chr(ord('0') + first_i)\n    tmpstr2 = chr(ord('0') + first_j)\n    tmp = 1\n\n    for i in range(10):\n        l = min(num[i] - cntx[i], num[9 - i] - cnty[9 - i])\n        cntx[i] += l\n        cnty[9 - i] += l\n        tmp += l\n        tmpstr1 += chr(ord('0') + i) * l\n        tmpstr2 += chr(ord('0') + 9 - i) * l\n\n    l = min(num[0] - cntx[0], num[0] - cnty[0])\n    cntx[0] += l\n    cnty[0] += l\n    tmp += l\n    tmpstr1 = chr(ord('0')) * l + tmpstr1\n    tmpstr2 = chr(ord('0')) * l + tmpstr2\n\n    for i in range(10):\n        tmpstr1 += chr(ord('0') + i) * (num[i] - cntx[i])\n        tmpstr2 += chr(ord('0') + i) * (num[i] - cnty[i])\n\n    if ans < tmp:\n        ans = tmp\n        retstr1 = tmpstr1\n        retstr2 = tmpstr2\n\nprint(retstr1[::-1])\nprint(retstr2[::-1])\n","testcases":"[{'input': '198\\r\\n', 'output': ['981\\r\\n819']}, {'input': '500\\r\\n', 'output': ['500\\r\\n500']}, {'input': '1061\\r\\n', 'output': ['1160\\r\\n1160', '6110\\r\\n6110']}, {'input': '1099\\r\\n', 'output': ['9901\\r\\n1099']}, {'input': '4877\\r\\n', 'output': ['4778\\r\\n4778', '8774\\r\\n8774']}, {'input': '787027\\r\\n', 'output': ['877720\\r\\n777280']}, {'input': '7665711\\r\\n', 'output': ['7766115\\r\\n7766115']}, {'input': '670042\\r\\n', 'output': ['672400\\r\\n427600']}, {'input': '87417\\r\\n', 'output': ['77481\\r\\n77418', '87741\\r\\n87741', '14778\\r\\n14778']}, {'input': '27183007\\r\\n', 'output': ['78721300\\r\\n31278700']}, {'input': '2603340571199714716025114079373828413509944752618962350632892540710372640383149198328312562980217104434880337288055817064\\r\\n', 'output': ['9444433333332219999999998888888888888777777777776666666655555555544444444433333333222222222221111111111111000000000100000\\r\\n4444333333322110000000001111111111111222222222223333333344444444455555555566666666777777777778888888888888999999999900000', '4444333333322109999999999888888888888877777777777666666665555555554444444443333333322222222222111111111111100000000010000\\r\\n4444333333322110000000000111111111111122222222222333333334444444445555555556666666677777777777888888888888899999999990000']}, {'input': '8679647744\\r\\n', 'output': ['9877766444\\r\\n9877764446']}, {'input': '220737406285\\r\\n', 'output': ['877654322200\\r\\n222345677800']}, {'input': '993522733475817\\r\\n', 'output': ['997533877542213\\r\\n995333122457787']}, {'input': '5057017252180797906185\\r\\n', 'output': ['7765551998877221100500\\r\\n7765551001122778899500']}, {'input': '12414711447744142772\\r\\n', 'output': ['11111222444444477777\\r\\n11111222444444477777', '77444444411111777222\\r\\n77444444411111222777', '77777444444422211111\\r\\n77777444444422211111']}, {'input': '3037225037514100860827276704\\r\\n', 'output': ['7887777665544332222113000000\\r\\n3112222334455667777887000000']}, {'input': '346762409573609367635944363650432097309\\r\\n', 'output': ['774499999776666666555444333333322000003\\r\\n744300000223333333444555666666677999997']}, {'input': '21504009080570645002760268009722803470954749000131\\r\\n', 'output': ['69999888777776655554444332222211100004000000000000\\r\\n40000111222223344445555667777788899996000000000000']}, {'input': '3311314413231141411421432122343321141133112122342341334443214\\r\\n', 'output': ['4444444444444433333333333333332222222222211111111111111111111\\r\\n4444444444444433333333333333332222222222211111111111111111111', '1111111111111111111122222222222333333333333333344444444444444\\r\\n1111111111111111111122222222222333333333333333344444444444444']}, {'input': '9070901003919040000887091134838800004472724709967020097067025050205000220352709096100405900207957128\\r\\n', 'output': ['7999999999999888888777777777766655555544444433322222222221111110000000000003000000000000000000000000\\r\\n3000000000000111111222222222233344444455555566677777777778888889999999999997000000000000000000000000']}, {'input': '41818138314831348134448848318148131818813388313344833114141141184383813143343448843131343384181384844431384114113314313144848133488818418384818848341344811441811141313448341888341118488811314338434488\\r\\n', 'output': ['88888888888888888888888888888888888888888888888888844444444444444444444444444444444444444444444444444333333333333333333333333333333333333333333333111111111111111111111111111111111111111111111111111111\\r\\n88888888888888888888888888888888888888888888888888844444444444444444444444444444444444444444444444444333333333333333333333333333333333333333333333111111111111111111111111111111111111111111111111111111', '11111111111111111111111111111111111111111111111111111133333333333333333333333333333333333333333333344444444444444444444444444444444444444444444444444888888888888888888888888888888888888888888888888888\\r\\n11111111111111111111111111111111111111111111111111111...', '44444444444444444444444444444444444444444444444444333333333333333333333333333333333333333333333111888888888888888888888888888888888888888888888888888111111111111111111111111111111111111111111111111111\\r\\n44444444444444444444444444444444444444444444444444333333333333333333333333333333333333333333333111111111111111111111111111111111111111111111111111111888888888888888888888888888888888888888888888888888']}, {'input': '73552900025351606679224588872327647961330089042655630665222580520508672870102563487600132539752481214659858863022476410484266570139810532470714984092503934751571221521306943121997450187110428026190962582430971693370613087381790614697689671767000004095232276975952292053272119035138483846537407714434012224979098527763281110363860729062927455745190194649\\r\\n', 'output': ['66655222222221111111199999999999999999999999999999999988888888888888888888888888877777777777777777777777777777777777776666666666666666666666666666666555555555555555555555555555555544444444444444444444444444444443333333333333333333333333333333222222222222222222222222222222222222211111111111111111111111111100000000000000000000000000000000050000000000000\\r\\n666552222222211111111000000000000000000000000000000000111111111111111111111111111222222222222222222222222222222222222233333333333333333333333333333334444444...']}, {'input': '3660060360865606405406648718470765048005409506710925001850101061700007022407913434780234609002664580600302035550131007145010003815754853838580300966004029000300434981894159106340481587649046330570701648116012056320463003313141680800500509429100191307403765300801130020535489060555504004005803272823494700970010952879008030098004480465890588039380501581078422931611654908930340540303783403661632050700948101050151020160623940430284004280902060684751066629489507855752580027410505650019760020009138500203642800308...', 'output': ['8999999999999999999999999999999999888888888888888888888888888888888888888888888888888777777777777777777777777777777777666666666666666666666666666666666666666666666666666665555555555555555555555555555555555555555555555555555555554444444444444444444444444444444444444444444444444444444443333333333333333333333333333333333333333333333333333322222222222222222222222222222222211111111111111111111111111111111111111111111111111100000000000000000000000000000000020000000000000000000000000000000000000000000000000000000...']}, {'input': '3988405032201869838583516133943649897563464963199720203573666195109254972807095125585153139107836315540802254503122202208671231062969287785325745149827780975637820846694844717512181082423246460831153198676512327424647704185170864814344819230405434252307112870463387306341417126663194715993207482864102823774828380347931676663905538788367741598351252166769604140992179418820043419699163449596439979329298654494702555801641339987965927031928141345579024032222443566448480995335779507500358684011237604341216194860...', 'output}, {'input': '5562193853810918945620627929172131555837473643554362967763887812413927487628705169826152884386226149418373951049986250969308862515359891001338285242920050910490906828048000561263856034031835539717283086698037020184346364592477218030068494838985393388772969774556866175869082513319040937289891361048143148841837267534830052901494206187747905771299059141380597767985198813756458221849136120811572042106826621666519843756406853641666119992871613251441378811527654575794639431472815236597945545443592839760099142175...', 'output}, {'input': '1730422676082588834860375440897683748061653034160089035356410303853087273043400007064082808873506818021832173796672909286031070430706710420988411005000807994008004024283001700960690091562564065800969314020467274006854259128883092106143502490180340506154995307707013371796800069059205904006180070480509165819304195087071960902368005201049042530842923912727019572672086010287001109827122078050756623098907147400115030307257820452003056013088910107770590352130772036869022135230000406249627027600081343058909708407...', 'output}, {'input': '1188618183388611381111868863636138313333318818183316831361113811386318881168331361688618161613168636818383186336633113388318838136613388313111138111638188133138611181663863163386311813118638838866886113361631311686863836336863366813363683838881686613163833833813818131863311861368333636631363361331668363336363133666111611188181133381186813313311188138316336861381168838138611618113313831613331631133161186833631636661616388613133631666888311386383811818886633183161338681333381366386313631818363861111388386336...', 'output': ['3333333333333333333333333333333333333333111188888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666...', '8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888866666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666333333333333333333333333333333333...']}, {'input': '4243694432732244021095331595848137532367241195639191582163152600248271436184171538206044964067675106064159822875846011534297438582909683899088886549812421326048203391195680776887732457754143569028983164195293260537822023061273285507094731086855967279325960871356767018241344379707565856468765648033087664400397093527921657664579022705211823347324199918200113662278819911280201671779336001809547757878558876551737537928583698853638809689051510513192892880892879923602951533842587693618320930509403954665244464014...', 'output}, {'input': '5437214130838098132393123187069383986299021704931433096622499682915037838279737829812626065978576360754157333866084773073470536769353978446234788082062466105585127249713791721276273253638073234535447123880003542275055023902223874569552201863700202729293434430147174682302760783914011412039339697895841967107362265388874914846141521997037412954401235418335972353607055044874973461347888021255272429429744517830123078766552437060613565467908259410563840960055743267873948181932990399762986852911078878324107938917...', 'output}, {'input': '4944847984484499897477888998874784884474797788999888498989748984997797774478988749487787787944998784444748977844777488984798748984848479947894989998987487879949447848848898888479487898778984788988844874979497894779489449989797494497448984798494794487487499897944798844794498988947898787974874948989778778787978779999884994978894997949747744747987949784774894974798444899479997779484979789977489799448894478894447988489844888844979484789849479784487487984494474787484798944879774787979844984474989994948844498848...', 'output': ['9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '7688754930503622624249376302050721830065980218099156664541044701341628003496939103577693880283583449467297533469375121979331361424629165453875685841427085813980899970901793449283121463702841677303321796810682892574801165017961242552369171251649136915268463307740719648716991029731139504104601780245826323470355102044393062687794743810560411082474390672510942974815216433066730925915777989481449608904036597675354340429734413866576289385161415247796862427872213476834038054015404274700559772991390769430573604588...', 'output}, {'input': '6185037014707879384301592707009200430885687987529770162683115103088000085680865822274850080279809974072320607292351515828318654276346545329009080458123889570600021478058963049335300526437402130814087220633083010320092359393947423676191603547547874099010090263715163042641015092023212068194008006284379105933507405589730536098173006808291862017372694644277904949390565867842170703665006250410053210368067399451324395605280164900094231101070015087506700869427482073857397072913460003007919234200185280014042400788...', 'output': ['0999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...', '9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '9965675082563929077799639762147786621291924398160624989369600320192031503878569896057485302667512360792029743474568614205998702183738012739853871916032407255123289056032335037954093166786819460498686316030169623643193583487898113843927174667792205951098904610616262292296460934603477941718344667867924960280476601880750505510840781238530728533026536005269229659829632892079936763214347808150429912908943447565716781168693866762946019658346001623995714859531084238467607308795481083815672444891116656361208045970...', 'output}, {'input': '9399099847230403397608550745456155491158833773727348957376326513008223271678368456249540347230059416611594526577303833136258789778891864775273632464015119183546285134805758447349338707895134660480829159525233548918538910475304570679493939658220667016376015440024476591414811967116176614232543688298600080829981632901950723372865951651419680198089502103871677882895994538059569016616295154550051663786468623844991852957332803481973612908697320851672235286727280608094255910265465949153761572434331191352427728064...', 'output': ['7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777666666666666666444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441111111111111111111111111111111111111111111111111111111111111999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '8677967897698796789869977698966986766668767667877789687666777969877868866999778969776786886687667966666886998976666676977779778769966697999998779777897676767686769769786987879887997776899999678878889896989896786778987668667889996989798796789766787977696988889666979897677886999868886976889987967696786768799888977677869978788766888766766967966876677799699997999866877688987986667899667687969687976867888778966777679767976979686899989799966976677796988888678867987797979987688869998677678689766966799667798866777...', 'output': ['9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '9169971377710854296307256878741743698904124875448188271438951731205465267096367879254423883111502855461268175261428259841277349539147022226480518218151857953676017222027859200956811168178482461083232476828773371751606247028165410567693365659977753752229668485142842096080257823565015585554974200804379221344492030870542627558563729072598095907764908903382419976933178549658032518931968565924190202313496291962510432634753675507873015068004621111683336737250908340689201372884809217551652679954580369879266423996...', 'output': ['6999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '6402786117688907443629724676831861533380180662220326080501780992805834946738488906845349427183566546511120382042723532624475030689025499486454271766674879981315283125798751257569414757976374038693161455471776288448466249042222232425875808224403027744003704733955856398480964728375104262593788637777991997226599166814909071700171931478113019658198262741949705020331053974720755616818262843218961549805697021892940521399666343560867144526146538816131915538024059710094503485967378568082586947837283236875658146083...', 'output}, {'input': '2070584715958145931421943242877190736958188253532149113773257317774198852654268041861390688937915459566813326558023375873717875659623285221404908938186814771148690466010226989170254197736185741906851849474335844294393346935985196002604635838488633689366270270816465659353721056863151769188355135996953267698927714458440941550608272933473999407843409218797782406542610740951897694088643421505259321077956931953401390506157198305673803989694229999834828559332611372520954127118391729272331426793792414035235978292...', 'output}, {'input': '8830861889084051137643095774667654091986146869638648806288355834264695705797997204636152837277104079861551043640411014476918595066178670622283784697836347266655410475651455424263984398400662652738282678568304261152268090472444853374162421538590461473160139331604155280883012526754572269223633721300073239964775068679107842867167988931514560036166077584920827099541095153530279147684552577281385808157457305366848324391930843148351467387609038643560823897910018058987387476315080167238324082347653316905346938679...', 'output}, {'input': '8305353302042045132812713478589540940020097002309955880051290302345538886542504324100015141590915418707137647116069301978829579921838244596449533937725450722688600320224550552507030093558787751655874747352271037965806257211323568094024519907197752098052106271348046013549239460290417613713576981256525956964865075252410470149725070078486001965401206111081063737511835054192700776299150006487937152257808653940563700849221029782962584151954350056927572215246004027016540143697744783917148900624067210069508161787...', 'output': ['8999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '6704583818391588725469181550354102907239957098358358841717401300766278881560400090038110916014289948657235584423606594158621824161523469830236380607965385255791396338932174225438170797034425037147862456636103346837327265294351641494623753674273621107344771242622310334986605935646991773638608552637622046669634226820615541845784212711291886281633637512336684846321599254977042239750805332860293274970565739990902560439745089146186062321750856522530810958656665834465619613523446131577586425662419972532205004271...', 'output': ['4444444444444444444444444444444444444444444444444444443333333333333333333333333333333333333333333333333333333333333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111099999999999999999999999999999999999999999...', '9444444444444444444444444444444444444444444444444444444333333333333333333333333333333333333333333333333333333333333333333333333333333222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222211111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111199999999999999999999999999999999999999999...']}, {'input': '9689938698889663898863839636966699683986893699339386968338899966338869996936888869663833336868866886386686639839963333996866369633899638368886998389968998699366836388883663893393688389893963669968369396688338969698386338398836839988388898698688996366986968989699663989989698666833338689688393939988989389688683933989888969993363986386998399368636639933366866638686886936996998988399363868338933366966866996963866669896888669699698386869968968863868939688838383896969669866999369969399938388639699888886838393936...', 'output': ['9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '6023899695120557896013140711187680503448138679874588624050077803801854865697769353263222770960826861606106727886113310607069728272963227255389496899919068931344113537068309946879921059042444576366749994436144274847702102456819164989911861327124734838196173853563309843214631874712516961632171049329502507717957033924841978867659693226643101620967990111518453074600938886866941984226547980772170089838147109088768785941748600078140887848218226465026331411736734765922485300427498987217333097493592537246554457873...', 'output}, {'input': '404\\r\\n', 'output': ['440\\r\\n440']}, {'input': '545\\r\\n', 'output': ['545\\r\\n455']}, {'inputoutput': ['5999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '1486913458965407214474383051348880508797108309397132594608042047940314727604051381139181936657952113296264075630972575614980513092531236791260521858939901778974029659858701463047070106689549279462422735787009718900006205995325189656713599230841667711463676680976775990350526357505751432136802865972492235528750512640736169514063847705640465671951212885515298612577866350659145039585877518710392780320811778565480073883045746578885361310463306158402059382132691444825799882582584615455011180820034013186375611788...', 'output}, {'input': '735529000253516066792245888723276479613300890426556306652225805205086728701025634876001325397524812146598588630224764104842665701398105324707149840925039347515712215213069431219974501871104280261909625824309716933706130873817906146976896717670000040952322...', 'output': ['666552222222211111111999999999999999999999999999999999888888888888888888888888888777777777777777777777777777777777777766666666666666666666666666666665555555555555555555555555555555444444444444444444444444444444433333333333333333333333333333332222222222222...']}, {'input': '366006036086560640540664871847076504800540950671092500185010106170000702240791343478023460900266458060030203555013100714501000381575485383858030096600402900030043498189415910634048158764904633057070164811601205632046300331314168080050050942910019130740376...', 'output': ['899999999999999999999999999999999988888888888888888888888888888888888888888888888888877777777777777777777777777777777766666666666666666666666666666666666666666666666666666555555555555555555555555555555555555555555555555555555555444444444444444444444444444...']}, {'input': '398840503220186983858351613394364989756346496319972020357366619510925497280709512558515313910783631554080225450312220220867123106296928778532574514982778097563782084669484471751218108242324646083115319867651232742464770418517086481434481923040543425230711...', 'output': ['999999999999964444444444444444442221111111111199999999999999999999999999999999999999999999999999999999999999999999999988888888888888888888888888888888888888888888888888888888888888888888888887777777777777777777777777777777777777777777777777777777777777777...']}, {'input': '556219385381091894562062792917213155583747364355436296776388781241392748762870516982615288438622614941837395104998625096930886251535989100133828524292005091049090682804800056126385603403183553971728308669803702018434636459247721803006849483898539338877296...', 'output': ['999999999999999999999997777777777777755555599999999999999999999999999999999999999999999999999999999999988888888888888888888888888888888888888888888888888888888888888888888888888888888888887777777777777777777777777777777777777777777777777777777777777777766...']}, {'input': '173042267608258883486037544089768374806165303416008903535641030385308727304340000706408280887350681802183217379667290928603107043070671042098841100500080799400800402428300170096069009156256406580096931402046727400685425912888309210614350249018034050615499...', 'output': ['799999999999999999999999999999999999999999999999999999999999999999999999999988888888888888888888888888888888888888888888888888888888888888888888888888888888888887777777777777777777777777777777777777777777777777777777777777777777777777777777777777766666666...']}, {'input': '118861818338861138111186886363613831333331881818331683136111381138631888116833136168861816161316863681838318633663311338831883813661338831311113811163818813313861118166386316338631181311863883886688611336163131168686383633686336681336368383888168661316383...', 'output': ['111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111...']}, {'input': '424369443273224402109533159584813753236724119563919158216315260024827143618417153820604496406767510606415982287584601153429743858290968389908888654981242132604820339119568077688773245775414356902898316419529326053782202306127328550709473108685596727932596...', 'output': ['998888888443322999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999988888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888877777777777777777777777777777777777777777...']}, {'input': '543721413083809813239312318706938398629902170493143309662249968291503783827973782981262606597857636075415733386608477307347053676935397844623478808206246610558512724971379172127627325363807323453544712388000354227505502390222387456955220186370020272929343...', 'output': ['888888888888888888888888888666666666666664444444444444444444444444444444444444444444444999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '494484798448449989747788899887478488447479778899988849898974898499779777447898874948778778794499878444474897784477748898479874898484847994789498999898748787994944784884889888847948789877898478898884487497949789477948944998979749449744898479849479448748749...', 'output': ['444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444...']}, {'input': '768875493050362262424937630205072183006598021809915666454104470134162800349693910357769388028358344946729753346937512197933136142462916545387568584142708581398089997090179344928312146370284167730332179681068289257480116501796124255236917125164913691526846...', 'output': ['777777777777777777777777777777777777777777777777777774444433333333333333333333333333333333333331111111111111111111111111111119999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '618503701470787938430159270700920043088568798752977016268311510308800008568086582227485008027980997407232060729235151582831865427634654532900908045812388957060002147805896304933530052643740213081408722063308301032009235939394742367619160354754787409901009...', 'output': ['099999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '996567508256392907779963976214778662129192439816062498936960032019203150387856989605748530266751236079202974347456861420599870218373801273985387191603240725512328905603233503795409316678681946049868631603016962364319358348789811384392717466779220595109890...', 'output': ['777777777777777777777776666666666666666666666666666666666666666666666666666666444411111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111119999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '939909984723040339760855074545615549115883377372734895737632651300822327167836845624954034723005941661159452657730383313625878977889186477527363246401511918354628513480575844734933870789513466048082915952523354891853891047530457067949393965822066701637601...', 'output': ['777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777766666666666666644444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444111111111111111111111111111111111...']}, {'input': '867796789769879678986997769896698676666876766787778968766677796987786886699977896977678688668766796666688699897666667697777977876996669799999877977789767676768676976978698787988799777689999967887888989698989678677898766866788999698979879678976678797769698...', 'output': ['666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666...']}, {'input': '916997137771085429630725687874174369890412487544818827143895173120546526709636787925442388311150285546126817526142825984127734953914702222648051821815185795367601722202785920095681116817848246108323247682877337175160624702816541056769336565997775375222966...', 'output': ['699999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '640278611768890744362972467683186153338018066222032608050178099280583494673848890684534942718356654651112038204272353262447503068902549948645427176667487998131528312579875125756941475797637403869316145547177628844846624904222223242587580822440302774400370...', 'output': ['666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666444444444444444444444444444444444444444444444444444444444444444444444444442222222222222222222222222222222222...']}, {'input': '207058471595814593142194324287719073695818825353214911377325731777419885265426804186139068893791545956681332655802337587371787565962328522140490893818681477114869046601022698917025419773618574190685184947433584429439334693598519600260463583848863368936627...', 'output': ['666664444444444444444444444422222222222222222222222222111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111119999999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '883086188908405113764309577466765409198614686963864880628835583426469570579799720463615283727710407986155104364041101447691859506617867062228378469783634726665541047565145542426398439840066265273828267856830426115226809047244485337416242153859046147316013...', 'output': ['999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777766666666666666666666666666666666666666666666666666666666666666666...']}, {'input': '830535330204204513281271347858954094002009700230995588005129030234553888654250432410001514159091541870713764711606930197882957992183824459644953393772545072268860032022455055250703009355878775165587474735227103796580625721132356809402451990719775209805210...', 'output': ['899999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '670458381839158872546918155035410290723995709835835884171740130076627888156040009003811091601428994865723558442360659415862182416152346983023638060796538525579139633893217422543817079703442503714786245663610334683732726529435164149462375367427362110734477...', 'output': ['444444444444444444444444444444444444444444444444444444333333333333333333333333333333333333333333333333333333333333333333333333333333222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222211...']}, {'input': '968993869888966389886383963696669968398689369933938696833889996633886999693688886966383333686886688638668663983996333399686636963389963836888699838996899869936683638888366389339368838989396366996836939668833896969838633839883683998838889869868899636698696...', 'output': ['333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333...']}, {'input': '602389969512055789601314071118768050344813867987458862405007780380185486569776935326322277096082686160610672788611331060706972827296322725538949689991906893134411353706830994687992105904244457636674999443614427484770210245681916498991186132712473483819617...', 'output': ['999999999999999999999988888888888888888888888888888888888888888888888888888888888888888884444444444444444444444444444444444444444444444444444444444444444444444444433333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333...']}, {'input': '909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909...', 'output': ['599999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...']}, {'input': '126254092095959027850416433832655426981078106611255074552648515499659121878087190358961591096171231715312122879634738062251247629492483043125748065235158236635181790420183641430917548189219521011748435487445986824532619160561716073648857875108255827252014...', 'output': ['888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888884444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444...']}]","id":167,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = input()\\n    digits = sorted(list(n))\\n    counts = {}\\n    for digit in digits:\\n        counts[digit] = counts.get(digit, 0) + 1\\n\\n    best_a = ''\\n    best_b = ''\\n    max_zeros = -1\\n\\n    import itertools\\n    for perm1 in itertools.permutations(digits):\\n        num1_str = ''.join(perm1)\\n        remaining_digits = digits[:] \\n        for digit in num1_str:\\n            remaining_digits.remove(digit)\\n        \\n        for perm2 in itertools.permutations(remaining_digits):\\n            num2_str = ''.join(perm2)\\n            sum_val = int(num1_str) + int(num2_str)\\n            zeros = 0\\n            s = str(sum_val)\\n            for i in range(len(s) - 1, -1, -1):\\n                if s[i] == '0':\\n                    zeros += 1\\n                else:\\n                    break\\n            \\n            if zeros > max_zeros:\\n                max_zeros = zeros\\n                best_a = num1_str\\n                best_b = num2_str\\n\\n    if best_a == '' and best_b == '':\\n        print(n)\\n        print(n)\\n        return\\n\\n    print(best_a)\\n    print(best_b)\\n\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n = raw_input()\\n    digits = sorted(list(n))\\n    counts = {}\\n    for digit in digits:\\n        counts[digit] = counts.get(digit, 0) + 1\\n\\n    best_a = ''\\n    best_b = ''\\n    max_zeros = -1\\n\\n    import itertools\\n    for perm1 in itertools.permutations(digits):\\n        num1_str = ''.join(perm1)\\n        remaining_digits = digits[:] \\n        for digit in num1_str:\\n            remaining_digits.remove(digit)\\n        \\n        for perm2 in itertools.permutations(remaining_digits):\\n            num2_str = ''.join(perm2)\\n            sum_val = int(num1_str) + int(num2_str)\\n            zeros = 0\\n            s = str(sum_val)\\n            for i in range(len(s) - 1, -1, -1):\\n                if s[i] == '0':\\n                    zeros += 1\\n                else:\\n                    break\\n            \\n            if zeros > max_zeros:\\n                max_zeros = zeros\\n                best_a = num1_str\\n                best_b = num2_str\\n\\n    if best_a == '' and best_b == '':\\n        print n\\n        print n\\n        return\\n\\n    print best_a\\n    print best_b\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = input()\\n    digits = sorted(list(n))\\n    counts = {}\\n    for digit in digits:\\n        counts[digit] = counts.get(digit, 0) + 1\\n\\n    best_a = \\\"\\\"\\n    best_b = \\\"\\\"\\n    max_zeros = -1\\n\\n    for i in range(1 << len(digits)):  # Iterate through all possible permutations\\n        a_digits = []\\n        b_digits = []\\n        a_counts = counts.copy()\\n        b_counts = counts.copy()\\n        \\n        for j in range(len(digits)):\\n            if (i >> j) & 1:\\n                a_digits.append(digits[j])\\n                a_counts[digits[j]] -= 1\\n            else:\\n                b_digits.append(digits[j])\\n                b_counts[digits[j]] -= 1\\n        \\n        if len(a_digits) != 0 and len(b_digits) != 0:\\n          a_str = \\\"\\\".join(a_digits)\\n          b_str = \\\"\\\".join(b_digits)\\n        elif len(a_digits) != 0:\\n          a_str = \\\"\\\".join(a_digits)\\n          b_str = \\\"\\\"\\n        elif len(b_digits) != 0:\\n          a_str = \\\"\\\"\\n          b_str = \\\"\\\".join(b_digits)\\n        else:\\n          continue\\n\\n        if len(a_str) == 0:\\n            a_str = \\\"0\\\"\\n        if len(b_str) == 0:\\n            b_str = \\\"0\\\"\\n\\n        import itertools\\n        import sys\\n        \\n        best_a_local = \\\"\\\"\\n        best_b_local = \\\"\\\"\\n        max_zeros_local = -1\\n        \\n        for a_perm in itertools.permutations(a_str):\\n            for b_perm in itertools.permutations(b_str):\\n                a_num_str = \\\"\\\".join(a_perm)\\n                b_num_str = \\\"\\\".join(b_perm)\\n\\n                try:\\n                  a_num = int(a_num_str)\\n                  b_num = int(b_num_str)\\n                except ValueError:\\n                  continue\\n                \\n                sum_val = a_num + b_num\\n                sum_str = str(sum_val)\\n                zeros = 0\\n                for k in reversed(sum_str):\\n                    if k == '0':\\n                        zeros += 1\\n                    else:\\n                        break\\n\\n                if zeros > max_zeros_local:\\n                    max_zeros_local = zeros\\n                    best_a_local = a_num_str\\n                    best_b_local = b_num_str\\n        \\n        if max_zeros_local > max_zeros:\\n            max_zeros = max_zeros_local\\n            best_a = best_a_local\\n            best_b = best_b_local\\n\\n    if max_zeros == -1:\\n        best_a = \\\"\\\".join(digits)\\n        best_b = \\\"\\\".join(digits)\\n\\n    print(best_a)\\n    print(best_b)\\n\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = input()\\n    digits = sorted(list(n))\\n    counts = {}\\n    for digit in digits:\\n        counts[digit] = counts.get(digit, 0) + 1\\n\\n    best_a = ''\\n    best_b = ''\\n    max_zeros = -1\\n\\n    import itertools\\n    for perm1 in itertools.permutations(digits):\\n        num1_str = ''.join(perm1)\\n        remaining_digits = digits[:] \\n        for digit in num1_str:\\n            remaining_digits.remove(digit)\\n        \\n        for perm2 in itertools.permutations(remaining_digits):\\n            num2_str = ''.join(perm2)\\n            sum_val = int(num1_str) + int(num2_str)\\n            zeros = 0\\n            s = str(sum_val)\\n            for i in range(len(s) - 1, -1, -1):\\n                if s[i] == '0':\\n                    zeros += 1\\n                else:\\n                    break\\n            \\n            if zeros > max_zeros:\\n                max_zeros = zeros\\n                best_a = num1_str\\n                best_b = num2_str\\n\\n    if best_a == '' and best_b == '':\\n        print(n)\\n        print(n)\\n        return\\n\\n    print(best_a)\\n    print(best_b)\\n\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n = raw_input()\\n    digits = sorted(list(n))\\n    counts = {}\\n    for digit in digits:\\n        counts[digit] = counts.get(digit, 0) + 1\\n\\n    best_a = ''\\n    best_b = ''\\n    max_zeros = -1\\n\\n    import itertools\\n    for perm1 in itertools.permutations(digits):\\n        num1_str = ''.join(perm1)\\n        remaining_digits = digits[:] \\n        for digit in num1_str:\\n            remaining_digits.remove(digit)\\n        \\n        for perm2 in itertools.permutations(remaining_digits):\\n            num2_str = ''.join(perm2)\\n            sum_val = int(num1_str) + int(num2_str)\\n            zeros = 0\\n            s = str(sum_val)\\n            for i in range(len(s) - 1, -1, -1):\\n                if s[i] == '0':\\n                    zeros += 1\\n                else:\\n                    break\\n            \\n            if zeros > max_zeros:\\n                max_zeros = zeros\\n                best_a = num1_str\\n                best_b = num2_str\\n\\n    if best_a == '' and best_b == '':\\n        print n\\n        print n\\n        return\\n\\n    print best_a\\n    print best_b\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = input()\\n    digits = sorted(list(n))\\n    counts = {}\\n    for digit in digits:\\n        counts[digit] = counts.get(digit, 0) + 1\\n\\n    best_a = \\\"\\\"\\n    best_b = \\\"\\\"\\n    max_zeros = -1\\n\\n    for i in range(1 << len(digits)):  # Iterate through all possible permutations\\n        a_digits = []\\n        b_digits = []\\n        a_counts = counts.copy()\\n        b_counts = counts.copy()\\n        \\n        for j in range(len(digits)):\\n            if (i >> j) & 1:\\n                a_digits.append(digits[j])\\n                a_counts[digits[j]] -= 1\\n            else:\\n                b_digits.append(digits[j])\\n                b_counts[digits[j]] -= 1\\n        \\n        if len(a_digits) != 0 and len(b_digits) != 0:\\n          a_str = \\\"\\\".join(a_digits)\\n          b_str = \\\"\\\".join(b_digits)\\n        elif len(a_digits) != 0:\\n          a_str = \\\"\\\".join(a_digits)\\n          b_str = \\\"\\\"\\n        elif len(b_digits) != 0:\\n          a_str = \\\"\\\"\\n          b_str = \\\"\\\".join(b_digits)\\n        else:\\n          continue\\n\\n        if len(a_str) == 0:\\n            a_str = \\\"0\\\"\\n        if len(b_str) == 0:\\n            b_str = \\\"0\\\"\\n\\n        import itertools\\n        import sys\\n        \\n        best_a_local = \\\"\\\"\\n        best_b_local = \\\"\\\"\\n        max_zeros_local = -1\\n        \\n        for a_perm in itertools.permutations(a_str):\\n            for b_perm in itertools.permutations(b_str):\\n                a_num_str = \\\"\\\".join(a_perm)\\n                b_num_str = \\\"\\\".join(b_perm)\\n\\n                try:\\n                  a_num = int(a_num_str)\\n                  b_num = int(b_num_str)\\n                except ValueError:\\n                  continue\\n                \\n                sum_val = a_num + b_num\\n                sum_str = str(sum_val)\\n                zeros = 0\\n                for k in reversed(sum_str):\\n                    if k == '0':\\n                        zeros += 1\\n                    else:\\n                        break\\n\\n                if zeros > max_zeros_local:\\n                    max_zeros_local = zeros\\n                    best_a_local = a_num_str\\n                    best_b_local = b_num_str\\n        \\n        if max_zeros_local > max_zeros:\\n            max_zeros = max_zeros_local\\n            best_a = best_a_local\\n            best_b = best_b_local\\n\\n    if max_zeros == -1:\\n        best_a = \\\"\\\".join(digits)\\n        best_b = \\\"\\\".join(digits)\\n\\n    print(best_a)\\n    print(best_b)\\n\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"Little boy Gerald studies at school which is quite far from his house. That's why he has to go there by bus every day. The way from home to school is represented by a segment of a straight line; the segment contains exactly n\u2009+\u20091 bus stops. All of them are numbered with integers from 0 to n in the order in which they follow from Gerald's home. The bus stop by Gerald's home has number 0 and the bus stop by the school has number n.There are m buses running between the house and the school: the i-th bus goes from stop si to ti (si\u2009&lt;\u2009ti), visiting all the intermediate stops in the order in which they follow on the segment. Besides, Gerald's no idiot and he wouldn't get off the bus until it is still possible to ride on it closer to the school (obviously, getting off would be completely pointless). In other words, Gerald can get on the i-th bus on any stop numbered from si to ti\u2009-\u20091 inclusive, but he can get off the i-th bus only on the bus stop ti.Gerald can't walk between the bus stops and he also can't move in the direction from the school to the house.Gerald wants to know how many ways he has to get from home to school. Tell him this number. Two ways are considered different if Gerald crosses some segment between the stops on different buses. As the number of ways can be too much, find the remainder of a division of this number by 1000000007 (109\u2009+\u20097).","input_specification":"The first line contains two space-separated integers: n and m (1\u2009\u2264\u2009n\u2009\u2264\u2009109,\u20090\u2009\u2264\u2009m\u2009\u2264\u2009105). Then follow m lines each containing two integers si,\u2009ti. They are the numbers of starting stops and end stops of the buses (0\u2009\u2264\u2009si\u2009&lt;\u2009ti\u2009\u2264\u2009n).","output_specification":"Print the only number \u2014 the number of ways to get to the school modulo 1000000007 (109\u2009+\u20097).","notes":"NoteThe first test has the only variant to get to school: first on bus number one to the bus stop number one; then on bus number two to the bus stop number two.In the second test no bus goes to the third bus stop, where the school is positioned. Thus, the correct answer is 0.In the third test Gerald can either get or not on any of the first four buses to get closer to the school. Thus, the correct answer is 24\u2009=\u200916.","sample_inputs":["2 2\n0 1\n1 2","3 2\n0 1\n1 2","5 5\n0 1\n0 2\n0 3\n0 4\n0 5"],"sample_outputs":["1","0","16"],"src_uid":"cb47d710361979de0f975cc34fc22c7a","lang_cluster":"Python","difficulty":1700,"human_solution":"a,b=map(int,input().split())\nz=[]\ng=10**9+7\ndef f():\n    return map(int,input().split())\nif b==0:\n    print (0)\nelse:\n    s=set()\n    for i in range(b):\n        x,y=f()\n        z.append((x,y))\n        s.add(x)\n        s.add(y)\n    s.add (0)\n    s.add (a)\n    s = sorted(list(s))\n    a=len(s)-1\n    s=dict([(s[j],j) for j in range(a+1)])\n    z=[(s[x],s[y]) for (x,y)in z]\n    z.sort(key=lambda x:x[1])\n    x=[0]*(a+1)\n    x[0]=1\n    y=[0]*(a+2)\n    i=0\n    j=0\n    for i in range (a+1):\n        while j<b and z[j][1]==i:\n            q,p=z[j]\n            x[p]+=y[p]-y[q]\n            j+=1\n        y[i+1]=y[i]+x[i]\n        y[i+1]%=g\n    print (x[a]%g)","testcases":"[{'input': '2 2\\r\\n0 1\\r\\n1 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 2\\r\\n0 1\\r\\n1 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 5\\r\\n0 1\\r\\n0 2\\r\\n0 3\\r\\n0 4\\r\\n0 5\\r\\n', 'output': ['16\\r\\n']}, {'input': '3 3\\r\\n1 2\\r\\n2 3\\r\\n1 3\\r\\n', 'output': ['0\\r\\n']}, {'input': '10 10\\r\\n0 1\\r\\n0 2\\r\\n0 3\\r\\n0 4\\r\\n0 5\\r\\n0 6\\r\\n0 7\\r\\n0 8\\r\\n0 9\\r\\n0 10\\r\\n', 'output': ['512\\r\\n']}, {'input': '6 6\\r\\n3 4\\r\\n2 3\\r\\n3 5\\r\\n0 1\\r\\n1 2\\r\\n3 6\\r\\n', 'output': ['4\\r\\n']}, {'input': '7 7\\r\\n0 1\\r\\n1 3\\r\\n2 3\\r\\n4 6\\r\\n5 7\\r\\n4 5\\r\\n5 7\\r\\n', 'output': ['0\\r\\n']}, {'input': '1000000000 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '8 8\\r\\n0 1\\r\\n4 5\\r\\n7 8\\r\\n3 4\\r\\n2 3\\r\\n6 7\\r\\n5 6\\r\\n1 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '6 1\\r\\n0 6\\r\\n', 'output': ['1\\r\\n']}, {'input': '6 4\\r\\n0 3\\r\\n1 2\\r\\n4 5\\r\\n4 6\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 15\\r\\n0 1\\r\\n0 2\\r\\n0 3\\r\\n0 4\\r\\n0 5\\r\\n1 2\\r\\n1 3\\r\\n1 4\\r\\n1 5\\r\\n2 3\\r\\n2 4\\r\\n2 5\\r\\n3 4\\r\\n3 5\\r\\n4 5\\r\\n', 'output': ['360\\r\\n']}, {'input': '5 3\\r\\n0 1\\r\\n2 3\\r\\n4 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '5 15\\r\\n0 1\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n3 4\\r\\n4 5\\r\\n4 5\\r\\n', 'output': ['120\\r\\n']}, {'input': '8 94\\r\\n2 8\\r\\n3 8\\r\\n5 6\\r\\n1 2\\r\\n4 6\\r\\n2 7\\r\\n2 4\\r\\n3 5\\r\\n0 2\\r\\n0 1\\r\\n7 8\\r\\n0 7\\r\\n0 5\\r\\n1 4\\r\\n2 7\\r\\n3 4\\r\\n6 7\\r\\n1 5\\r\\n4 6\\r\\n4 6\\r\\n2 8\\r\\n4 5\\r\\n0 1\\r\\n3 8\\r\\n5 8\\r\\n1 3\\r\\n3 4\\r\\n1 6\\r\\n1 6\\r\\n1 7\\r\\n1 7\\r\\n1 4\\r\\n5 6\\r\\n5 7\\r\\n2 4\\r\\n3 8\\r\\n0 1\\r\\n0 4\\r\\n4 8\\r\\n1 8\\r\\n3 8\\r\\n2 4\\r\\n5 7\\r\\n2 4\\r\\n2 7\\r\\n3 8\\r\\n3 7\\r\\n0 6\\r\\n1 2\\r\\n0 2\\r\\n2 7\\r\\n0 4\\r\\n0 3\\r\\n3 6\\r\\n0 2\\r\\n5 7\\r\\n4 8\\r\\n3 6\\r\\n0 3\\r\\n3 5\\r\\n2 3\\r\\n1 8\\r\\n3 7\\r\\n0 6\\r\\n4 6\\r\\n1 8\\r\\n1 2\\r\\n3 5\\r\\n1 5\\r\\n1 2\\r\\n0 2\\r\\n0 3\\r\\n4 7\\r\\n1 4\\r\\n2 5\\r\\n5 8\\r\\n0 3\\r\\n5 7\\r\\n5 8\\r\\n0 2\\r\\n1 5\\r\\n4 6\\r\\n3 6\\r\\n5 6\\r\\n0 6\\r\\n1 7\\r\\n7 8\\r\\n2 7\\r\\n2 4\\r\\n1 7\\r\\n0 7\\r\\n1 6\\r\\n3 8\\r\\n0 7\\r\\n', 'output': ['203624961\\r\\n']}, {'input': '97 53\\r\\n21 34\\r\\n19 95\\r\\n0 6\\r\\n28 40\\r\\n26 41\\r\\n39 41\\r\\n47 85\\r\\n32 46\\r\\n2 17\\r\\n55 73\\r\\n18 67\\r\\n36 85\\r\\n77 96\\r\\n77 97\\r\\n1 53\\r\\n12 49\\r\\n9 71\\r\\n29 92\\r\\n35 89\\r\\n40 43\\r\\n5 78\\r\\n13 92\\r\\n2 97\\r\\n11 22\\r\\n4 6\\r\\n22 92\\r\\n60 87\\r\\n25 47\\r\\n10 59\\r\\n51 70\\r\\n13 95\\r\\n27 43\\r\\n5 71\\r\\n48 73\\r\\n82 94\\r\\n45 51\\r\\n85 97\\r\\n51 89\\r\\n15 66\\r\\n44 80\\r\\n78 93\\r\\n65 84\\r\\n9 75\\r\\n28 30\\r\\n39 69\\r\\n50 89\\r\\n41 77\\r\\n14 31\\r\\n12 97\\r\\n69 86\\r\\n15 18\\r\\n14 56\\r\\n38 47\\r\\n', 'output': ['478604297\\r\\n']}, {'input': '33 5\\r\\n17 18\\r\\n5 27\\r\\n18 29\\r\\n12 24\\r\\n14 31\\r\\n', 'output': ['0\\r\\n']}, {'input': '93 69\\r\\n9 92\\r\\n31 37\\r\\n58 83\\r\\n28 93\\r\\n36 44\\r\\n22 90\\r\\n61 88\\r\\n76 83\\r\\n19 85\\r\\n25 87\\r\\n55 84\\r\\n45 47\\r\\n5 27\\r\\n54 82\\r\\n4 65\\r\\n12 81\\r\\n49 55\\r\\n16 52\\r\\n16 34\\r\\n34 44\\r\\n17 36\\r\\n62 64\\r\\n7 34\\r\\n19 21\\r\\n16 73\\r\\n3 55\\r\\n12 62\\r\\n49 91\\r\\n2 36\\r\\n47 65\\r\\n17 37\\r\\n70 80\\r\\n52 71\\r\\n59 77\\r\\n1 17\\r\\n23 81\\r\\n15 67\\r\\n38 67\\r\\n14 48\\r\\n70 82\\r\\n33 51\\r\\n31 88\\r\\n28 51\\r\\n10 54\\r\\n6 71\\r\\n37 88\\r\\n5 60\\r\\n2 91\\r\\n88 91\\r\\n30 91\\r\\n17 58\\r\\n12 72\\r\\n14 77\\r\\n34 90\\r\\n15 42\\r\\n44 47\\r\\n54 87\\r\\n84 90\\r\\n3 49\\r\\n26 71\\r\\n40 87\\r\\n71 74\\r\\n20 60\\r\\n86 92\\r\\n76 83\\r\\n40 80\\r\\n3 31\\r\\n18 33\\r\\n5 82\\r\\n', 'output': ['0\\r\\n']}, {'input': '10 59\\r\\n4 7\\r\\n4 8\\r\\n0 4\\r\\n5 7\\r\\n6 9\\r\\n7 8\\r\\n0 9\\r\\n6 7\\r\\n4 9\\r\\n1 10\\r\\n5 6\\r\\n1 4\\r\\n0 4\\r\\n4 9\\r\\n3 6\\r\\n1 7\\r\\n4 9\\r\\n3 7\\r\\n1 2\\r\\n0 1\\r\\n4 7\\r\\n0 8\\r\\n8 10\\r\\n0 3\\r\\n2 5\\r\\n0 7\\r\\n1 8\\r\\n2 10\\r\\n0 3\\r\\n0 9\\r\\n7 8\\r\\n2 6\\r\\n1 6\\r\\n2 10\\r\\n3 10\\r\\n3 4\\r\\n0 2\\r\\n0 8\\r\\n3 8\\r\\n9 10\\r\\n1 6\\r\\n7 10\\r\\n6 9\\r\\n2 10\\r\\n2 10\\r\\n3 5\\r\\n9 10\\r\\n4 10\\r\\n0 8\\r\\n5 9\\r\\n4 6\\r\\n0 10\\r\\n6 9\\r\\n1 2\\r\\n6 7\\r\\n1 5\\r\\n0 6\\r\\n0 7\\r\\n0 6\\r\\n', 'output': ['28167561\\r\\n']}, {'input': '66 35\\r\\n49 55\\r\\n9 30\\r\\n28 54\\r\\n44 62\\r\\n55 61\\r\\n1 21\\r\\n6 37\\r\\n8 10\\r\\n26 33\\r\\n19 37\\r\\n12 23\\r\\n24 42\\r\\n34 64\\r\\n8 56\\r\\n36 40\\r\\n16 58\\r\\n21 30\\r\\n16 36\\r\\n36 38\\r\\n19 45\\r\\n26 49\\r\\n6 62\\r\\n1 11\\r\\n22 48\\r\\n33 38\\r\\n8 41\\r\\n29 53\\r\\n58 60\\r\\n27 66\\r\\n2 19\\r\\n48 53\\r\\n25 47\\r\\n48 56\\r\\n61 65\\r\\n45 46\\r\\n', 'output': ['0\\r\\n']}, {'input': '31 26\\r\\n15 21\\r\\n4 25\\r\\n5 19\\r\\n16 18\\r\\n5 23\\r\\n3 25\\r\\n7 18\\r\\n24 31\\r\\n6 9\\r\\n8 25\\r\\n18 29\\r\\n12 27\\r\\n15 16\\r\\n12 20\\r\\n2 7\\r\\n14 26\\r\\n13 22\\r\\n5 19\\r\\n5 24\\r\\n15 23\\r\\n4 7\\r\\n8 12\\r\\n14 26\\r\\n28 30\\r\\n1 30\\r\\n24 31\\r\\n', 'output': ['0\\r\\n']}, {'input': '69 68\\r\\n49 62\\r\\n3 38\\r\\n1 43\\r\\n42 58\\r\\n12 64\\r\\n1 37\\r\\n35 59\\r\\n7 43\\r\\n2 29\\r\\n8 65\\r\\n19 47\\r\\n4 27\\r\\n41 58\\r\\n25 60\\r\\n17 37\\r\\n34 40\\r\\n16 38\\r\\n28 52\\r\\n35 63\\r\\n6 65\\r\\n57 58\\r\\n38 50\\r\\n8 28\\r\\n6 8\\r\\n10 44\\r\\n48 63\\r\\n2 42\\r\\n46 58\\r\\n26 62\\r\\n37 45\\r\\n7 22\\r\\n0 21\\r\\n19 48\\r\\n6 67\\r\\n6 15\\r\\n28 38\\r\\n19 22\\r\\n16 20\\r\\n27 40\\r\\n0 3\\r\\n33 69\\r\\n2 66\\r\\n10 24\\r\\n29 48\\r\\n26 69\\r\\n15 53\\r\\n24 34\\r\\n34 58\\r\\n20 47\\r\\n21 23\\r\\n38 68\\r\\n34 45\\r\\n60 68\\r\\n7 15\\r\\n21 34\\r\\n16 30\\r\\n14 58\\r\\n2 62\\r\\n24 66\\r\\n13 27\\r\\n24 40\\r\\n32 37\\r\\n10 37\\r\\n22 40\\r\\n44 50\\r\\n27 31\\r\\n0 44\\r\\n20 32\\r\\n', 'output': ['622740890\\r\\n']}, {'input': '1 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '68 74\\r\\n51 54\\r\\n3 22\\r\\n12 24\\r\\n3 27\\r\\n32 42\\r\\n36 55\\r\\n60 64\\r\\n1 4\\r\\n4 23\\r\\n11 64\\r\\n54 62\\r\\n50 56\\r\\n21 34\\r\\n27 63\\r\\n15 54\\r\\n28 61\\r\\n13 57\\r\\n39 53\\r\\n12 32\\r\\n32 40\\r\\n33 67\\r\\n55 61\\r\\n33 67\\r\\n30 37\\r\\n15 49\\r\\n27 45\\r\\n21 41\\r\\n8 42\\r\\n24 63\\r\\n40 48\\r\\n28 41\\r\\n30 67\\r\\n0 4\\r\\n7 15\\r\\n27 59\\r\\n60 62\\r\\n25 65\\r\\n30 31\\r\\n38 67\\r\\n24 43\\r\\n14 64\\r\\n26 46\\r\\n8 12\\r\\n34 41\\r\\n32 67\\r\\n11 42\\r\\n11 53\\r\\n45 55\\r\\n2 47\\r\\n7 51\\r\\n30 54\\r\\n21 44\\r\\n7 52\\r\\n40 62\\r\\n16 50\\r\\n10 41\\r\\n26 65\\r\\n16 51\\r\\n6 29\\r\\n1 31\\r\\n48 54\\r\\n9 42\\r\\n33 45\\r\\n19 59\\r\\n25 37\\r\\n21 62\\r\\n20 58\\r\\n23 59\\r\\n12 61\\r\\n2 46\\r\\n19 49\\r\\n44 60\\r\\n1 20\\r\\n19 66\\r\\n', 'output': ['0\\r\\n']}, {'input': '79 68\\r\\n26 47\\r\\n55 70\\r\\n5 40\\r\\n7 45\\r\\n16 21\\r\\n31 38\\r\\n19 62\\r\\n40 55\\r\\n42 78\\r\\n60 61\\r\\n43 69\\r\\n50 73\\r\\n3 77\\r\\n2 45\\r\\n2 29\\r\\n10 58\\r\\n2 11\\r\\n62 76\\r\\n57 70\\r\\n65 73\\r\\n37 67\\r\\n9 24\\r\\n4 28\\r\\n8 16\\r\\n31 44\\r\\n10 66\\r\\n47 70\\r\\n19 45\\r\\n17 28\\r\\n5 36\\r\\n9 68\\r\\n2 35\\r\\n55 77\\r\\n51 71\\r\\n1 59\\r\\n6 33\\r\\n21 53\\r\\n39 49\\r\\n59 70\\r\\n17 44\\r\\n18 64\\r\\n49 78\\r\\n0 52\\r\\n24 56\\r\\n65 79\\r\\n19 51\\r\\n42 77\\r\\n37 78\\r\\n20 39\\r\\n47 56\\r\\n19 78\\r\\n50 78\\r\\n3 67\\r\\n37 47\\r\\n5 27\\r\\n40 51\\r\\n24 29\\r\\n50 54\\r\\n45 50\\r\\n13 76\\r\\n29 31\\r\\n0 28\\r\\n26 36\\r\\n21 44\\r\\n71 77\\r\\n55 58\\r\\n38 61\\r\\n22 44\\r\\n', 'output': ['317376853\\r\\n']}, {'input': '45 51\\r\\n2 12\\r\\n6 18\\r\\n4 17\\r\\n8 25\\r\\n16 24\\r\\n3 23\\r\\n29 31\\r\\n31 40\\r\\n7 26\\r\\n5 6\\r\\n35 37\\r\\n1 36\\r\\n9 45\\r\\n18 36\\r\\n12 27\\r\\n5 15\\r\\n11 16\\r\\n19 29\\r\\n8 23\\r\\n1 27\\r\\n0 30\\r\\n25 38\\r\\n21 44\\r\\n34 39\\r\\n10 41\\r\\n4 16\\r\\n11 36\\r\\n0 8\\r\\n15 38\\r\\n3 33\\r\\n11 31\\r\\n2 33\\r\\n5 34\\r\\n24 28\\r\\n7 32\\r\\n15 25\\r\\n2 27\\r\\n16 44\\r\\n31 40\\r\\n35 45\\r\\n13 38\\r\\n29 42\\r\\n18 23\\r\\n8 25\\r\\n13 21\\r\\n3 39\\r\\n3 41\\r\\n5 6\\r\\n13 21\\r\\n11 20\\r\\n23 42\\r\\n', 'output': ['493168232\\r\\n']}, {'input': '5 31\\r\\n0 2\\r\\n3 4\\r\\n3 5\\r\\n2 4\\r\\n1 3\\r\\n1 2\\r\\n2 5\\r\\n1 5\\r\\n0 2\\r\\n2 5\\r\\n1 4\\r\\n0 2\\r\\n1 3\\r\\n0 5\\r\\n2 3\\r\\n1 5\\r\\n1 2\\r\\n2 3\\r\\n0 1\\r\\n0 1\\r\\n2 4\\r\\n0 4\\r\\n1 2\\r\\n0 3\\r\\n1 2\\r\\n3 4\\r\\n0 2\\r\\n0 4\\r\\n1 2\\r\\n2 5\\r\\n1 5\\r\\n', 'output': ['8595\\r\\n']}, {'input': '81 52\\r\\n33 48\\r\\n59 61\\r\\n37 77\\r\\n58 73\\r\\n29 54\\r\\n1 17\\r\\n8 29\\r\\n50 73\\r\\n7 26\\r\\n35 41\\r\\n22 26\\r\\n9 22\\r\\n0 11\\r\\n40 73\\r\\n25 57\\r\\n35 55\\r\\n36 54\\r\\n29 41\\r\\n56 66\\r\\n42 77\\r\\n29 48\\r\\n41 66\\r\\n25 36\\r\\n2 55\\r\\n58 64\\r\\n0 61\\r\\n23 31\\r\\n9 61\\r\\n27 45\\r\\n2 71\\r\\n14 29\\r\\n4 31\\r\\n0 35\\r\\n31 77\\r\\n21 39\\r\\n0 54\\r\\n46 68\\r\\n18 62\\r\\n41 45\\r\\n12 28\\r\\n59 66\\r\\n39 71\\r\\n10 59\\r\\n29 77\\r\\n16 48\\r\\n13 46\\r\\n30 73\\r\\n2 41\\r\\n42 55\\r\\n19 61\\r\\n28 29\\r\\n20 42\\r\\n', 'output': ['0\\r\\n']}, {'input': '84 50\\r\\n33 46\\r\\n19 40\\r\\n51 64\\r\\n37 45\\r\\n35 81\\r\\n44 81\\r\\n6 57\\r\\n57 60\\r\\n14 53\\r\\n15 49\\r\\n4 30\\r\\n35 49\\r\\n2 51\\r\\n8 72\\r\\n15 18\\r\\n49 51\\r\\n14 49\\r\\n50 71\\r\\n41 59\\r\\n28 60\\r\\n61 81\\r\\n9 12\\r\\n34 79\\r\\n5 56\\r\\n60 67\\r\\n21 60\\r\\n39 71\\r\\n31 60\\r\\n13 35\\r\\n16 84\\r\\n17 33\\r\\n48 57\\r\\n36 61\\r\\n50 55\\r\\n5 84\\r\\n66 79\\r\\n61 70\\r\\n42 49\\r\\n19 39\\r\\n47 49\\r\\n3 82\\r\\n59 65\\r\\n8 44\\r\\n71 80\\r\\n66 77\\r\\n8 65\\r\\n1 81\\r\\n7 82\\r\\n50 74\\r\\n10 17\\r\\n', 'output': ['0\\r\\n']}, {'input': '100 68\\r\\n77 89\\r\\n19 71\\r\\n11 46\\r\\n23 70\\r\\n16 47\\r\\n4 61\\r\\n7 96\\r\\n38 74\\r\\n79 95\\r\\n68 75\\r\\n14 86\\r\\n10 55\\r\\n7 13\\r\\n88 99\\r\\n19 21\\r\\n4 94\\r\\n17 83\\r\\n11 16\\r\\n7 50\\r\\n58 96\\r\\n4 58\\r\\n17 72\\r\\n44 56\\r\\n35 91\\r\\n50 88\\r\\n9 37\\r\\n36 52\\r\\n83 89\\r\\n8 16\\r\\n1 80\\r\\n12 75\\r\\n3 27\\r\\n92 93\\r\\n53 88\\r\\n37 49\\r\\n34 78\\r\\n31 66\\r\\n39 55\\r\\n36 94\\r\\n22 67\\r\\n47 85\\r\\n20 58\\r\\n62 98\\r\\n41 89\\r\\n85 96\\r\\n11 73\\r\\n39 95\\r\\n44 68\\r\\n25 33\\r\\n36 45\\r\\n66 70\\r\\n66 93\\r\\n17 97\\r\\n1 71\\r\\n49 53\\r\\n47 54\\r\\n19 95\\r\\n10 12\\r\\n38 57\\r\\n47 68\\r\\n21 70\\r\\n32 93\\r\\n53 71\\r\\n45 59\\r\\n27 48\\r\\n47 63\\r\\n75 76\\r\\n8 57\\r\\n', 'output': ['0\\r\\n']}, {'input': '918949684 6\\r\\n351553415 785588657\\r\\n423490842 845475457\\r\\n351553415 918949684\\r\\n740298829 785588657\\r\\n351328841 610486484\\r\\n423490842 847590951\\r\\n', 'output': ['0\\r\\n']}, {'input': '863261873 5\\r\\n137690029 666186924\\r\\n137690029 379800754\\r\\n515537329 666186924\\r\\n442925959 722302912\\r\\n137690029 863261873\\r\\n', 'output': ['0\\r\\n']}, {'input': '735324925 2\\r\\n642054038 735324925\\r\\n170935185 642054038\\r\\n', 'output': ['0\\r\\n']}, {'input': '977743286 6\\r\\n317778866 395496218\\r\\n395496218 932112884\\r\\n98371691 432544933\\r\\n440553 922085291\\r\\n440553 432544933\\r\\n586988624 922085291\\r\\n', 'output': ['0\\r\\n']}, {'input': '977700285 7\\r\\n386643627 467079072\\r\\n116215943 914856211\\r\\n15183537 386643627\\r\\n424146511 977700285\\r\\n15183537 620050423\\r\\n336304090 947990602\\r\\n116215943 914856211\\r\\n', 'output': ['0\\r\\n']}, {'input': '768016717 4\\r\\n242598247 348534209\\r\\n33560125 170667468\\r\\n348534209 700314158\\r\\n700314158 768016717\\r\\n', 'output': ['0\\r\\n']}, {'input': '814609521 3\\r\\n622460875 697824636\\r\\n283825432 369448402\\r\\n614658965 622460875\\r\\n', 'output': ['0\\r\\n']}, {'input': '931612300 8\\r\\n64655010 186892167\\r\\n25283092 580196656\\r\\n297609123 628681221\\r\\n25283092 186892167\\r\\n186892167 221075230\\r\\n221075230 634105512\\r\\n25283092 156293949\\r\\n86333513 156293949\\r\\n', 'output': ['0\\r\\n']}, {'input': '947714605 4\\r\\n23890708 35992029\\r\\n35992029 947714605\\r\\n93644635 629491402\\r\\n23890708 947714605\\r\\n', 'output': ['0\\r\\n']}, {'input': '768016717 4\\r\\n242598247 348534209\\r\\n33560125 170667468\\r\\n348534209 700314158\\r\\n700314158 768016717\\r\\n', 'output': ['0\\r\\n']}, {'input': '1000000000 2\\r\\n0 500000000\\r\\n500000000 1000000000\\r\\n', 'output': ['1\\r\\n']}]","id":168,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    buses = []\\n    for _ in range(m):\\n        buses.append(list(map(int, input().split())))\\n    \\n    buses.sort(key=lambda x: x[1])\\n    \\n    dp = [0] * (n + 1)\\n    dp[0] = 1\\n    \\n    for i in range(n):\\n        for bus in buses:\\n            s, t = bus\\n            if s <= i < t:\\n                dp[t] = (dp[t] + dp[i]) % 1000000007\\n    \\n    print(dp[n])\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    buses = []\\n    for _ in range(m):\\n        buses.append(list(map(int, input().split())))\\n    \\n    buses.sort(key=lambda x: x[1])\\n    \\n    dp = [0] * (n + 1)\\n    dp[0] = 1\\n    \\n    for i in range(n):\\n        for bus in buses:\\n            s, t = bus\\n            if t == i + 1:\\n                dp[t] = (dp[t] + dp[s]) % 1000000007\\n    \\n    print(dp[n])\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    buses = []\\n    for _ in range(m):\\n        buses.append(list(map(int, input().split())))\\n    \\n    buses.sort(key=lambda x: x[1])\\n    \\n    dp = [0] * (n + 1)\\n    dp[0] = 1\\n    \\n    for i in range(n):\\n        for bus in buses:\\n            s, t = bus\\n            if s <= i < t:\\n                dp[t] = (dp[t] + dp[i]) % 1000000007\\n    \\n    print(dp[n])\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    buses = []\\n    for _ in range(m):\\n        buses.append(list(map(int, input().split())))\\n    \\n    buses.sort(key=lambda x: x[1])\\n    \\n    dp = [0] * (n + 1)\\n    dp[0] = 1\\n    \\n    for i in range(n):\\n        for bus in buses:\\n            s, t = bus\\n            if t == i + 1:\\n                dp[t] = (dp[t] + dp[s]) % 1000000007\\n    \\n    print(dp[n])\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"As a German University in Cairo (GUC) student and a basketball player, Herr Wafa was delighted once he heard the news. GUC is finally participating in the Annual Basketball Competition (ABC). A team is to be formed of n players, all of which are GUC students. However, the team might have players belonging to different departments. There are m departments in GUC, numbered from 1 to m. Herr Wafa's department has number h. For each department i, Herr Wafa knows number si \u2014 how many students who play basketball belong to this department.Herr Wafa was also able to guarantee a spot on the team, using his special powers. But since he hates floating-point numbers, he needs your help at finding the probability that he will have at least one teammate belonging to his department. Note that every possible team containing Herr Wafa is equally probable. Consider all the students different from each other.","input_specification":"The first line contains three integers n, m and h (1\u2009\u2264\u2009n\u2009\u2264\u2009100,\u20091\u2009\u2264\u2009m\u2009\u2264\u20091000,\u20091\u2009\u2264\u2009h\u2009\u2264\u2009m) \u2014 the number of players on the team, the number of departments in GUC and Herr Wafa's department, correspondingly.  The second line contains a single-space-separated list of m integers si (1\u2009\u2264\u2009si\u2009\u2264\u2009100), denoting the number of students in the i-th department. Note that sh includes Herr Wafa.","output_specification":"Print the probability that Herr Wafa will have at least one teammate from his department. If there is not enough basketball players in GUC to participate in ABC, print -1. The answer will be accepted if it has absolute or relative error not exceeding 10\u2009-\u20096.","notes":"NoteIn the first example all 3 players (2 from department 1 and 1 from department 2) must be chosen for the team. Both players from Wafa's departments will be chosen, so he's guaranteed to have a teammate from his department.In the second example, there are not enough players.In the third example, there are three possibilities to compose the team containing Herr Wafa. In two of them the other player from Herr Wafa's department is part of the team.","sample_inputs":["3 2 1\n2 1","3 2 1\n1 1","3 2 1\n2 2"],"sample_outputs":["1","-1","0.666667"],"src_uid":"ffafd385ec79aa28b8d30224baf6bcfe","lang_cluster":"Python","difficulty":1600,"human_solution":"import sys\n\ndef genPrimes(bound):\n\tisPrime = [True] * max(bound + 1, 2)\n\tisPrime[0] = isPrime[1] = False\n\tfor i in range(4, len(isPrime), 2):\n\t\tisPrime[i] = False\n\tfor i in range(3, len(isPrime), 2):\n\t\tif isPrime[i]:\n\t\t\tfor j in range(i * i, len(isPrime), 2 * i):\n\t\t\t\tisPrime[j] = False\n\treturn [x for x in range(len(isPrime)) if isPrime[x]]\n\ndef div(f1, f2):\n\treturn [f1[i] - f2[i] for i in range(len(f1))]\n\ndef fact(primes, n):\n\tres = [0] * len(primes)\n\tfor i in range(len(primes)):\n\t\tq = primes[i]\n\t\twhile n \/ q > 0:\n\t\t\tres[i] += n \/ q\n\t\t\tq *= primes[i]\n\treturn res\n\ndef c(primes, n, k):\n\treturn div(div(fact(primes, n), fact(primes, k)), fact(primes, n - k))\n\n#cin = open(\"input.txt\", \"rt\")\ncin = sys.stdin\nn, m, h = [int(x) for x in cin.readline().split()]\na = [int(x) for x in cin.readline().split()]\n\nh -= 1\nn -= 1\na[h] -= 1\na[h], a[-1] = a[-1], a[h]\nleft, right = sum(a[:-1]), a[-1]\n\nif left + right < n:\n\tprint -1\n\tsys.exit(0)\nif n > left:\n\tprint 1\n\tsys.exit(0)\t\t\n\nprimes = genPrimes(left + right)\n\nnum = c(primes, left, n)\nden = c(primes, left + right, n)\n\nfor i in range(len(primes)):\n\tv = min(num[i], den[i])\n\tnum[i] -= v\n\tden[i] -= v\n\nans = 1.0\nfor i in range(len(primes)):\n\tfor _ in range(num[i]):\n\t\tans *= primes[i]\n\tfor _ in range(den[i]):\n\t\tans \/= primes[i]\nprint \"%.6f\" % (1.0 - ans)\n","testcases":"[{'input': '3 2 1\\r\\n2 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '3 2 1\\r\\n1 1\\r\\n', 'output': ['-1\\r\\n']}, {'input': '3 2 1\\r\\n2 2\\r\\n', 'output': ['0.666667\\r\\n']}, {'input': '3 2 1\\r\\n1 2\\r\\n', 'output': ['0.000000\\r\\n']}, {'input': '6 5 3\\r\\n5 2 3 10 5\\r\\n', 'output': ['0.380435\\r\\n']}, {'input': '7 10 6\\r\\n9 10 2 3 3 6 9 9 3 7\\r\\n', 'output': ['0.420946\\r\\n']}, {'input': '17 5 1\\r\\n10 4 9 6 2\\r\\n', 'output': ['0.999860\\r\\n']}, {'input': '5 8 3\\r\\n9 7 2 5 2 10 3 4\\r\\n', 'output': ['0.097561\\r\\n']}, {'input': '14 8 4\\r\\n6 2 10 6 2 8 4 2\\r\\n', 'output': ['0.885750\\r\\n']}, {'input': '14 9 9\\r\\n9 4 7 2 1 2 4 3 9\\r\\n', 'output': ['0.971132\\r\\n']}, {'input': '46 73 68\\r\\n4 2 6 4 1 9 8 10 7 8 7 2 6 4 7 9 7 9 9 1 5 1 5 1 8 2 10 2 1 7 10 2 8 3 5 3 8 9 10 5 3 4 10 4 9 6 8 1 1 6 3 1 9 6 9 4 4 3 4 5 8 1 6 2 4 10 5 7 2 6 7 4 2\\r\\n', 'output': ['0.525158\\r\\n']}, {'input': '24 55 54\\r\\n8 3 6 4 8 9 10 2 2 6 6 8 3 4 5 6 6 6 10 4 8 2 3 2 2 2 10 7 10 1 6 1 6 8 10 9 2 8 9 6 6 4 1 2 7 2 2 9 3 7 3 7 6 8 4\\r\\n', 'output': ['0.433479\\r\\n']}, {'input': '63 25 24\\r\\n6 7 7 1 2 5 5 9 9 1 9 8 1 2 10 10 5 10 2 9 5 4 9 5 7\\r\\n', 'output': ['0.891560\\r\\n']}, {'input': '44 94 2\\r\\n2 4 10 9 5 1 9 8 1 3 6 5 5 9 4 6 6 2 6 2 4 5 7 3 8 6 5 10 2 1 1 9 1 9 3 1 9 6 2 4 9 7 4 6 1 4 5 2 7 8 2 1 1 1 4 2 5 5 5 8 2 8 2 1 1 8 1 7 7 7 1 2 5 3 8 9 8 7 2 10 5 2 2 8 9 1 4 7 7 2 6 2 8 5\\r\\n', 'output': ['0.259627\\r\\n']}, {'input': '44 35 7\\r\\n10 2 2 6 4 2 8 3 10 1 9 9 7 9 10 6 6 1 4 5 7 4 9 7 10 10 7 9 6 1 7 7 2 10 7\\r\\n', 'output': ['0.793743\\r\\n']}, {'input': '27 47 44\\r\\n8 5 2 5 10 6 7 9 5 10 8 5 9 5 10 5 10 8 5 1 1 2 2 10 3 2 5 9 6 3 3 1 5 4 10 5 2 2 4 4 4 4 4 1 1 3 7\\r\\n', 'output': ['0.000000\\r\\n']}, {'input': '21 67 49\\r\\n4 4 3 5 7 5 10 2 8 5 2 2 6 3 6 2 8 6 2 6 2 9 3 3 4 1 9 9 3 3 6 3 6 7 8 9 10 6 10 5 1 5 2 3 3 9 10 5 10 7 1 6 4 5 4 7 8 5 4 2 9 3 3 5 7 1 10\\r\\n', 'output': ['0.414860\\r\\n']}, {'input': '42 71 67\\r\\n2 1 4 1 10 5 1 8 8 5 2 1 1 7 2 2 8 10 8 2 10 8 2 2 9 6 5 10 7 1 7 2 10 3 5 6 10 10 4 6 10 5 6 6 9 4 1 6 1 8 10 6 1 5 3 2 4 1 8 5 10 10 9 3 10 7 5 9 1 9 3\\r\\n', 'output': ['0.362240\\r\\n']}, {'input': '50 93 28\\r\\n2 5 9 5 5 8 1 3 9 2 7 10 3 1 10 10 8 5 2 7 5 4 3 9 5 2 8 9 10 8 2 7 8 9 8 1 9 8 4 3 3 6 10 10 1 2 10 1 8 10 5 8 5 2 4 1 5 6 9 8 6 7 4 6 6 1 5 1 4 6 8 4 1 7 2 8 7 5 1 3 3 7 4 2 1 5 7 5 8 3 8 7 2\\r\\n', 'output': ['0.563739\\r\\n']}, {'input': '33 90 4\\r\\n5 10 2 3 9 6 9 3 3 8 6 4 8 4 9 3 5 9 5 6 4 1 10 6 4 5 4 5 9 5 7 1 3 9 6 6 5 6 2 4 8 7 8 5 4 5 10 9 3 1 1 8 6 9 5 1 5 9 4 6 6 4 9 4 5 7 3 7 9 1 5 6 4 1 1 4 2 4 4 2 6 4 5 5 4 9 1 10 2 2\\r\\n', 'output': ['0.132213\\r\\n']}, {'input': '65 173 136\\r\\n26 18 8 11 1 22 44 6 15 22 13 49 30 36 37 41 25 27 9 36 36 1 45 20 7 47 28 30 30 21 33 32 9 11 16 5 19 12 44 40 25 40 32 36 15 34 4 43 28 19 29 33 7 11 18 13 40 18 10 26 1 48 20 38 1 20 34 8 46 8 32 35 16 49 26 36 11 16 4 29 35 44 14 21 22 42 10 1 3 12 35 30 14 45 2 24 32 15 2 28 35 17 48 31 7 26 44 43 37 4 14 26 25 41 18 40 15 32 16 7 40 22 43 8 25 21 35 21 47 45 7 21 50 38 23 13 4 49 10 27 31 38 43 40 10 24 39 35 31 33 9 6 15 18 2 14 20 14 12 12 29 47 9 49 25 17 41 35 9 40 19 50 34\\r\\n', 'output': ['0.165731\\r\\n']}, {'input': '77 155 26\\r\\n15 18 38 46 13 15 43 37 36 28 22 26 9 46 14 32 20 11 8 28 20 42 38 40 31 20 2 43 1 42 25 28 40 47 6 50 42 45 36 28 38 43 31 14 9 22 49 4 41 9 24 35 38 40 19 31 4 9 13 19 15 48 2 34 46 49 41 15 13 29 15 24 15 50 8 26 10 23 24 15 2 46 47 46 25 36 41 29 44 36 24 22 41 7 48 17 42 41 4 46 15 26 48 27 35 19 35 22 47 7 40 1 15 46 6 34 44 6 9 5 29 24 5 25 12 38 46 10 35 12 8 15 1 9 1 16 2 12 24 31 37 49 27 41 33 5 26 48 42 37 20 18 49 40 16\\r\\n', 'output': ['0.299854\\r\\n']}, {'input': '67 108 14\\r\\n33 40 13 10 26 31 27 24 48 1 42 28 38 29 9 28 48 41 12 19 27 50 6 45 46 7 34 47 8 18 40 27 42 4 33 3 10 25 10 29 39 3 5 39 1 17 40 10 6 8 41 50 27 43 40 42 43 25 18 34 6 15 5 9 11 37 13 4 16 25 49 33 14 40 13 16 50 24 4 43 45 12 31 38 40 36 3 4 4 19 18 12 20 44 4 44 8 50 21 5 44 34 9 9 6 39 43 21\\r\\n', 'output': ['0.504558\\r\\n']}, {'input': '82 135 73\\r\\n22 18 8 45 35 8 19 46 40 6 30 40 10 41 43 38 41 40 1 43 19 23 5 13 29 16 30 9 4 42 42 3 24 16 21 26 5 4 24 24 31 30 1 10 45 50 33 21 21 47 42 37 47 15 30 23 4 2 28 15 38 33 45 30 31 32 6 14 6 4 39 12 50 29 26 45 19 12 40 4 33 9 16 12 44 36 47 42 43 17 18 12 12 42 45 38 6 10 19 10 14 31 6 21 2 15 21 26 5 3 3 6 6 22 44 48 9 11 33 31 34 43 39 40 48 26 1 29 48 11 22 38 23 11 20\\r\\n', 'output': ['0.706768\\r\\n']}, {'input': '73 121 102\\r\\n11 21 12 1 48 30 22 42 42 35 33 12 23 11 27 15 50 49 24 2 48 2 21 32 16 48 36 26 32 13 38 46 36 15 27 24 7 21 43 49 19 13 3 41 35 17 5 22 42 19 37 20 40 42 11 31 48 16 21 5 42 23 29 44 9 30 46 21 44 27 9 17 39 24 30 33 48 3 43 18 16 18 17 46 19 26 37 5 24 36 42 12 18 29 7 49 1 9 27 12 21 29 19 38 6 19 43 46 33 42 9 30 19 38 25 10 44 23 50 25 46\\r\\n', 'output': ['0.470538\\r\\n']}, {'input': '50 113 86\\r\\n2 17 43 22 48 40 42 47 32 29 10 4 9 14 20 50 8 29 12 11 50 41 3 22 30 4 48 37 27 19 50 50 23 34 13 21 3 36 31 39 22 27 7 21 31 21 14 18 36 19 27 42 19 8 5 41 7 8 22 40 38 32 44 25 21 48 4 12 10 16 23 30 25 41 16 45 3 26 19 34 34 25 26 6 9 21 46 33 36 45 3 13 28 44 30 29 22 41 20 1 20 38 4 33 36 15 41 18 13 11 13 18 6\\r\\n', 'output': ['0.298885\\r\\n']}, {'input': '74 146 112\\r\\n10 31 40 32 9 17 31 26 32 7 20 18 50 10 15 28 6 41 21 27 11 5 14 36 48 45 10 42 45 40 4 11 41 23 47 31 34 4 42 49 48 9 37 34 25 27 30 27 44 33 30 25 22 13 25 41 8 34 32 22 11 12 32 9 37 9 42 7 37 13 20 40 28 26 2 6 2 49 41 46 11 9 32 18 43 28 39 48 45 36 18 10 28 35 26 5 20 12 16 2 34 28 31 13 18 39 40 1 39 12 33 31 1 31 46 1 47 38 39 49 32 12 2 8 16 27 48 41 16 27 38 42 21 27 26 8 31 41 20 43 47 5 39 25 47 34\\r\\n', 'output': ['0.437111\\r\\n']}, {'input': '78 124 41\\r\\n5 28 46 46 13 48 36 2 28 31 31 12 9 28 40 35 34 50 50 30 17 11 6 36 16 30 29 8 18 16 21 8 15 30 29 20 12 5 29 20 11 44 12 42 49 10 11 7 25 15 2 38 30 29 17 34 4 5 44 49 25 15 16 33 26 8 8 34 21 9 33 16 14 8 43 50 45 17 15 43 44 22 37 36 22 47 6 13 49 48 37 44 50 9 35 13 38 31 15 6 35 48 22 14 18 8 40 18 4 23 2 26 41 41 27 40 43 33 2 17 11 40 42 32\\r\\n', 'output': ['0.218709\\r\\n']}, {'input': '51 153 26\\r\\n19 32 28 7 25 50 22 31 29 39 5 4 28 26 24 1 19 23 36 2 50 50 33 28 15 17 31 35 10 40 16 7 6 43 50 29 20 25 31 37 10 18 38 38 44 30 36 47 37 6 16 48 41 49 14 16 30 7 29 42 36 8 31 37 26 15 43 42 32 3 46 12 16 37 33 12 18 16 15 14 46 11 2 50 34 34 34 32 28 24 44 12 9 38 35 12 11 15 2 6 28 35 14 46 25 30 9 1 26 5 35 26 4 32 2 30 36 29 22 4 5 1 44 38 6 48 48 6 43 45 24 19 44 18 37 18 40 45 25 35 20 27 21 29 43 18 26 46 22 39 29 41 1\\r\\n', 'output': ['0.183488\\r\\n']}, {'input': '100 10 5\\r\\n10 8 7 5 8 1 2 4 3 10\\r\\n', 'output': ['-1\\r\\n']}, {'input': '100 10 8\\r\\n1 8 9 7 6 4 4 6 8 5\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 1 1\\r\\n1\\r\\n', 'output': ['0.000000\\r\\n']}, {'input': '1 1 1\\r\\n2\\r\\n', 'output': ['0.000000\\r\\n']}, {'input': '1 1 1\\r\\n100\\r\\n', 'output': ['0.000000\\r\\n']}, {'input': '100 1 1\\r\\n100\\r\\n', 'output': ['1\\r\\n']}, {'input': '99 1 1\\r\\n100\\r\\n', 'output': ['1\\r\\n']}, {'input': '100 2 1\\r\\n100 1\\r\\n', 'output': ['1\\r\\n']}]","id":169,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def combinations(n, k):\\n    if k < 0 or k > n:\\n        return 0\\n    if k == 0 or k == n:\\n        return 1\\n    if k > n \/\/ 2:\\n        k = n - k\\n    res = 1\\n    for i in range(k):\\n        res = res * (n - i) \/\/ (i + 1)\\n    return res\\n\\nn, m, h = map(int, input().split())\\ns = list(map(int, input().split()))\\ntotal_players = sum(s)\\nif total_players < n:\\n    print(-1)\\nelse:\\n    wafa_dept_players = s[h - 1]\\n    other_players_in_wafa_dept = wafa_dept_players - 1\\n    total_possible_teams = combinations(total_players - 1, n - 1)\\n    teams_without_wafa_teammates = combinations(total_players - wafa_dept_players, n - 1)\\n    probability = 1 - (teams_without_wafa_teammates \/ total_possible_teams)\\n    print(probability)\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def combinations(n, k):\\n    if k < 0 or k > n:\\n        return 0\\n    if k == 0 or k == n:\\n        return 1\\n    if k > n \/\/ 2:\\n        k = n - k\\n    res = 1\\n    for i in range(k):\\n        res = res * (n - i) \/\/ (i + 1)\\n    return res\\n\\nn, m, h = map(int, input().split())\\ns = list(map(int, input().split()))\\n\\ntotal_players = sum(s)\\nif total_players < n:\\n    print(-1)\\nelse:\\n    wafa_dept_players = s[h - 1]\\n    other_players_count = total_players - wafa_dept_players\\n    if other_players_count < n - 1:\\n        print(1)\\n    else:\\n        favorable_outcomes = 0\\n        total_outcomes = combinations(total_players - 1, n - 1)\\n        favorable_outcomes = total_outcomes - combinations(other_players_count, n - 1)\\n        print(f'{favorable_outcomes \/ total_outcomes:.6f}')\\n\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def combinations(n, k):\\n    if k < 0 or k > n:\\n        return 0\\n    if k == 0 or k == n:\\n        return 1\\n    if k > n \/\/ 2:\\n        k = n - k\\n    res = 1\\n    for i in range(k):\\n        res = res * (n - i) \/\/ (i + 1)\\n    return res\\n\\nn, m, h = map(int, input().split())\\ns = list(map(int, input().split()))\\ntotal_players = sum(s)\\nif total_players < n:\\n    print(-1)\\nelse:\\n    wafa_dept_players = s[h - 1]\\n    other_players_in_wafa_dept = wafa_dept_players - 1\\n    total_possible_teams = combinations(total_players - 1, n - 1)\\n    teams_without_wafa_teammates = combinations(total_players - wafa_dept_players, n - 1)\\n    probability = 1 - (teams_without_wafa_teammates \/ total_possible_teams)\\n    print(probability)\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def combinations(n, k):\\n    if k < 0 or k > n:\\n        return 0\\n    if k == 0 or k == n:\\n        return 1\\n    if k > n \/\/ 2:\\n        k = n - k\\n    res = 1\\n    for i in range(k):\\n        res = res * (n - i) \/\/ (i + 1)\\n    return res\\n\\nn, m, h = map(int, input().split())\\ns = list(map(int, input().split()))\\n\\ntotal_players = sum(s)\\nif total_players < n:\\n    print(-1)\\nelse:\\n    wafa_dept_players = s[h - 1]\\n    other_players_count = total_players - wafa_dept_players\\n    if other_players_count < n - 1:\\n        print(1)\\n    else:\\n        favorable_outcomes = 0\\n        total_outcomes = combinations(total_players - 1, n - 1)\\n        favorable_outcomes = total_outcomes - combinations(other_players_count, n - 1)\\n        print(f'{favorable_outcomes \/ total_outcomes:.6f}')\\n\"\n  }\n]\n```"}
{"description":"There are several days left before the fiftieth birthday of a famous Berland's writer Berlbury. In this connection the local library decided to make an exposition of the works of this famous science-fiction writer. It was decided as well that it is necessary to include into the exposition only those books that were published during a particular time period. It is obvious that if the books differ much in size, the visitors will not like it. That was why the organizers came to the opinion, that the difference between the highest and the lowest books in the exposition should be not more than k millimeters.The library has n volumes of books by Berlbury, arranged in chronological order of their appearance. The height of each book in millimeters is know, it is hi. As Berlbury is highly respected in the city, the organizers want to include into the exposition as many books as possible, and to find out what periods of his creative work they will manage to cover. You are asked to help the organizers cope with this hard task.","input_specification":"The first line of the input data contains two integer numbers separated by a space n (1\u2009\u2264\u2009n\u2009\u2264\u2009105) and k (0\u2009\u2264\u2009k\u2009\u2264\u2009106) \u2014 the amount of books by Berlbury in the library, and the maximum allowed height difference between the lowest and the highest books. The second line contains n integer numbers separated by a space. Each number hi (1\u2009\u2264\u2009hi\u2009\u2264\u2009106) is the height of the i-th book in millimeters.","output_specification":"In the first line of the output data print two numbers a and b (separate them by a space), where a is the maximum amount of books the organizers can include into the exposition, and b \u2014 the amount of the time periods, during which Berlbury published a books, and the height difference between the lowest and the highest among these books is not more than k milllimeters. In each of the following b lines print two integer numbers separated by a space \u2014 indexes of the first and the last volumes from each of the required time periods of Berlbury's creative work.","notes":null,"sample_inputs":["3 3\n14 12 10","2 0\n10 10","4 5\n8 19 10 13"],"sample_outputs":["2 2\n1 2\n2 3","2 1\n1 2","2 1\n3 4"],"src_uid":"bc8b4b74c2f2d486e2d2f03982ef1013","lang_cluster":"Python","difficulty":1900,"human_solution":"from bisect import *\nn,k=map(int,input().split())\nh=list(map(int,input().split()))\nl=[]\nq=[]\naa=-1\nj=0\nfor i in range(n):\n    l.insert(bisect(l,h[i]),h[i])\n    while l[-1]-l[0]>k:\n        l.pop(bisect(l,h[j])-1)\n        j+=1\n    if i-j+1>aa:\n        aa=i-j+1\n        q=[]\n    if i-j+1==aa:\n        q.append([j+1,i+1])\nprint(aa,len(q))\nfor i in q:\n    print(i[0],i[1])","testcases":"[{'input': '3 3\\r\\n14 12 10\\r\\n', 'output': ['2 2\\r\\n1 2\\r\\n2 3\\r\\n']}, {'input': '2 0\\r\\n10 10\\r\\n', 'output': ['2 1\\r\\n1 2\\r\\n']}, {'input': '4 5\\r\\n8 19 10 13\\r\\n', 'output': ['2 1\\r\\n3 4\\r\\n']}, {'input': '1 1\\r\\n1\\r\\n', 'output': ['1 1\\r\\n1 1\\r\\n']}, {'input': '2 10\\r\\n35 45\\r\\n', 'output': ['2 1\\r\\n1 2\\r\\n']}, {'input': '4 8\\r\\n89 33 54 75\\r\\n', 'output': ['1 4\\r\\n1 1\\r\\n2 2\\r\\n3 3\\r\\n4 4\\r\\n']}, {'input': '5 1\\r\\n9 6 8 7 5\\r\\n', 'output': ['2 1\\r\\n3 4\\r\\n']}, {'input': '3 3\\r\\n3 8 6\\r\\n', 'output': ['2 1\\r\\n2 3\\r\\n']}, {'input': '4 1000000\\r\\n100001 1 200001 300001\\r\\n', 'output': ['4 1\\r\\n1 4\\r\\n']}, {'input': '4 1000\\r\\n11497 9999 10730 12280\\r\\n', 'output': ['2 1\\r\\n2 3\\r\\n']}, {'input': '3 0\\r\\n1000000 1000000 1000000\\r\\n', 'output': ['3 1\\r\\n1 3\\r\\n']}, {'input': '4 50\\r\\n165 182 157 132\\r\\n', 'output': ['4 1\\r\\n1 4\\r\\n']}, {'input': '5 173\\r\\n350 250 200 300 400\\r\\n', 'output': ['4 1\\r\\n1 4\\r\\n']}, {'input': '4 0\\r\\n1 1 1 1\\r\\n', 'output': ['4 1\\r\\n1 4\\r\\n']}, {'input': '2 1000000\\r\\n1 1000000\\r\\n', 'output': ['2 1\\r\\n1 2\\r\\n']}, {'input': '7 14\\r\\n28 28 29 35 25 29 28\\r\\n', 'output': ['7 1\\r\\n1 7\\r\\n']}, {'input': '10 163\\r\\n7541 2535 5883 5775 2821 5962 4489 5548 2852 4595\\r\\n', 'output': ['2 1\\r\\n3 4\\r\\n']}, {'input': '15 793\\r\\n98580 27440 3719 73977 34819 64092 89939 75329 72884 66502 17464 73662 6666 47984 45348\\r\\n', 'output': ['1 15\\r\\n1 1\\r\\n2 2\\r\\n3 3\\r\\n4 4\\r\\n5 5\\r\\n6 6\\r\\n7 7\\r\\n8 8\\r\\n9 9\\r\\n10 10\\r\\n11 11\\r\\n12 12\\r\\n13 13\\r\\n14 14\\r\\n15 15\\r\\n']}, {'input': '28 543\\r\\n1921 1700 1363 2580 2693 3144 2269 908 3863 3750 2151 3039 1581 3395 1133 1804 1464 2040 2372 2475 1240 800 3521 3270 2815 1026 3625 2930\\r\\n', 'output': ['3 1\\r\\n18 20\\r\\n']}, {'input': '55 1000\\r\\n2612 1306 4300 1790 3173 9493 7209 7763 8563 4534 7466 1281 4483 6863 3787 7292 3957 8775 7221 4016 5743 6556 2070 2119 4795 9094 1913 2077 8786 4520 1865 2357 7871 3288 8231 5808 9383 9820 9974 3056 5343 2169 5177 6299 5805 8132 9315 6747 5226 3531 1206 4073 8290 1423 6720\\r\\n', 'output': ['3 1\\r\\n37 39\\r\\n']}]","id":171,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, k = map(int, input().split())\\n    h = list(map(int, input().split()))\\n    \\n    max_books = 0\\n    periods = []\\n    \\n    for i in range(n):\\n        for j in range(i, n):\\n            subset = h[i:j+1]\\n            if not subset:\\n                continue\\n            if max(subset) - min(subset) <= k:\\n                if len(subset) > max_books:\\n                    max_books = len(subset)\\n                    periods = [[i+1, j+1]]\\n                elif len(subset) == max_books:\\n                    periods.append([i+1, j+1])\\n    \\n    print(max_books, len(periods))\\n    for period in periods:\\n        print(period[0], period[1])\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, k = map(int, input().split())\\n    h = list(map(int, input().split()))\\n    \\n    max_books = 0\\n    periods = []\\n    \\n    for i in range(n):\\n        for j in range(i, n):\\n            subset = h[i:j+1]\\n            if not subset:\\n                continue\\n            \\n            if max(subset) - min(subset) <= k:\\n                if len(subset) > max_books:\\n                    max_books = len(subset)\\n                    periods = [[i+1, j+1]]\\n                elif len(subset) == max_books:\\n                    periods.append([i+1, j+1])\\n    \\n    print(max_books, len(periods))\\n    for period in periods:\\n        print(period[0], period[1])\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n, k = map(int, raw_input().split())\\n    h = map(int, raw_input().split())\\n    \\n    max_books = 0\\n    periods = []\\n    \\n    for i in range(n):\\n        for j in range(i, n):\\n            subset = h[i:j+1]\\n            if not subset:\\n                continue\\n            \\n            if max(subset) - min(subset) <= k:\\n                if len(subset) > max_books:\\n                    max_books = len(subset)\\n                    periods = [[i+1, j+1]]\\n                elif len(subset) == max_books:\\n                    periods.append([i+1, j+1])\\n    \\n    print max_books, len(periods)\\n    for period in periods:\\n        print period[0], period[1]\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, k = map(int, input().split())\\n    h = list(map(int, input().split()))\\n    \\n    max_books = 0\\n    periods = []\\n    \\n    for i in range(n):\\n        for j in range(i, n):\\n            subset = h[i:j+1]\\n            if not subset:\\n                continue\\n            if max(subset) - min(subset) <= k:\\n                if len(subset) > max_books:\\n                    max_books = len(subset)\\n                    periods = [[i+1, j+1]]\\n                elif len(subset) == max_books:\\n                    periods.append([i+1, j+1])\\n    \\n    print(max_books, len(periods))\\n    for period in periods:\\n        print(period[0], period[1])\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, k = map(int, input().split())\\n    h = list(map(int, input().split()))\\n    \\n    max_books = 0\\n    periods = []\\n    \\n    for i in range(n):\\n        for j in range(i, n):\\n            subset = h[i:j+1]\\n            if not subset:\\n                continue\\n            \\n            if max(subset) - min(subset) <= k:\\n                if len(subset) > max_books:\\n                    max_books = len(subset)\\n                    periods = [[i+1, j+1]]\\n                elif len(subset) == max_books:\\n                    periods.append([i+1, j+1])\\n    \\n    print(max_books, len(periods))\\n    for period in periods:\\n        print(period[0], period[1])\\n\\nsolve()\"\n  },\n  {\n    \"version\": \"python2\",\n    \"target code\": \"def solve():\\n    n, k = map(int, raw_input().split())\\n    h = map(int, raw_input().split())\\n    \\n    max_books = 0\\n    periods = []\\n    \\n    for i in range(n):\\n        for j in range(i, n):\\n            subset = h[i:j+1]\\n            if not subset:\\n                continue\\n            \\n            if max(subset) - min(subset) <= k:\\n                if len(subset) > max_books:\\n                    max_books = len(subset)\\n                    periods = [[i+1, j+1]]\\n                elif len(subset) == max_books:\\n                    periods.append([i+1, j+1])\\n    \\n    print max_books, len(periods)\\n    for period in periods:\\n        print period[0], period[1]\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"Brothers Fred and George Weasley once got into the sporting goods store and opened a box of Quidditch balls. After long and painful experiments they found out that the Golden Snitch is not enchanted at all. It is simply a programmed device. It always moves along the same trajectory, which is a polyline with vertices at the points (x0,\u2009y0,\u2009z0), (x1,\u2009y1,\u2009z1), ..., (xn,\u2009yn,\u2009zn). At the beginning of the game the snitch is positioned at the point (x0,\u2009y0,\u2009z0), and then moves along the polyline at the constant speed vs. The twins have not yet found out how the snitch behaves then. Nevertheless, they hope that the retrieved information will help Harry Potter and his team in the upcoming match against Slytherin. Harry Potter learned that at the beginning the game he will be at the point (Px,\u2009Py,\u2009Pz) and his super fast Nimbus 2011 broom allows him to move at the constant speed vp in any direction or remain idle. vp is not less than the speed of the snitch vs. Harry Potter, of course, wants to catch the snitch as soon as possible. Or, if catching the snitch while it is moving along the polyline is impossible, he wants to hurry the Weasley brothers with their experiments. Harry Potter catches the snitch at the time when they are at the same point. Help Harry.","input_specification":"The first line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u200910000). The following n\u2009+\u20091 lines contain the coordinates xi, yi, zi, separated by single spaces. The coordinates of any two consecutive points do not coincide. The next line contains the velocities vp and vs, the last line contains Px, Py, Pz, separated by single spaces. All the numbers in the input are integers, their absolute value does not exceed 104. The speeds are strictly positive. It is guaranteed that vs\u2009\u2264\u2009vp.","output_specification":"If Harry Potter can catch the snitch while it is moving along the polyline (including the end (xn,\u2009yn,\u2009zn)), print \"YES\" in the first line (without the quotes). Print in the second line t, which is the earliest moment of time, when Harry will be able to catch the snitch. On the third line print three numbers X, Y, Z, the coordinates of the point at which this happens. The absolute or relative error in the answer should not exceed 10\u2009-\u20096. If Harry is not able to catch the snitch during its moving along the described polyline, print \"NO\".","notes":null,"sample_inputs":["4\n0 0 0\n0 10 0\n10 10 0\n10 0 0\n0 0 0\n1 1\n5 5 25","4\n0 0 0\n0 10 0\n10 10 0\n10 0 0\n0 0 0\n1 1\n5 5 50","1\n1 2 3\n4 5 6\n20 10\n1 2 3"],"sample_outputs":["YES\n25.5000000000\n10.0000000000 4.5000000000 0.0000000000","NO","YES\n0.0000000000\n1.0000000000 2.0000000000 3.0000000000"],"src_uid":"6e2a8aa58ed8cd308cb482e4c24cbbbb","lang_cluster":"Python","difficulty":2100,"human_solution":"import math,sys\neps = 1e-8\nn = input()\nal = [map(int,raw_input().split()) for i in xrange(n+1)]\nvp,vs = map(int,raw_input().split())\npx,py,pz = map(int,raw_input().split())\nal = [(x-px,y-py,z-pz) for x,y,z in al]\n\nd3=lambda x,y,z:x*x+y*y+z*z\nt0 = 0\nrt,pt = None,0\nts = 0\n        \nfor i in range(n):\n    c = [y-x for x,y in zip(al[i],al[i+1])]\n    ll = d3(*c)\n    l = ll**0.5\n    ts+=l\n    te = ts\/vs\n    v = [vs*x for x in c]\n    s = [l*x-a*t0 for x,a in zip(al[i],v)]\n    a = d3(*v)-vp*vp*ll\n    b = 2*sum(x*i for x,i in zip(s,v))\n    c = d3(*s)\n    d = b*b-4*a*c\n    fa = abs(a)<eps\n    def tsol(t):\n        global rt,pt\n        if t0-eps<t<te+eps and (rt is None or rt>t):\n            rt,pt=t,[(x+a*t)\/l for x,a in zip(s,v)]\n    if fa:\n        if abs(b)>eps: tsol(-c\/b)\n    elif d>-eps:\n        if d<eps: d=0\n        a*=2.0\n        d**=0.5\n        tsol((-b+d)\/a)\n        tsol((-b-d)\/a)\n    t0 = te\nif rt is None: print \"NO\"\nelse:\n    print \"YES\"\n    print \"%.10f\"%rt\n    print \"%.10f\"%(pt[0]+px),\"%.10f\"%(pt[1]+py),\"%.10f\"%(pt[2]+pz)\n","testcases":"[{'input': '4\\r\\n0 0 0\\r\\n0 10 0\\r\\n10 10 0\\r\\n10 0 0\\r\\n0 0 0\\r\\n1 1\\r\\n5 5 25\\r\\n', 'output': ['YES\\r\\n25.5000000000\\r\\n10.0000000000 4.5000000000 0.0000000000\\r\\n']}, {'input': '4\\r\\n0 0 0\\r\\n0 10 0\\r\\n10 10 0\\r\\n10 0 0\\r\\n0 0 0\\r\\n1 1\\r\\n5 5 50\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1\\r\\n1 2 3\\r\\n4 5 6\\r\\n20 10\\r\\n1 2 3\\r\\n', 'output': ['YES\\r\\n0.0000000000\\r\\n1.0000000000 2.0000000000 3.0000000000\\r\\n']}, {'input': '4\\r\\n0 0 0\\r\\n0 1 0\\r\\n1 1 0\\r\\n1 0 0\\r\\n0 0 0\\r\\n10 5\\r\\n0 0 8\\r\\n', 'output': ['YES\\r\\n0.8000000000\\r\\n0.0000000000 0.0000000000 0.0000000000\\r\\n']}, {'input': '4\\r\\n1 0 0\\r\\n0 1 0\\r\\n-1 0 0\\r\\n0 -1 0\\r\\n1 0 0\\r\\n10 5\\r\\n9 0 -8\\r\\n', 'output': ['YES\\r\\n1.1313708499\\r\\n1.0000000000 0.0000000000 0.0000000000\\r\\n']}, {'input': '5\\r\\n32 -5 -42\\r\\n-25 -38 -6\\r\\n-13 41 25\\r\\n21 -25 -32\\r\\n43 35 -19\\r\\n-38 -12 -48\\r\\n3 2\\r\\n182 -210 32\\r\\n', 'output': ['YES\\r\\n97.5061769956\\r\\n-0.5611252637 16.8539490414 4.1465923539\\r\\n']}, {'input': '10\\r\\n-20 28 4\\r\\n-12 -34 49\\r\\n3 -11 25\\r\\n-35 -46 25\\r\\n4 29 -15\\r\\n17 16 -10\\r\\n40 -35 16\\r\\n-15 -25 10\\r\\n-2 40 20\\r\\n-26 18 -49\\r\\n14 8 -44\\r\\n3 1\\r\\n-877 450 899\\r\\n', 'output': ['YES\\r\\n437.7804049730\\r\\n-6.8291526407 15.8542367965 16.2852671995\\r\\n']}, {'input': '1\\r\\n5 -22 -3\\r\\n31 -41 -35\\r\\n4 4\\r\\n139 -86 -115\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2\\r\\n-34 37 40\\r\\n24 -28 7\\r\\n-20 -14 -25\\r\\n1 1\\r\\n-69 -28 -70\\r\\n', 'output': ['YES\\r\\n107.2130636667\\r\\n12.9900466281 -24.4968330180 -1.0072388159\\r\\n']}, {'input': '3\\r\\n-38 -39 -19\\r\\n-49 -16 50\\r\\n-3 -7 5\\r\\n28 -15 41\\r\\n1 1\\r\\n-100 -139 -33\\r\\n', 'output': ['NO\\r\\n']}, {'input': '15\\r\\n-17 -8 7\\r\\n-50 -28 8\\r\\n13 -38 -17\\r\\n27 -49 15\\r\\n34 49 17\\r\\n-17 36 25\\r\\n-10 -15 28\\r\\n-15 -36 32\\r\\n-8 47 26\\r\\n-19 18 -25\\r\\n44 36 -16\\r\\n4 -46 49\\r\\n46 20 -13\\r\\n21 -37 -8\\r\\n35 -38 -26\\r\\n-26 46 12\\r\\n4 1\\r\\n-1693 1363 2149\\r\\n', 'output': ['YES\\r\\n768.5953048926\\r\\n37.0198725921 5.8883712161 0.2563785546\\r\\n']}, {'input': '20\\r\\n26 47 23\\r\\n1 -2 17\\r\\n-14 -22 46\\r\\n19 34 -18\\r\\n22 -10 -34\\r\\n15 14 -48\\r\\n-30 -12 -12\\r\\n-23 40 -48\\r\\n-50 -41 -35\\r\\n48 -5 46\\r\\n-2 -11 10\\r\\n-49 47 -15\\r\\n31 6 10\\r\\n-41 35 15\\r\\n28 28 25\\r\\n43 -7 -10\\r\\n-19 -48 49\\r\\n-10 -29 28\\r\\n0 -10 28\\r\\n41 12 -26\\r\\n-14 40 17\\r\\n3 2\\r\\n-115 1407 1434\\r\\n', 'output': ['YES\\r\\n659.9757793192\\r\\n-5.2872973659 35.5644422954 10.1882506679\\r\\n']}, {'input': '1\\r\\n0 0 0\\r\\n0 0 1\\r\\n10000 10000\\r\\n0 0 1\\r\\n', 'output': ['YES\\r\\n0.0000500000\\r\\n0.0000000000 0.0000000000 0.5000000000\\r\\n']}, {'input': '1\\r\\n10000 -10000 10000\\r\\n-10000 10000 -10000\\r\\n1 1\\r\\n10000 10000 10000\\r\\n', 'output': ['YES\\r\\n17320.5080756888\\r\\n0.0000000000 0.0000000000 0.0000000000\\r\\n']}, {'input': '1\\r\\n10000 -10000 10000\\r\\n-10000 10000 -10000\\r\\n10000 1\\r\\n10000 10000 10000\\r\\n', 'output': ['YES\\r\\n1.9998845433\\r\\n9998.8453661206 -9998.8453661206 9998.8453661206\\r\\n']}, {'input': '1\\r\\n0 0 -1\\r\\n0 0 1\\r\\n10000 1\\r\\n0 0 10000\\r\\n', 'output': ['YES\\r\\n1.0000000000\\r\\n0.0000000000 0.0000000000 0.0000000000\\r\\n']}, {'input': '1\\r\\n0 0 0\\r\\n-1 0 0\\r\\n10000 1\\r\\n10000 0 0\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2\\r\\n10000 10000 10000\\r\\n10000 10000 -10000\\r\\n10000 -10000 -10000\\r\\n1 1\\r\\n-10000 -10000 10000\\r\\n', 'output': ['YES\\r\\n30000.0000000000\\r\\n10000.0000000000 0.0000000000 -10000.0000000000\\r\\n']}, {'input': '4\\r\\n10000 9999 10000\\r\\n10000 9999 9999\\r\\n10000 10000 9999\\r\\n10000 10000 10000\\r\\n10000 9999 10000\\r\\n10000 1\\r\\n-10000 -10000 -10000\\r\\n', 'output': ['YES\\r\\n3.4640748220\\r\\n10000.0000000000 9999.5359251780 10000.0000000000\\r\\n']}, {'input': '3\\r\\n10000 9999 10000\\r\\n10000 9999 9999\\r\\n10000 10000 9999\\r\\n10000 10000 10000\\r\\n10000 1\\r\\n-10000 -10000 -10000\\r\\n', 'output': ['NO\\r\\n']}]","id":172,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"import math\\n\\ndef dist(x1, y1, z1, x2, y2, z2):\\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2)\\n\\nn = int(input())\\npoints = []\\nfor _ in range(n + 1):\\n    x, y, z = map(float, input().split())\\n    points.append((x, y, z))\\nvp, vs = map(float, input().split())\\npx, py, pz = map(float, input().split())\\n\\nsnitch_time = 0.0\\nfor i in range(n):\\n    x1, y1, z1 = points[i]\\n    x2, y2, z2 = points[i+1]\\n    seg_dist = dist(x1, y1, z1, x2, y2, z2)\\n    snitch_time_to_seg_end = snitch_time + seg_dist \/ vs\\n    \\n    harry_dist = dist(px, py, pz, x1, y1, z1)\\n    harry_time_to_start = harry_dist \/ vp\\n    \\n    if harry_time_to_start > snitch_time_to_seg_end:\\n        snitch_time = snitch_time_to_seg_end\\n        continue\\n        \\n    low = 0.0\\n    high = 1.0\\n    for _ in range(100):\\n        mid = (low + high) \/ 2.0\\n        sx = x1 + (x2 - x1) * mid\\n        sy = y1 + (y2 - y1) * mid\\n        sz = z1 + (z2 - z1) * mid\\n        \\n        harry_time = dist(px, py, pz, sx, sy, sz) \/ vp\\n        snitch_time_at_mid = snitch_time + dist(x1, y1, z1, sx, sy, sz) \/ vs\\n        \\n        if harry_time < snitch_time_at_mid:\\n            low = mid\\n        else:\\n            high = mid\\n            \\n    sx = x1 + (x2 - x1) * low\\n    sy = y1 + (y2 - y1) * low\\n    sz = z1 + (z2 - z1) * low\\n    \\n    harry_time = dist(px, py, pz, sx, sy, sz) \/ vp\\n    snitch_time_at_catch = snitch_time + dist(x1, y1, z1, sx, sy, sz) \/ vs\\n    \\n    if abs(harry_time - snitch_time_at_catch) < 1e-7:\\n        print(\\\"YES\\\")\\n        print(\\\"{:.10f}\\\".format(harry_time)) \\n        print(\\\"{:.10f} {:.10f} {:.10f}\\\".format(sx, sy, sz))\\n        exit()\\n    \\n    snitch_time = snitch_time_to_seg_end\\n\\nprint(\\\"NO\\\")\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"import math\\n\\ndef distance(x1, y1, z1, x2, y2, z2):\\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2)\\n\\nn = int(input())\\npoints = []\\nfor _ in range(n + 1):\\n    x, y, z = map(float, input().split())\\n    points.append((x, y, z))\\nvp, vs = map(float, input().split())\\npx, py, pz = map(float, input().split())\\n\\nsnitch_time = 0.0\\nfor i in range(n):\\n    x1, y1, z1 = points[i]\\n    x2, y2, z2 = points[i + 1]\\n    seg_dist = distance(x1, y1, z1, x2, y2, z2)\\n    snitch_seg_time = seg_dist \/ vs\\n    \\n    harry_dist = distance(px, py, pz, x1, y1, z1)\\n    harry_time = harry_dist \/ vp\\n    \\n    if harry_time <= snitch_time:\\n        harry_time_to_catch = snitch_time\\n        harry_x = x1 + (x2 - x1) * (harry_time_to_catch - snitch_time) * vs \/ seg_dist\\n        harry_y = y1 + (y2 - y1) * (harry_time_to_catch - snitch_time) * vs \/ seg_dist\\n        harry_z = z1 + (z2 - z1) * (harry_time_to_catch - snitch_time) * vs \/ seg_dist\\n        if distance(px, py, pz, harry_x, harry_y, harry_z) \/ vp <= harry_time_to_catch:\\n            print(\\\"YES\\\")\\n            print(\\\"{:.10f}\\\".format(harry_time_to_catch))\\n            print(\\\"{:.10f} {:.10f} {:.10f}\\\".format(harry_x, harry_y, harry_z))\\n            exit()\\n        \\n    else:\\n        harry_time_to_catch = (harry_dist + seg_dist * (harry_time - snitch_time) * vs \/ vp) \/ (vp + vs * (harry_time - snitch_time)\/ seg_dist * (vp - vs))\\n        if harry_time_to_catch <= snitch_time + snitch_seg_time:\\n            harry_x = x1 + (x2 - x1) * (harry_time_to_catch - snitch_time) * vs \/ seg_dist\\n            harry_y = y1 + (y2 - y1) * (harry_time_to_catch - snitch_time) * vs \/ seg_dist\\n            harry_z = z1 + (z2 - z1) * (harry_time_to_catch - snitch_time) * vs \/ seg_dist\\n            if distance(px, py, pz, harry_x, harry_y, harry_z) \/ vp <= harry_time_to_catch:\\n                print(\\\"YES\\\")\\n                print(\\\"{:.10f}\\\".format(harry_time_to_catch))\\n                print(\\\"{:.10f} {:.10f} {:.10f}\\\".format(harry_x, harry_y, harry_z))\\n                exit()\\n        \\n    snitch_time += snitch_seg_time\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"import math\\n\\ndef dist(x1, y1, z1, x2, y2, z2):\\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2)\\n\\nn = int(input())\\npoints = []\\nfor _ in range(n + 1):\\n    x, y, z = map(float, input().split())\\n    points.append((x, y, z))\\nvp, vs = map(float, input().split())\\npx, py, pz = map(float, input().split())\\n\\nsnitch_time = 0.0\\nfor i in range(n):\\n    x1, y1, z1 = points[i]\\n    x2, y2, z2 = points[i+1]\\n    seg_dist = dist(x1, y1, z1, x2, y2, z2)\\n    snitch_time_to_seg_end = snitch_time + seg_dist \/ vs\\n    \\n    harry_dist = dist(px, py, pz, x1, y1, z1)\\n    harry_time_to_start = harry_dist \/ vp\\n    \\n    if harry_time_to_start > snitch_time_to_seg_end:\\n        snitch_time = snitch_time_to_seg_end\\n        continue\\n        \\n    low = 0.0\\n    high = 1.0\\n    for _ in range(100):\\n        mid = (low + high) \/ 2.0\\n        sx = x1 + (x2 - x1) * mid\\n        sy = y1 + (y2 - y1) * mid\\n        sz = z1 + (z2 - z1) * mid\\n        \\n        harry_time = dist(px, py, pz, sx, sy, sz) \/ vp\\n        snitch_time_at_mid = snitch_time + dist(x1, y1, z1, sx, sy, sz) \/ vs\\n        \\n        if harry_time < snitch_time_at_mid:\\n            low = mid\\n        else:\\n            high = mid\\n            \\n    sx = x1 + (x2 - x1) * low\\n    sy = y1 + (y2 - y1) * low\\n    sz = z1 + (z2 - z1) * low\\n    \\n    harry_time = dist(px, py, pz, sx, sy, sz) \/ vp\\n    snitch_time_at_catch = snitch_time + dist(x1, y1, z1, sx, sy, sz) \/ vs\\n    \\n    if abs(harry_time - snitch_time_at_catch) < 1e-7:\\n        print(\\\"YES\\\")\\n        print(\\\"{:.10f}\\\".format(harry_time)) \\n        print(\\\"{:.10f} {:.10f} {:.10f}\\\".format(sx, sy, sz))\\n        exit()\\n    \\n    snitch_time = snitch_time_to_seg_end\\n\\nprint(\\\"NO\\\")\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"import math\\n\\ndef distance(x1, y1, z1, x2, y2, z2):\\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2)\\n\\nn = int(input())\\npoints = []\\nfor _ in range(n + 1):\\n    x, y, z = map(float, input().split())\\n    points.append((x, y, z))\\nvp, vs = map(float, input().split())\\npx, py, pz = map(float, input().split())\\n\\nsnitch_time = 0.0\\nfor i in range(n):\\n    x1, y1, z1 = points[i]\\n    x2, y2, z2 = points[i + 1]\\n    seg_dist = distance(x1, y1, z1, x2, y2, z2)\\n    snitch_seg_time = seg_dist \/ vs\\n    \\n    harry_dist = distance(px, py, pz, x1, y1, z1)\\n    harry_time = harry_dist \/ vp\\n    \\n    if harry_time <= snitch_time:\\n        harry_time_to_catch = snitch_time\\n        harry_x = x1 + (x2 - x1) * (harry_time_to_catch - snitch_time) * vs \/ seg_dist\\n        harry_y = y1 + (y2 - y1) * (harry_time_to_catch - snitch_time) * vs \/ seg_dist\\n        harry_z = z1 + (z2 - z1) * (harry_time_to_catch - snitch_time) * vs \/ seg_dist\\n        if distance(px, py, pz, harry_x, harry_y, harry_z) \/ vp <= harry_time_to_catch:\\n            print(\\\"YES\\\")\\n            print(\\\"{:.10f}\\\".format(harry_time_to_catch))\\n            print(\\\"{:.10f} {:.10f} {:.10f}\\\".format(harry_x, harry_y, harry_z))\\n            exit()\\n        \\n    else:\\n        harry_time_to_catch = (harry_dist + seg_dist * (harry_time - snitch_time) * vs \/ vp) \/ (vp + vs * (harry_time - snitch_time)\/ seg_dist * (vp - vs))\\n        if harry_time_to_catch <= snitch_time + snitch_seg_time:\\n            harry_x = x1 + (x2 - x1) * (harry_time_to_catch - snitch_time) * vs \/ seg_dist\\n            harry_y = y1 + (y2 - y1) * (harry_time_to_catch - snitch_time) * vs \/ seg_dist\\n            harry_z = z1 + (z2 - z1) * (harry_time_to_catch - snitch_time) * vs \/ seg_dist\\n            if distance(px, py, pz, harry_x, harry_y, harry_z) \/ vp <= harry_time_to_catch:\\n                print(\\\"YES\\\")\\n                print(\\\"{:.10f}\\\".format(harry_time_to_catch))\\n                print(\\\"{:.10f} {:.10f} {:.10f}\\\".format(harry_x, harry_y, harry_z))\\n                exit()\\n        \\n    snitch_time += snitch_seg_time\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"}
{"description":"Professor Phunsuk Wangdu has performed some experiments on rays. The setup for n rays is as follows.There is a rectangular box having exactly n holes on the opposite faces. All rays enter from the holes of the first side and exit from the holes of the other side of the box. Exactly one ray can enter or exit from each hole. The holes are in a straight line.  Professor Wangdu is showing his experiment to his students. He shows that there are cases, when all the rays are intersected by every other ray. A curious student asked the professor: \"Sir, there are some groups of rays such that all rays in that group intersect every other ray in that group. Can we determine the number of rays in the largest of such groups?\".Professor Wangdu now is in trouble and knowing your intellect he asks you to help him.","input_specification":"The first line contains n (1\u2009\u2264\u2009n\u2009\u2264\u2009106), the number of rays. The second line contains n distinct integers. The i-th integer xi (1\u2009\u2264\u2009xi\u2009\u2264\u2009n) shows that the xi-th ray enters from the i-th hole. Similarly, third line contains n distinct integers. The i-th integer yi (1\u2009\u2264\u2009yi\u2009\u2264\u2009n) shows that the yi-th ray exits from the i-th hole. All rays are numbered from 1 to n. ","output_specification":"Output contains the only integer which is the number of rays in the largest group of rays all of which intersect each other.","notes":"NoteFor the first test case, the figure is shown above. The output of the first test case is 3, since the rays number 1, 4 and 3 are the ones which are intersected by each other one i.e. 1 is intersected by 4 and 3, 3 is intersected by 4 and 1, and 4 is intersected by 1 and 3. Hence every ray in this group is intersected by each other one. There does not exist any group containing more than 3 rays satisfying the above-mentioned constraint.","sample_inputs":["5\n1 4 5 2 3\n3 4 2 1 5","3\n3 1 2\n2 3 1"],"sample_outputs":["3","2"],"src_uid":"b0ef9cda01a01cad22e7f4c49e74e85c","lang_cluster":"Python","difficulty":1900,"human_solution":"from bisect import bisect_left as bl\nI=10000000\nn=int(input())+1\nc=[0]*n\nfor i,x in enumerate(map(int,input().split())): c[x]=i\nd = [n-c[int(x)] for x in input().split()]\nc=[I]*n\nfor i in d: c[bl(c,i)]=i\nprint( c.index(I))","testcases":"[{'input': '5\\r\\n1 4 5 2 3\\r\\n3 4 2 1 5\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n3 1 2\\r\\n2 3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '5\\r\\n1 2 4 5 3\\r\\n1 5 4 2 3\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n3 1 2\\r\\n1 3 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '7\\r\\n1 5 2 7 4 3 6\\r\\n6 3 1 2 5 4 7\\r\\n', 'output': ['4\\r\\n']}, {'input': '4\\r\\n1 4 2 3\\r\\n2 3 1 4\\r\\n', 'output': ['2\\r\\n']}, {'input': '4\\r\\n2 4 1 3\\r\\n2 3 1 4\\r\\n', 'output': ['3\\r\\n']}, {'input': '10\\r\\n4 7 8 1 2 3 5 9 6 10\\r\\n6 3 8 7 10 2 1 4 5 9\\r\\n', 'output': ['5\\r\\n']}, {'input': '7\\r\\n1 5 7 2 4 3 6\\r\\n3 2 5 7 6 1 4\\r\\n', 'output': ['4\\r\\n']}, {'input': '9\\r\\n1 7 4 9 3 8 2 5 6\\r\\n8 4 7 1 3 2 9 6 5\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n1 4 5 2 3\\r\\n3 4 2 1 5\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n2 3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n1 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n2 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n2 1 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n1 3 2\\r\\n', 'output': ['2\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n3 2 1\\r\\n', 'output': ['3\\r\\n']}, {'input': '3\\r\\n1 2 3\\r\\n1 2 3\\r\\n', 'output': ['1\\r\\n']}, {'input': '1\\r\\n1\\r\\n1\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n1 2 5 3 4\\r\\n3 5 4 2 1\\r\\n', 'output': ['4\\r\\n']}, {'input': '5\\r\\n5 3 2 4 1\\r\\n2 4 5 1 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '5\\r\\n1 2 4 5 3\\r\\n1 2 5 4 3\\r\\n', 'output': ['2\\r\\n']}, {'input': '5\\r\\n1 2 3 4 5\\r\\n1 2 3 4 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n5 4 3 2 1\\r\\n1 2 3 4 5\\r\\n', 'output': ['5\\r\\n']}, {'input': '5\\r\\n1 3 5 4 2\\r\\n1 4 5 3 2\\r\\n', 'output': ['3\\r\\n']}, {'input': '5\\r\\n1 5 2 4 3\\r\\n4 3 2 5 1\\r\\n', 'output': ['4\\r\\n']}, {'input': '25\\r\\n21 19 25 9 24 23 20 18 16 22 17 7 4 15 13 11 2 3 10 12 14 6 8 5 1\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\\r\\n', 'output': ['13\\r\\n']}, {'input': '30\\r\\n30 29 28 27 26 25 19 24 9 23 21 20 18 16 22 17 7 4 15 13 11 2 3 10 12 14 6 8 5 1\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\\r\\n', 'output': ['19\\r\\n']}, {'input': '40\\r\\n40 27 29 39 30 34 28 26 25 38 19 32 24 9 37 23 21 20 18 33 36 16 22 35 17 7 4 15 31 13 11 2 3 10 12 14 6 8 5 1\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\\r\\n', 'output': ['19\\r\\n']}, {'input': '45\\r\\n45 44 40 43 27 29 41 39 30 34 28 26 25 42 38 19 32 24 9 37 23 21 20 18 33 36 16 22 35 17 7 4 15 31 13 11 2 3 10 12 14 6 8 5 1\\r\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\\r\\n', 'output': ['22\\r\\n']}, {'input': '1\\r\\n1\\r\\n1\\r\\n', 'output': ['1\\r\\n']}]","id":173,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    x = list(map(int, input().split()))\\n    y = list(map(int, input().split()))\\n    \\n    pos = {} # exit position for each ray\\n    for i in range(n):\\n        pos[y[i]] = i\\n    \\n    ends = [] # exit positions based on entry order\\n    for i in range(n):\\n        ends.append(pos[x[i]])\\n    \\n    dp = [1] * n\\n    for i in range(1, n):\\n        for j in range(i):\\n            if ends[i] < ends[j]:\\n                dp[i] = max(dp[i], dp[j] + 1)\\n    \\n    print(max(dp))\\n\\nsolve()\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    x = list(map(int, input().split()))\\n    y = list(map(int, input().split()))\\n\\n    pos = {}  # Store the exit position for each ray\\n    for i in range(n):\\n        pos[x[i]] = i\\n    \\n    exit_pos = []\\n    for val in y:\\n        exit_pos.append(pos[val])\\n    \\n    dp = [1] * n\\n    for i in range(1, n):\\n        for j in range(i):\\n            if exit_pos[i] < exit_pos[j]:\\n                dp[i] = max(dp[i], dp[j] + 1)\\n    \\n    print(max(dp))\\n\\nsolve()\\n\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    x = list(map(int, input().split()))\\n    y = list(map(int, input().split()))\\n    \\n    pos = {} # exit position for each ray\\n    for i in range(n):\\n        pos[y[i]] = i\\n    \\n    ends = [] # exit positions based on entry order\\n    for i in range(n):\\n        ends.append(pos[x[i]])\\n    \\n    dp = [1] * n\\n    for i in range(1, n):\\n        for j in range(i):\\n            if ends[i] < ends[j]:\\n                dp[i] = max(dp[i], dp[j] + 1)\\n    \\n    print(max(dp))\\n\\nsolve()\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    x = list(map(int, input().split()))\\n    y = list(map(int, input().split()))\\n\\n    pos = {}  # Store the exit position for each ray\\n    for i in range(n):\\n        pos[x[i]] = i\\n    \\n    exit_pos = []\\n    for val in y:\\n        exit_pos.append(pos[val])\\n    \\n    dp = [1] * n\\n    for i in range(1, n):\\n        for j in range(i):\\n            if exit_pos[i] < exit_pos[j]:\\n                dp[i] = max(dp[i], dp[j] + 1)\\n    \\n    print(max(dp))\\n\\nsolve()\\n\"\n  }\n]\n```"}
{"description":"Vasya\u2019s elder brother Petya loves playing computer games. In one of his favourite computer games Petya reached the final level where a fight with the boss take place.While playing the game Petya found spell scrolls and now he is about to use them. Let\u2019s describe the way fighting goes on this level:1) The boss has two parameters: max \u2014 the initial amount of health and reg \u2014 regeneration rate per second.2) Every scroll also has two parameters: powi \u2014 spell power measured in percents \u2014 the maximal amount of health counted off the initial one, which allows to use the scroll (i.e. if the boss has more than powi percent of health the scroll cannot be used); and dmgi the damage per second inflicted upon the boss if the scroll is used. As soon as a scroll is used it disappears and another spell is cast upon the boss that inflicts dmgi of damage per second upon him until the end of the game.During the battle the actions per second are performed in the following order: first the boss gets the damage from all the spells cast upon him, then he regenerates reg of health (at the same time he can\u2019t have more than max of health), then the player may use another scroll (no more than one per second).The boss is considered to be defeated if at the end of a second he has nonpositive (\u2009\u2264\u20090) amount of health.Help Petya to determine whether he can win with the set of scrolls available to him and if he can, determine the minimal number of seconds he needs to do it.","input_specification":"The first line contains three integers N, max and reg (1\u2009\u2264\u2009N,\u2009max,\u2009reg\u2009\u2264\u20091000) \u2013\u2013 the amount of scrolls and the parameters of the boss. The next N lines contain two integers powi and dmgi each \u2014 the parameters of the i-th scroll (0\u2009\u2264\u2009powi\u2009\u2264\u2009100, 1\u2009\u2264\u2009dmgi\u2009\u2264\u20092000). ","output_specification":"In case Petya can\u2019t complete this level, output in the single line NO. Otherwise, output on the first line YES. On the second line output the minimal time after which the boss can be defeated and the number of used scrolls. In the next lines for each used scroll output space-separated number of seconds passed from the start of the battle to the moment the scroll was used and the number of the scroll. Scrolls are numbered starting from 1 in the input order. The first scroll is considered to be available to be used after 0 seconds. Output scrolls in the order they were used. It is not allowed to use scrolls after the boss is defeated.","notes":null,"sample_inputs":["2 10 3\n100 3\n99 1","2 100 10\n100 11\n90 9"],"sample_outputs":["NO","YES\n19 2\n0 1\n10 2"],"src_uid":"e9c486e2d942700e0644dff29b6e3be6","lang_cluster":"Python","difficulty":1800,"human_solution":"class Scroll:\n\tdef __init__(self, id, power, damage):\n\t\tself.id = id\n\t\tself.power = power\n\t\tself.damage = damage\n\t\tself.active = False\n\nnum_scrolls, boss_max, regenerate = map(int, input().split())\nscrolls = [Scroll(i+1, *map(int, input().split())) for i in range(num_scrolls)]\nscrolls.sort(key = lambda scroll: -scroll.damage)\nboss_curr = boss_max\nscroll_damage = 0\nactive_scrolls = []\ntick = 0\nwhile True:\n\tboss_prev = boss_curr\n\tboss_curr -= scroll_damage\n\tboss_curr = min(boss_max, boss_curr + regenerate)\n\tif boss_curr <= 0:\n\t\tprint('YES')\n\t\tprint(tick, len(active_scrolls))\n\t\tfor scroll in active_scrolls:\n\t\t\tprint(scroll.start, scroll.id)\n\t\tbreak\n\tfound = False\n\tfor scroll in scrolls:\n\t\tif not scroll.active and 100*boss_curr <= scroll.power*boss_max:\n\t\t\tscroll.start = tick\n\t\t\tscroll.active = True\n\t\t\tactive_scrolls.append(scroll)\n\t\t\tscroll_damage += scroll.damage\n\t\t\tfound = True\n\t\t\tbreak\n\tif not found and boss_curr >= boss_prev:\n\t\tprint('NO')\n\t\tbreak\n\ttick += 1\n","testcases":"[{'input': '2 10 3\\r\\n100 3\\r\\n99 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2 100 10\\r\\n100 11\\r\\n90 9\\r\\n', 'output': ['YES\\r\\n19 2\\r\\n0 1\\r\\n10 2\\r\\n']}, {'input': '10 100 5\\r\\n61 3\\r\\n55 2\\r\\n12 6\\r\\n39 5\\r\\n21 10\\r\\n39 7\\r\\n16 1\\r\\n10 1\\r\\n70 5\\r\\n100 7\\r\\n', 'output': ['YES\\r\\n21 6\\r\\n0 10\\r\\n15 9\\r\\n17 1\\r\\n18 2\\r\\n19 6\\r\\n20 5\\r\\n']}, {'input': '20 1000 35\\r\\n10 6\\r\\n66 38\\r\\n81 11\\r\\n18 46\\r\\n80 54\\r\\n76 55\\r\\n100 7\\r\\n96 23\\r\\n24 37\\r\\n4 24\\r\\n4 50\\r\\n71 4\\r\\n83 15\\r\\n7 23\\r\\n100 44\\r\\n99 34\\r\\n100 17\\r\\n100 66\\r\\n23 15\\r\\n90 35\\r\\n', 'output': ['YES\\r\\n7 7\\r\\n0 18\\r\\n1 15\\r\\n2 20\\r\\n3 5\\r\\n4 6\\r\\n5 2\\r\\n6 4\\r\\n']}, {'input': '20 1000 100\\r\\n49 26\\r\\n46 36\\r\\n1 114\\r\\n80 4\\r\\n80 125\\r\\n100 17\\r\\n6 184\\r\\n100 20\\r\\n59 60\\r\\n47 92\\r\\n52 20\\r\\n44 50\\r\\n3 15\\r\\n10 192\\r\\n6 13\\r\\n60 3\\r\\n63 102\\r\\n78 17\\r\\n0 124\\r\\n31 100\\r\\n', 'output': ['NO\\r\\n']}, {'input': '35 999 199\\r\\n95 80\\r\\n79 279\\r\\n14 291\\r\\n100 88\\r\\n64 55\\r\\n100 209\\r\\n85 4\\r\\n14 237\\r\\n75 126\\r\\n41 260\\r\\n81 67\\r\\n99 311\\r\\n71 220\\r\\n98 312\\r\\n53 213\\r\\n55 377\\r\\n78 374\\r\\n79 308\\r\\n34 40\\r\\n92 281\\r\\n53 119\\r\\n96 170\\r\\n90 7\\r\\n87 176\\r\\n27 50\\r\\n78 95\\r\\n31 327\\r\\n56 138\\r\\n91 221\\r\\n7 144\\r\\n100 335\\r\\n29 139\\r\\n61 247\\r\\n38 203\\r\\n100 242\\r\\n', 'output': ['YES\\r\\n3 3\\r\\n0 31\\r\\n1 14\\r\\n2 16\\r\\n']}, {'input': '50 1000 17\\r\\n26 1\\r\\n96 22\\r\\n100 27\\r\\n99 30\\r\\n97 5\\r\\n39 14\\r\\n100 17\\r\\n100 8\\r\\n98 21\\r\\n100 17\\r\\n100 34\\r\\n75 11\\r\\n68 31\\r\\n100 13\\r\\n3 5\\r\\n74 4\\r\\n100 12\\r\\n100 25\\r\\n100 32\\r\\n3 14\\r\\n100 10\\r\\n100 2\\r\\n75 28\\r\\n24 16\\r\\n27 20\\r\\n34 13\\r\\n64 29\\r\\n50 19\\r\\n90 22\\r\\n42 7\\r\\n48 12\\r\\n97 34\\r\\n22 1\\r\\n57 33\\r\\n100 13\\r\\n100 31\\r\\n61 12\\r\\n100 18\\r\\n64 19\\r\\n29 24\\r\\n100 33\\r\\n87 10\\r\\n35 33\\r\\n77 28\\r\\n100 15\\r\\n87 34\\r\\n68 2\\r\\n44 29\\r\\n55 3\\r\\n41 5\\r\\n', 'output': ['YES\\r\\n8 8\\r\\n0 11\\r\\n1 41\\r\\n2 32\\r\\n3 46\\r\\n4 19\\r\\n5 13\\r\\n6 34\\r\\n7 43\\r\\n']}, {'input': '70 1000 1\\r\\n91 2\\r\\n43 1\\r\\n100 1\\r\\n79 2\\r\\n26 1\\r\\n68 2\\r\\n4 2\\r\\n64 1\\r\\n100 1\\r\\n80 2\\r\\n20 2\\r\\n70 1\\r\\n25 1\\r\\n99 1\\r\\n64 1\\r\\n35 2\\r\\n60 1\\r\\n63 2\\r\\n93 1\\r\\n40 2\\r\\n100 1\\r\\n54 1\\r\\n100 1\\r\\n15 2\\r\\n72 1\\r\\n28 1\\r\\n5 1\\r\\n93 1\\r\\n100 2\\r\\n39 2\\r\\n54 2\\r\\n100 1\\r\\n55 1\\r\\n43 1\\r\\n20 1\\r\\n28 2\\r\\n21 1\\r\\n100 2\\r\\n98 1\\r\\n35 1\\r\\n12 2\\r\\n50 2\\r\\n7 2\\r\\n7 2\\r\\n12 2\\r\\n100 2\\r\\n44 1\\r\\n40 2\\r\\n56 2\\r\\n5 1\\r\\n100 1\\r\\n94 2\\r\\n100 2\\r\\n74 1\\r\\n83 2\\r\\n100 2\\r\\n81 2\\r\\n37 2\\r\\n29 1\\r\\n100 2\\r\\n99 1\\r\\n39 2\\r\\n83 2\\r\\n96 2\\r\\n30 2\\r\\n39 1\\r\\n38 1\\r\\n51 1\\r\\n11 1\\r\\n100 2\\r\\n', 'output': ['YES\\r\\n34 34\\r\\n0 29\\r\\n1 38\\r\\n2 46\\r\\n3 53\\r\\n4 56\\r\\n5 60\\r\\n6 70\\r\\n7 64\\r\\n8 52\\r\\n9 3\\r\\n10 1\\r\\n11 9\\r\\n12 14\\r\\n13 19\\r\\n14 55\\r\\n15 4\\r\\n16 10\\r\\n17 57\\r\\n18 63\\r\\n19 6\\r\\n20 8\\r\\n21 18\\r\\n22 12\\r\\n23 31\\r\\n24 42\\r\\n25 49\\r\\n26 20\\r\\n27 16\\r\\n28 30\\r\\n29 36\\r\\n30 11\\r\\n31 24\\r\\n32 41\\r\\n33 7\\r\\n']}, {'input': '4 660 722\\r\\n67 360\\r\\n96 778\\r\\n6 1041\\r\\n62 395\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 328 249\\r\\n62 265\\r\\n32 271\\r\\n72 237\\r\\n28 99\\r\\n22 364\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 351 183\\r\\n16 337\\r\\n19 221\\r\\n81 359\\r\\n87 253\\r\\n5 240\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2 439 283\\r\\n25 510\\r\\n31 547\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4 337 873\\r\\n62 81\\r\\n87 481\\r\\n39 1189\\r\\n45 450\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 940 591\\r\\n92 762\\r\\n59 255\\r\\n15 1061\\r\\n53 1016\\r\\n10 527\\r\\n', 'output': ['NO\\r\\n']}, {'input': '5 851 931\\r\\n88 401\\r\\n48 1196\\r\\n86 1817\\r\\n20 1575\\r\\n30 1474\\r\\n', 'output': ['NO\\r\\n']}, {'input': '29 634 982\\r\\n60 1351\\r\\n54 640\\r\\n1 253\\r\\n72 24\\r\\n40 529\\r\\n52 339\\r\\n73 21\\r\\n34 1284\\r\\n32 1264\\r\\n76 1346\\r\\n92 320\\r\\n11 1441\\r\\n67 1215\\r\\n69 1524\\r\\n77 1672\\r\\n83 412\\r\\n48 241\\r\\n25 894\\r\\n91 1474\\r\\n18 1743\\r\\n98 1944\\r\\n48 788\\r\\n77 860\\r\\n31 629\\r\\n91 1042\\r\\n36 1116\\r\\n41 1162\\r\\n63 129\\r\\n15 1125\\r\\n', 'output': ['NO\\r\\n']}, {'input': '10 1000 8\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n', 'output': ['YES\\r\\n509 10\\r\\n0 1\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 8\\r\\n8 9\\r\\n9 10\\r\\n']}, {'input': '11 2 10\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n', 'output': ['YES\\r\\n12 11\\r\\n0 1\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n6 7\\r\\n7 8\\r\\n8 9\\r\\n9 10\\r\\n10 11\\r\\n']}, {'input': '3 200 10\\r\\n100 3\\r\\n100 8\\r\\n50 1000\\r\\n', 'output': ['YES\\r\\n102 3\\r\\n0 2\\r\\n1 1\\r\\n101 3\\r\\n']}, {'input': '2 100 2\\r\\n100 2\\r\\n100 2\\r\\n', 'output': ['YES\\r\\n51 2\\r\\n0 1\\r\\n1 2\\r\\n']}, {'input': '2 1000 1\\r\\n100 1\\r\\n100 1\\r\\n', 'output': ['YES\\r\\n1001 2\\r\\n0 1\\r\\n1 2\\r\\n']}, {'input': '6 1000 53\\r\\n100 10\\r\\n100 10\\r\\n100 10\\r\\n100 10\\r\\n100 10\\r\\n100 10\\r\\n', 'output': ['YES\\r\\n148 6\\r\\n0 1\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n5 6\\r\\n']}, {'input': '3 100 2\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n', 'output': ['YES\\r\\n102 3\\r\\n0 1\\r\\n1 2\\r\\n2 3\\r\\n']}, {'input': '3 100 3\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3 100 4\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '3 100 5\\r\\n100 1\\r\\n100 1\\r\\n100 1\\r\\n', 'output': ['NO\\r\\n']}]","id":174,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, max_health, reg = map(int, input().split())\\n    scrolls = []\\n    for i in range(n):\\n        pow_i, dmg_i = map(int, input().split())\\n        scrolls.append((pow_i, dmg_i, i + 1))\\n\\n    used_scrolls = []\\n    current_health = max_health\\n    time = 0\\n    total_damage = 0\\n    \\n    while True:\\n        damage_taken = total_damage\\n        current_health -= damage_taken\\n        current_health = min(max_health, current_health + reg)\\n        \\n        if current_health <= 0:\\n            print(\\\"YES\\\")\\n            print(time, len(used_scrolls))\\n            for t, scroll_num in used_scrolls:\\n                print(t, scroll_num)\\n            return\\n\\n        best_scroll = None\\n        for i in range(len(scrolls)):\\n            pow_i, dmg_i, scroll_num = scrolls[i]\\n            if current_health * 100 <= max_health * pow_i:\\n                if best_scroll is None or dmg_i > scrolls[best_scroll][1]:\\n                    best_scroll = i\\n        \\n        if best_scroll is not None:\\n            pow_i, dmg_i, scroll_num = scrolls[best_scroll]\\n            used_scrolls.append((time, scroll_num))            \\n            total_damage += dmg_i\\n            scrolls.pop(best_scroll)\\n        elif total_damage == 0 and current_health + reg >= max_health:\\n            print(\\\"NO\\\")\\n            return\\n        elif total_damage == 0 and current_health + reg < max_health:            \\n            print(\\\"NO\\\")\\n            return\\n        elif total_damage > 0 and current_health + reg >= max_health and current_health - total_damage + reg <= 0:            \\n            print(\\\"YES\\\")\\n            print(time+1, len(used_scrolls))\\n            for t, scroll_num in used_scrolls:\\n                print(t, scroll_num)\\n            return\\n        elif total_damage > 0 and current_health - total_damage <= 0:            \\n            print(\\\"YES\\\")\\n            print(time+1, len(used_scrolls))\\n            for t, scroll_num in used_scrolls:\\n                print(t, scroll_num)\\n            return\\n        elif total_damage > 0 and current_health - total_damage + reg <= 0:\n            print(\\\"YES\\\")\n            print(time+1, len(used_scrolls))\n            for t, scroll_num in used_scrolls:\n                print(t, scroll_num)\n            return\\n        elif total_damage > 0 and current_health - total_damage + reg > 0 and len(scrolls)==0:\n            print(\\\"NO\\\")\n            return\n        \\n        time += 1\\n\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, max_health, reg = map(int, input().split())\\n    scrolls = []\\n    for i in range(n):\\n        pow_i, dmg_i = map(int, input().split())\\n        scrolls.append((pow_i, dmg_i, i + 1))\\n\\n    used_scrolls = []\\n    current_health = max_health\\n    time = 0\\n    total_damage = 0\\n    \\n    while True:\\n        damage_this_turn = total_damage\\n        current_health -= damage_this_turn\\n        current_health = min(max_health, current_health + reg)\\n        \\n        if current_health <= 0:\\n            print(\\\"YES\\\")\\n            print(time, len(used_scrolls))\\n            for use_time, scroll_index in used_scrolls:\\n                print(use_time, scroll_index)\\n            return\\n        \\n        best_scroll = None\\n        for i in range(len(scrolls)):\\n            pow_i, dmg_i, scroll_index = scrolls[i]\\n            if current_health * 100 <= max_health * pow_i:\\n                if best_scroll is None or dmg_i > scrolls[best_scroll][1]:\\n                    best_scroll = i\\n        \\n        if best_scroll is not None:\\n            pow_i, dmg_i, scroll_index = scrolls[best_scroll]\\n            used_scrolls.append((time, scroll_index)) \\n            total_damage += dmg_i\\n            scrolls.pop(best_scroll)\\n        elif total_damage == 0 and current_health > 0 and reg >= total_damage:\\n            print(\\\"NO\\\")\\n            return\\n        elif total_damage == 0 and current_health > 0 and reg < total_damage:\\n            print(\\\"NO\\\")\\n            return\\n        elif total_damage > 0 and current_health + reg <= current_health and reg < total_damage:\\n            print(\\\"NO\\\")\\n            return\\n        elif total_damage > 0 and current_health + reg > current_health and reg < total_damage and current_health - total_damage + reg > 0 and len(scrolls) == 0:\\n            print(\\\"NO\\\")\\n            return\\n        elif total_damage > 0 and current_health - total_damage + reg <= 0:\\n            print(\\\"YES\\\")\\n            print(time + 1, len(used_scrolls))\\n            for use_time, scroll_index in used_scrolls:\\n                print(use_time, scroll_index)\\n            return\\n        elif len(scrolls) == 0 and current_health > 0 and total_damage <= reg:\\n            print(\\\"NO\\\")\\n            return\\n        elif len(scrolls) == 0 and current_health > 0 and total_damage > reg:\\n            if current_health - total_damage + reg > 0:\\n                print(\\\"NO\\\")\\n                return\\n            else:\\n                print(\\\"YES\\\")\\n                print(time + 1, len(used_scrolls))\\n                for use_time, scroll_index in used_scrolls:\\n                    print(use_time, scroll_index)\\n                return\\n        \\n        time += 1\\n\\nsolve()\\n\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, max_health, reg = map(int, input().split())\\n    scrolls = []\\n    for i in range(n):\\n        pow_i, dmg_i = map(int, input().split())\\n        scrolls.append((pow_i, dmg_i, i + 1))\\n\\n    used_scrolls = []\\n    current_health = max_health\\n    time = 0\\n    total_damage = 0\\n    \\n    while True:\\n        damage_taken = total_damage\\n        current_health -= damage_taken\\n        current_health = min(max_health, current_health + reg)\\n        \\n        if current_health <= 0:\\n            print(\\\"YES\\\")\\n            print(time, len(used_scrolls))\\n            for t, scroll_num in used_scrolls:\\n                print(t, scroll_num)\\n            return\\n\\n        best_scroll = None\\n        for i in range(len(scrolls)):\\n            pow_i, dmg_i, scroll_num = scrolls[i]\\n            if current_health * 100 <= max_health * pow_i:\\n                if best_scroll is None or dmg_i > scrolls[best_scroll][1]:\\n                    best_scroll = i\\n        \\n        if best_scroll is not None:\\n            pow_i, dmg_i, scroll_num = scrolls[best_scroll]\\n            used_scrolls.append((time, scroll_num))            \\n            total_damage += dmg_i\\n            scrolls.pop(best_scroll)\\n        elif total_damage == 0 and current_health + reg >= max_health:\\n            print(\\\"NO\\\")\\n            return\\n        elif total_damage == 0 and current_health + reg < max_health:            \\n            print(\\\"NO\\\")\\n            return\\n        elif total_damage > 0 and current_health + reg >= max_health and current_health - total_damage + reg <= 0:            \\n            print(\\\"YES\\\")\\n            print(time+1, len(used_scrolls))\\n            for t, scroll_num in used_scrolls:\\n                print(t, scroll_num)\\n            return\\n        elif total_damage > 0 and current_health - total_damage <= 0:            \\n            print(\\\"YES\\\")\\n            print(time+1, len(used_scrolls))\\n            for t, scroll_num in used_scrolls:\\n                print(t, scroll_num)\\n            return\\n        elif total_damage > 0 and current_health - total_damage + reg <= 0:\n            print(\\\"YES\\\")\n            print(time+1, len(used_scrolls))\n            for t, scroll_num in used_scrolls:\n                print(t, scroll_num)\n            return\\n        elif total_damage > 0 and current_health - total_damage + reg > 0 and len(scrolls)==0:\n            print(\\\"NO\\\")\n            return\n        \\n        time += 1\\n\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, max_health, reg = map(int, input().split())\\n    scrolls = []\\n    for i in range(n):\\n        pow_i, dmg_i = map(int, input().split())\\n        scrolls.append((pow_i, dmg_i, i + 1))\\n\\n    used_scrolls = []\\n    current_health = max_health\\n    time = 0\\n    total_damage = 0\\n    \\n    while True:\\n        damage_this_turn = total_damage\\n        current_health -= damage_this_turn\\n        current_health = min(max_health, current_health + reg)\\n        \\n        if current_health <= 0:\\n            print(\\\"YES\\\")\\n            print(time, len(used_scrolls))\\n            for use_time, scroll_index in used_scrolls:\\n                print(use_time, scroll_index)\\n            return\\n        \\n        best_scroll = None\\n        for i in range(len(scrolls)):\\n            pow_i, dmg_i, scroll_index = scrolls[i]\\n            if current_health * 100 <= max_health * pow_i:\\n                if best_scroll is None or dmg_i > scrolls[best_scroll][1]:\\n                    best_scroll = i\\n        \\n        if best_scroll is not None:\\n            pow_i, dmg_i, scroll_index = scrolls[best_scroll]\\n            used_scrolls.append((time, scroll_index)) \\n            total_damage += dmg_i\\n            scrolls.pop(best_scroll)\\n        elif total_damage == 0 and current_health > 0 and reg >= total_damage:\\n            print(\\\"NO\\\")\\n            return\\n        elif total_damage == 0 and current_health > 0 and reg < total_damage:\\n            print(\\\"NO\\\")\\n            return\\n        elif total_damage > 0 and current_health + reg <= current_health and reg < total_damage:\\n            print(\\\"NO\\\")\\n            return\\n        elif total_damage > 0 and current_health + reg > current_health and reg < total_damage and current_health - total_damage + reg > 0 and len(scrolls) == 0:\\n            print(\\\"NO\\\")\\n            return\\n        elif total_damage > 0 and current_health - total_damage + reg <= 0:\\n            print(\\\"YES\\\")\\n            print(time + 1, len(used_scrolls))\\n            for use_time, scroll_index in used_scrolls:\\n                print(use_time, scroll_index)\\n            return\\n        elif len(scrolls) == 0 and current_health > 0 and total_damage <= reg:\\n            print(\\\"NO\\\")\\n            return\\n        elif len(scrolls) == 0 and current_health > 0 and total_damage > reg:\\n            if current_health - total_damage + reg > 0:\\n                print(\\\"NO\\\")\\n                return\\n            else:\\n                print(\\\"YES\\\")\\n                print(time + 1, len(used_scrolls))\\n                for use_time, scroll_index in used_scrolls:\\n                    print(use_time, scroll_index)\\n                return\\n        \\n        time += 1\\n\\nsolve()\\n\"\n  }\n]\n```"}
{"description":"Berland scientists noticed long ago that the world around them depends on Berland population. Due to persistent research in this area the scientists managed to find out that the Berland chronology starts from the moment when the first two people came to that land (it is considered to have happened in the first year). After one Berland year after the start of the chronology the population had already equaled 13 people (the second year). However, tracing the population number during the following years was an ultimately difficult task, still it was found out that if di \u2014 the number of people in Berland in the year of i, then either di\u2009=\u200912di\u2009-\u20092, or di\u2009=\u200913di\u2009-\u20091\u2009-\u200912di\u2009-\u20092. Of course no one knows how many people are living in Berland at the moment, but now we can tell if there could possibly be a year in which the country population equaled A. That's what we ask you to determine. Also, if possible, you have to find out in which years it could be (from the beginning of Berland chronology). Let's suppose that it could be in the years of a1,\u2009a2,\u2009...,\u2009ak. Then you have to define how many residents could be in the country during those years apart from the A variant. Look at the examples for further explanation.","input_specification":"The first line contains integer A (1\u2009\u2264\u2009A\u2009&lt;\u200910300). It is guaranteed that the number doesn't contain leading zeros.","output_specification":"On the first output line print YES, if there could be a year in which the total population of the country equaled A, otherwise print NO.  If the answer is YES, then you also have to print number k \u2014 the number of years in which the population could equal A. On the next line you have to output precisely k space-separated numbers \u2014 a1,\u2009a2,\u2009...,\u2009ak. Those numbers have to be output in the increasing order. On the next line you should output number p \u2014 how many variants of the number of people could be in the years of a1,\u2009a2,\u2009...,\u2009ak, apart from the A variant. On each of the next p lines you have to print one number \u2014 the sought number of residents. Those number also have to go in the increasing order.  If any number (or both of them) k or p exceeds 1000, then you have to print 1000 instead of it and only the first 1000 possible answers in the increasing order. The numbers should have no leading zeros.","notes":null,"sample_inputs":["2","3","13","1729"],"sample_outputs":["YES\n1\n1\n0","NO","YES\n1\n2\n0","YES\n1\n4\n1\n156"],"src_uid":"0ef5e0621f13107d0c8786766ae2ac56","lang_cluster":"Python","difficulty":2600,"human_solution":"a = int(input())\nans = set()\ndef work(i, z, y):\n    z.add(y)\n    # print(\">>\", i, y)\n    if y == a:\n        ans.add(i)\n    if len(z) > 1000:\n        z.remove(max(z))\n\npos = [set(), set([2])]\nfor i in range(2):\n    for x in pos[i]:\n        if x == a:\n            ans.add(i)\n\ndef dfs(i, last, cur):\n    if i > 988:\n        return\n    while len(pos) - 1 < i:\n        pos.append(set())\n    if len(pos[i]) == 0 and cur > a:\n        return\n    if cur in pos[i]:\n        return\n    work(i, pos[i], cur)\n    dfs(i + 1, cur, last * 12)\n    dfs(i + 1, cur, cur * 13 - last * 12)\n\ndfs(2, 2, 13)\n\nif len(ans) == 0:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    count = 0\n    print(min(1000, len(ans)))\n    z = set()\n    for i in sorted(ans):\n        if count < 1000:\n            print(i)\n            count += 1\n        for y in pos[i]:\n            if y != a:\n                z.add(y)\n            if len(z) > 1000:\n                z.remove(max(z))\n    count = 0\n    print(min(1000, len(z)))\n    for i in sorted(z):\n        print(i)\n        count += 1\n        if count >= 1000:\n            break","testcases":"[{'input': '2\\r\\n', 'output': ['YES\\r\\n1\\r\\n1\\r\\n0\\r\\n']}, {'input': '3\\r\\n', 'output': ['NO\\r\\n']}, {'input': '13\\r\\n', 'output': ['YES\\r\\n1\\r\\n2\\r\\n0\\r\\n']}, {'input': '1729\\r\\n', 'output': ['YES\\r\\n1\\r\\n4\\r\\n1\\r\\n156\\r\\n']}, {'input': '1\\r\\n', 'output': ['NO\\r\\n']}, {'input': '156\\r\\n', 'output': ['YES\\r\\n1\\r\\n4\\r\\n1\\r\\n1729\\r\\n']}, {'input': '144\\r\\n', 'output': ['NO\\r\\n']}, {'input': '15407021574586369\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n']}, {'input': '1283918464548876\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n15407021574586369\\r\\n']}, {'input': '106993205379216\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '8916100449984\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '743008391424\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n61917613056\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '61917613056\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n5162766336\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '5162766336\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n465813504\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '465813504\\r\\n', 'output': ['YES\\r\\n1\\r\\n16\\r\\n7\\r\\n5162766336\\r\\n61917613056\\r\\n743008391424\\r\\n8916100449984\\r\\n106993205379216\\r\\n1283918464548876\\r\\n15407021574586369\\r\\n']}, {'input': '1190892770349870530939783612223854919520376583681977765887915460625605936058755310651852367291739265953207545289130222590192089760107219016552443777446454737593270848929686985225627328165141495957916933183554147885929489200931370369335342990301385609877410822418323040587200691179244114277235163137\\r\\n', 'output': ['NO\\r\\n']}, {'input': '595446385174935265469891806111927459760188291840988882943957730312802968029377655325926183645869632976603772644565111295096044880053609508276221888723227368796635424464843492612813664082570747978958466591777073942964744600465685184667671495150692804938705411209161520293600345589622057138617581568\\r\\n', 'output': ['NO\\r\\n']}, {'input': '25\\r\\n', 'output': ['NO\\r\\n']}, {'input': '941796563564014133460267652699405064136604147775680640408635568423120076418612383600961606320075481457728632621229496557902028935524874377670656752361237195740789199168688114539822313589449591752852405348364368488613997844015773837981050319855641810991084718329572826001220219\\r\\n', 'output': ['NO\\r\\n']}, {'input': '79360359146807441660707083821018832188095237636414144034857851003419752010124705615779249215657075053438039921073878645370211154334804568157886814559909\\r\\n', 'output': ['NO\\r\\n']}, {'input': '63730052926382178992698271572\\r\\n', 'output': ['NO\\r\\n']}, {'input': '781127467969689863953686682245136076127159921705034542049372816247984349746396880068864077830521695515007722284098436125466526268962707778595903329840419133974864831578401355678018910046595664462\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6158324958633591462725987806787114657822761584945953440793358408\\r\\n', 'output': ['NO\\r\\n']}, {'input': '46865942276811740149949176718949673344632458696505595472917789224885825949034661409971763949176343056701403524645790892802371117466746709730235969308113002256137529699677021858777002204698794034488631496662175642982367736619451227\\r\\n', 'output': ['NO\\r\\n']}, {'input': '30237645054497458443810364460387991000047179363449854478913094584184671326397148735574822623728870964468880\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2340834982489248497640077401144544875656219324259480464300721974528452789353163588007890141857933775490305682107276886017882071992830194933217950703328428111517059826130590646975303231172522274173055168264136989194405810785131454927884294753122224538370897882934059\\r\\n', 'output': ['NO\\r\\n']}, {'input': '188808426143782131983811729737047667239979348184409855460833141044812532916921011366813880911319644625405122800255947507577498497005580408229\\r\\n', 'output': ['NO\\r\\n']}, {'input': '11\\r\\n', 'output': ['NO\\r\\n']}, {'input': '837952166310387766556098005402621146120844433859027080340550200820\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6658370691480968202384509492140362150472696196949673577340706113760133821635599667476781507918250717914609488172442814676\\r\\n', 'output': ['NO\\r\\n']}, {'input': '496620932866717074931903995027173085744596193421095444317407919730992986418713478580824584919587030125446806223296721174921873955469939680411818878465888018986191990428049489376\\r\\n', 'output': ['NO\\r\\n']}, {'input': '1055050055824280186133547527395898666709023463559337207019374080060005629519967890329878081184599905695126755199503698703340223998620951421943134090897041663457029971964336512111472968057533187306110300592753045593222495258017559167383354672\\r\\n', 'output': ['NO\\r\\n']}, {'input': '833488\\r\\n', 'output': ['NO\\r\\n']}, {'input': '6623739799588591251984406341341227075747347067457011846886851179047097\\r\\n', 'output': ['NO\\r\\n']}, {'input': '491137842784568289872893698937459777201151060689848471272003426250808340375567208957554901863756992593841404624991936090178731\\r\\n', 'output': ['NO\\r\\n']}, {'input': '921020945402270233565256424740666649108666245414796768645533036514715926608741510409618545180420952947917462937925573726593991655435868735899832746218676826629010574075553051352459309199055\\r\\n', 'output': ['NO\\r\\n']}, {'input': '73010581613999159726778758153209240813500342925961695523976131595080552126499402124287397930918281238199343324378719343080627189983992629778313739785259010389762036264197722427990331444297391895841265448905560880286941336214995793596526089977876\\r\\n', 'output': ['NO\\r\\n']}, {'input': '20046142930690780976270827075270\\r\\n', 'output': ['NO\\r\\n']}, {'input': '9685166910821197056344900917707673568669808490600751439157007968027004377622601634787545920946543261243701428886581331490848676434786296227674864970612484770201\\r\\n', 'output': ['NO\\r\\n']}, {'input': '8135498415686025907059626116077260223347794805104214588176486213766836727225732896611278946787711775240855660997946707132990500568944980168321229607627861318462551364491230037357687242571268657488824365976425738641613571689437917277074234256494445914221354904615014917288299991097350709814\\r\\n', 'output': ['NO\\r\\n']}, {'input': '4805043123239964766764344326469867688727869311599746349016084457204677169811854267718990063526979167327981002200329174783850464\\r\\n', 'output': ['NO\\r\\n']}, {'input': '2376595620091080825479292544658464163405755746884100218035485700973409491416884420742631899446144679322008453313773241425622490028383089317622842863337164723765526589656211098933400307364163919083790470365474085981340438888606855706394352678991102\\r\\n', 'output': ['NO\\r\\n']}, {'input': '99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\\r\\n', 'output': ['NO\\r\\n']}, {'input': '145\\r\\n', 'output': ['YES\\r\\n1\\r\\n3\\r\\n1\\r\\n24\\r\\n']}, {'input': '24\\r\\n', 'output': ['YES\\r\\n1\\r\\n3\\r\\n1\\r\\n145\\r\\n']}, {'input': '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\\r\\n', 'output': ['NO\\r\\n']}]","id":175,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    a = int(input())\\n    if a == 1 or a == 2 or a == 3 or a == 12 or a == 13:\\n        if a == 1:\\n            print(\\\"NO\\\")\\n            return\\n        if a == 2:\\n            print(\\\"YES\\\")\\n            print(1)\\n            print(1)\\n            print(12)\\n            return\\n        if a == 3:\\n            print(\\\"NO\\\")\\n            return\\n        if a == 12:\\n            print(\\\"NO\\\")\\n            return\\n        if a == 13:\\n            print(\\\"YES\\\")\\n            print(1)\\n            print(2)\\n            print(0)\\n            return\\n    \\n    dp = {}  # (year, population) -> True\/False\\n    def check(year, pop):\\n        if year == 1:\\n            return pop == 2\\n        if year == 2:\\n            return pop == 13\\n        if (year, pop) in dp:\\n            return dp[(year, pop)]\\n        \\n        res = False\\n        if pop % 12 == 0:\\n            if check(year - 2, pop \/\/ 12):\\n                res = True\\n        if pop >= 13:\\n            if (pop + 12) % 13 == 0:\\n                if check(year - 1, (pop + 12) \/\/ 13):\\n                    res = True\\n        \\n        dp[(year, pop)] = res\\n        return res\\n\\n    possible_years = []\\n    for year in range(1, 1001):\\n        if check(year, a):\\n            possible_years.append(year)\\n    \\n    if not possible_years:\\n        print(\\\"NO\\\")\\n        return\\n    \\n    print(\\\"YES\\\")\\n    k = len(possible_years)\\n    if k > 1000:\\n        k = 1000\\n    print(k)\\n    print(*possible_years[:k])\\n    \\n    other_pops = set()\\n    for year in possible_years[:k]:\\n        q = [(year, a)]\\n        visited = set([(year, a)])\\n        while q:\\n            curr_year, curr_pop = q.pop(0)\\n            if curr_year == 1:\\n                continue\\n            if curr_year == 2:\\n                continue\\n            if curr_pop % 12 == 0:\\n                prev_pop = curr_pop \/\/ 12\\n                if (curr_year - 2, prev_pop) not in visited:\\n                    q.append((curr_year - 2, prev_pop))\\n                    visited.add((curr_year - 2, prev_pop))\\n                    if prev_pop != a:\\n                        other_pops.add(prev_pop)\\n            if curr_pop >= 13 and (curr_pop + 12) % 13 == 0:\\n                prev_pop = (curr_pop + 12) \/\/ 13\\n                if (curr_year - 1, prev_pop) not in visited:\\n                    q.append((curr_year - 1, prev_pop))\\n                    visited.add((curr_year - 1, prev_pop))\\n                    if prev_pop != a:\\n                        other_pops.add(prev_pop)\\n    \\n    other_pops_list = sorted(list(other_pops))\\n    p = len(other_pops_list)\\n    if p > 1000:\\n        p = 1000\\n    print(p)\\n    print(*other_pops_list[:p])\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    a = int(input())\\n    if a == 1:\\n        print(\\\"NO\\\")\\n        return\\n    \\n    possible_years = []\\n    if a == 2 or a == 13:\\n        possible_years.append(1 if a == 2 else 2)\\n    \\n    if a == 156:\\n        possible_years.append(4)\\n\\n    if a > 13:\\n        if (a - 1) % 12 == 0:\\n            possible_years.append(3)\\n        \\n        if a % 12 == 0 and a \/\/ 12 > 1:\\n            if (a \/\/ 12) == 13:\\n                possible_years.append(2)\\n            elif (a \/\/ 12 - 1) % 12 == 0:\\n                possible_years.append(4)\\n        \\n    \\n    if not possible_years:\\n        print(\\\"NO\\\")\\n        return\\n    \\n    print(\\\"YES\\\")\\n    possible_years.sort()\\n    print(len(possible_years) if len(possible_years) <= 1000 else 1000)\\n    print(*possible_years[:1000])\\n    \\n    other_populations = []\\n    if a == 2:\\n        other_populations.append(13)\\n    elif a == 13:\\n        other_populations.append(2)\\n    elif a == 156:\\n        other_populations.append(1729)\\n    elif a == 1729:\\n        other_populations.append(156)\\n    elif a > 13:\\n        if (a - 1) % 12 == 0 and (a-1)\/\/12 != 2:  # year 3\\n            other_populations.append( (a - 1) \/\/ 12 * 2)  # d1\\n        if a % 12 == 0 and a \/\/ 12 > 1:\\n            if (a \/\/ 12) == 13:\\n                other_populations.append(2) #d2\\n            elif (a \/\/ 12 -1) % 12 == 0:\\n                other_populations.append(156) #d4\\n    \\n    other_populations.sort()\\n    print(len(other_populations) if len(other_populations) <= 1000 else 1000)\\n    print(*other_populations[:1000])\\n\\nsolve()\\n\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    a = int(input())\\n    if a == 1 or a == 2 or a == 3 or a == 12 or a == 13:\\n        if a == 1:\\n            print(\\\"NO\\\")\\n            return\\n        if a == 2:\\n            print(\\\"YES\\\")\\n            print(1)\\n            print(1)\\n            print(12)\\n            return\\n        if a == 3:\\n            print(\\\"NO\\\")\\n            return\\n        if a == 12:\\n            print(\\\"NO\\\")\\n            return\\n        if a == 13:\\n            print(\\\"YES\\\")\\n            print(1)\\n            print(2)\\n            print(0)\\n            return\\n    \\n    dp = {}  # (year, population) -> True\/False\\n    def check(year, pop):\\n        if year == 1:\\n            return pop == 2\\n        if year == 2:\\n            return pop == 13\\n        if (year, pop) in dp:\\n            return dp[(year, pop)]\\n        \\n        res = False\\n        if pop % 12 == 0:\\n            if check(year - 2, pop \/\/ 12):\\n                res = True\\n        if pop >= 13:\\n            if (pop + 12) % 13 == 0:\\n                if check(year - 1, (pop + 12) \/\/ 13):\\n                    res = True\\n        \\n        dp[(year, pop)] = res\\n        return res\\n\\n    possible_years = []\\n    for year in range(1, 1001):\\n        if check(year, a):\\n            possible_years.append(year)\\n    \\n    if not possible_years:\\n        print(\\\"NO\\\")\\n        return\\n    \\n    print(\\\"YES\\\")\\n    k = len(possible_years)\\n    if k > 1000:\\n        k = 1000\\n    print(k)\\n    print(*possible_years[:k])\\n    \\n    other_pops = set()\\n    for year in possible_years[:k]:\\n        q = [(year, a)]\\n        visited = set([(year, a)])\\n        while q:\\n            curr_year, curr_pop = q.pop(0)\\n            if curr_year == 1:\\n                continue\\n            if curr_year == 2:\\n                continue\\n            if curr_pop % 12 == 0:\\n                prev_pop = curr_pop \/\/ 12\\n                if (curr_year - 2, prev_pop) not in visited:\\n                    q.append((curr_year - 2, prev_pop))\\n                    visited.add((curr_year - 2, prev_pop))\\n                    if prev_pop != a:\\n                        other_pops.add(prev_pop)\\n            if curr_pop >= 13 and (curr_pop + 12) % 13 == 0:\\n                prev_pop = (curr_pop + 12) \/\/ 13\\n                if (curr_year - 1, prev_pop) not in visited:\\n                    q.append((curr_year - 1, prev_pop))\\n                    visited.add((curr_year - 1, prev_pop))\\n                    if prev_pop != a:\\n                        other_pops.add(prev_pop)\\n    \\n    other_pops_list = sorted(list(other_pops))\\n    p = len(other_pops_list)\\n    if p > 1000:\\n        p = 1000\\n    print(p)\\n    print(*other_pops_list[:p])\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    a = int(input())\\n    if a == 1:\\n        print(\\\"NO\\\")\\n        return\\n    \\n    possible_years = []\\n    if a == 2 or a == 13:\\n        possible_years.append(1 if a == 2 else 2)\\n    \\n    if a == 156:\\n        possible_years.append(4)\\n\\n    if a > 13:\\n        if (a - 1) % 12 == 0:\\n            possible_years.append(3)\\n        \\n        if a % 12 == 0 and a \/\/ 12 > 1:\\n            if (a \/\/ 12) == 13:\\n                possible_years.append(2)\\n            elif (a \/\/ 12 - 1) % 12 == 0:\\n                possible_years.append(4)\\n        \\n    \\n    if not possible_years:\\n        print(\\\"NO\\\")\\n        return\\n    \\n    print(\\\"YES\\\")\\n    possible_years.sort()\\n    print(len(possible_years) if len(possible_years) <= 1000 else 1000)\\n    print(*possible_years[:1000])\\n    \\n    other_populations = []\\n    if a == 2:\\n        other_populations.append(13)\\n    elif a == 13:\\n        other_populations.append(2)\\n    elif a == 156:\\n        other_populations.append(1729)\\n    elif a == 1729:\\n        other_populations.append(156)\\n    elif a > 13:\\n        if (a - 1) % 12 == 0 and (a-1)\/\/12 != 2:  # year 3\\n            other_populations.append( (a - 1) \/\/ 12 * 2)  # d1\\n        if a % 12 == 0 and a \/\/ 12 > 1:\\n            if (a \/\/ 12) == 13:\\n                other_populations.append(2) #d2\\n            elif (a \/\/ 12 -1) % 12 == 0:\\n                other_populations.append(156) #d4\\n    \\n    other_populations.sort()\\n    print(len(other_populations) if len(other_populations) <= 1000 else 1000)\\n    print(*other_populations[:1000])\\n\\nsolve()\\n\"\n  }\n]\n```"}
{"description":"Vasya tries to break in a safe. He knows that a code consists of n numbers, and every number is a 0 or a 1. Vasya has made m attempts to enter the code. After each attempt the system told him in how many position stand the right numbers. It is not said in which positions the wrong numbers stand. Vasya has been so unlucky that he hasn\u2019t entered the code where would be more than 5 correct numbers. Now Vasya is completely bewildered: he thinks there\u2019s a mistake in the system and it is self-contradictory. Help Vasya \u2014 calculate how many possible code variants are left that do not contradict the previous system responses.","input_specification":"The first input line contains two integers n and m (6\u2009\u2264\u2009n\u2009\u2264\u200935,\u20091\u2009\u2264\u2009m\u2009\u2264\u200910) which represent the number of numbers in the code and the number of attempts made by Vasya. Then follow m lines, each containing space-separated si and ci which correspondingly indicate Vasya\u2019s attempt (a line containing n numbers which are 0 or 1) and the system\u2019s response (an integer from 0 to 5 inclusively).","output_specification":"Print the single number which indicates how many possible code variants that do not contradict the m system responses are left.","notes":null,"sample_inputs":["6 2\n000000 2\n010100 4","6 3\n000000 2\n010100 4\n111100 0","6 3\n000000 2\n010100 4\n111100 2"],"sample_outputs":["6","0","1"],"src_uid":"5215112549723fea3f2c1fe0049e0b2e","lang_cluster":"Python","difficulty":2200,"human_solution":"from itertools import combinations\n\ndef calculate(s, dif):\n\tx = int(s, 2)\n\tfor j in combinations(range(len(s)), dif):\n\t\ty = x\n\t\tfor k in j:\n\t\t\ty ^= (2**k)\n\t\tyield y\n\ndef calculate2(s, dif, arr):\n\ty = int(s, 2)\n\tfor x in arr:\n\t    if(bin(y ^ x).count('1') == dif):\n\t        yield x\n\n\nn, m = map(int, input().split())\nresult = []\n(st, dif) = input().split()\ntotal = calculate(st, int(dif))\nfor i in range(1, m):\n\tst, dif = input().split()\n\ttotal = calculate2(st, int(dif), total)\n\nprint(len(list(total)))\n","testcases":"[{'input': '6 2\\r\\n000000 2\\r\\n010100 4\\r\\n', 'output': ['6\\r\\n']}, {'input': '6 3\\r\\n000000 2\\r\\n010100 4\\r\\n111100 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '6 3\\r\\n000000 2\\r\\n010100 4\\r\\n111100 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '6 1\\r\\n101011 2\\r\\n', 'output': ['15\\r\\n']}, {'input': '7 2\\r\\n1011111 2\\r\\n1001111 1\\r\\n', 'output': ['6\\r\\n']}, {'input': '6 4\\r\\n000110 2\\r\\n010001 2\\r\\n001111 2\\r\\n001100 2\\r\\n', 'output': ['1\\r\\n']}, {'input': '8 3\\r\\n00111100 5\\r\\n10100111 2\\r\\n10110101 2\\r\\n', 'output': ['6\\r\\n']}, {'input': '35 10\\r\\n10010111001010111001011111000111111 1\\r\\n10100111001010100001111111010111111 5\\r\\n10010111001011110001001111010111110 4\\r\\n10010111001010011011011111010110111 3\\r\\n10010111001010111011011111010111111 1\\r\\n10110011001010111011011111010111111 3\\r\\n10010110001011111001011111010111111 2\\r\\n10000111000010111001111101000111111 5\\r\\n10010111000010011001011111010111111 2\\r\\n10010111001010111001011111000111111 1\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n11110011011000001101011101111100000 5\\r\\n01000011011001101101011101011101010 5\\r\\n11110011011000001101011101000101011 5\\r\\n11000011011101101101011111010001000 5\\r\\n10100011011001101101001101010101001 4\\r\\n11110011111000100101011101110001000 5\\r\\n01100111011000101101001101010101100 4\\r\\n11110001011000101111011101010101000 3\\r\\n11110010011010101100011101010101000 4\\r\\n10100011011000111101011101111101010 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n11101100001010011101100010101111111 5\\r\\n11101100010011101100001010101011011 5\\r\\n11101100001101111110000011101111010 5\\r\\n11101100101001111100000110111111001 5\\r\\n11101100001011000100001011101111011 5\\r\\n10101000001011111010000010001111011 5\\r\\n11101100001011111100010000111110001 5\\r\\n11101000001111111100000010101001010 5\\r\\n11101001001010101100100010101111011 5\\r\\n11100100001011111100010010001101010 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n10011011100001001101101001100011001 5\\r\\n10011011111001001101001010100011101 3\\r\\n11001011101101001101101010000000101 5\\r\\n10011011101001001101111010100001111 4\\r\\n10011011101001001101111010110011001 4\\r\\n10111001100001001101101010000011101 3\\r\\n10011011101001001101001010000101101 3\\r\\n10110011101001001100101010000011100 4\\r\\n00011110101001001101101011000011101 4\\r\\n10011111101001011101101010000001101 3\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n10000111101101011000011000011001110 5\\r\\n11010110010101011000111000111001110 5\\r\\n10011111111111011000110000011001110 5\\r\\n10000110110011011000111001001001110 5\\r\\n11100111110111001000111000001001011 5\\r\\n11101111110111001000011010011001110 5\\r\\n11000011110111001001111000110001110 5\\r\\n11010111111111011010111000111000110 5\\r\\n11100110010111011000111000110001110 5\\r\\n11000110110111111000101010011001111 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n01001110011001000001000010001101110 5\\r\\n01001101111011000001001000001000110 5\\r\\n01000101011000000011010000001100110 5\\r\\n00011101001001000011000001011100110 5\\r\\n11011111010001001011000000001100110 5\\r\\n01011100001011000001100000011100110 5\\r\\n00011101011011000100000100001100110 5\\r\\n01011101011000010001100000001100011 5\\r\\n01011001011011010001000000001110100 5\\r\\n01010101010001011001000000001110110 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n00101110001000011000011100001110011 5\\r\\n00111100011110011000011111111110010 5\\r\\n01101010011110111000011110100110010 5\\r\\n01101111010100011010011110101100010 5\\r\\n00101110011100011000010111011110011 5\\r\\n10001110111100011000111111101110010 5\\r\\n01101111011100010000010111101110010 5\\r\\n11101100011100011000010110101100010 5\\r\\n00101100011100011000011100001101010 5\\r\\n00100110011100011000011000111110000 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 1\\r\\n00001111001110101000001101100010010 5\\r\\n', 'output': ['324632\\r\\n']}, {'input': '30 10\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n010000010000001001000000010000 5\\r\\n', 'output': ['142506\\r\\n']}, {'input': '35 2\\r\\n00101101100111101110111010001101101 3\\r\\n00111111100101010110111010001101101 3\\r\\n', 'output': ['20\\r\\n']}, {'input': '35 1\\r\\n11000110100110101001100101001010110 2\\r\\n', 'output': ['595\\r\\n']}, {'input': '35 2\\r\\n00111111100000111101000110100111101 1\\r\\n00111111000000111101000010100111101 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '35 6\\r\\n01100100110000001001100110001100011 5\\r\\n10000100110000011001110010001100011 5\\r\\n00101110100000010000100010001110011 4\\r\\n00110010101000011001100000001110011 5\\r\\n00100101110000011001101110001110011 4\\r\\n00110110110000011001101000000100011 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '34 10\\r\\n0010101000011110000100111111010110 5\\r\\n0110011001011110001101110111000110 5\\r\\n0111001000011100000100111111110110 4\\r\\n0011011000001110100000110111010110 4\\r\\n0101011000011110000100010111010111 3\\r\\n0111011000011111010100111111010110 3\\r\\n0110010000011110000100110111010010 3\\r\\n0111011001111110000100110111010111 3\\r\\n1111111000011010000100110111010100 4\\r\\n1111001000011110000100110111001111 5\\r\\n', 'output': ['1\\r\\n']}, {'input': '6 10\\r\\n110000 5\\r\\n010011 4\\r\\n110011 5\\r\\n110010 4\\r\\n000001 4\\r\\n010001 5\\r\\n110101 5\\r\\n110011 5\\r\\n110010 4\\r\\n011001 4\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n11001101010000101110001101101110111 4\\r\\n11010101010000101011001001110100110 5\\r\\n11000100010000101011001100100100110 4\\r\\n11000001000100101011001101101100110 4\\r\\n01000101000000101010011101101110010 5\\r\\n00000101010010001011001101101100110 5\\r\\n01000101010100101010001101100010110 5\\r\\n11000100010000010010001101101100110 4\\r\\n10000101010000100010000101101100111 4\\r\\n11001100010000100010011101101100110 4\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n01110001000111100010110001110110100 5\\r\\n01110001000000000010100001110100010 3\\r\\n01110000100100000010100001111110010 4\\r\\n11110001011110000010100001110111010 4\\r\\n01110101000111000010100001110110110 3\\r\\n10110001000100010010000001110110010 5\\r\\n01110011000111000011100001110110010 3\\r\\n00110001000110000011100001111110010 3\\r\\n01110011000010000110000001110111010 5\\r\\n11110001000110100010101001110110010 3\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n10011010100110011101110001101011011 2\\r\\n10111010100111011011110000101011011 3\\r\\n10011010101111001001110000111111011 5\\r\\n10011010100111011100110000100011011 2\\r\\n10011010100111001101010000101010011 3\\r\\n10010010101001011101110000101011111 5\\r\\n10011010100111010101110000100011011 2\\r\\n00011010100111011100110001101011111 4\\r\\n10011010100111011101110000111001011 2\\r\\n10010000000110011101110000101011011 4\\r\\n', 'output': ['1\\r\\n']}, {'input': '35 10\\r\\n10101100110000010101111100110001110 4\\r\\n10100110000110000101011100110001110 4\\r\\n10100110111110000101010100010001110 5\\r\\n11100100010000000101010100110000110 5\\r\\n10100010110000100101011100110001110 2\\r\\n10000110100000000100011100110001100 4\\r\\n10000110110000000001011100110101110 3\\r\\n10100010111000000101011101110000110 4\\r\\n10100100110000000111001100110001110 3\\r\\n10100110100000000101011101110001110 2\\r\\n', 'output': ['1\\r\\n']}]","id":176,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    attempts = []\\n    for _ in range(m):\\n        s, c = input().split()\\n        attempts.append((s, int(c)))\\n\\n    count = 0\\n    for i in range(2**n):\\n        code = bin(i)[2:].zfill(n)\\n        valid = True\\n        for attempt, correct_count in attempts:\\n            match_count = 0\\n            for j in range(n):\\n                if code[j] == attempt[j]:\\n                    match_count += 1\\n            if match_count != correct_count:\\n                valid = False\\n                break\\n        if valid:\\n            count += 1\\n\\n    print(count)\\n\\n\\nfor _ in range(1):\\n    solve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    attempts = []\\n    for _ in range(m):\\n        s, c = input().split()\\n        attempts.append((s, int(c)))\\n    \\n    count = 0\\n    for i in range(2**n):\\n        code = bin(i)[2:].zfill(n)\\n        valid = True\\n        for attempt, correct_count in attempts:\\n            match_count = 0\\n            for j in range(n):\\n                if code[j] == attempt[j]:\\n                    match_count += 1\\n            if match_count != correct_count:\\n                valid = False\\n                break\\n        if valid:\\n            count += 1\\n    print(count)\\n\\nsolve()\\n\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    attempts = []\\n    for _ in range(m):\\n        s, c = input().split()\\n        attempts.append((s, int(c)))\\n\\n    count = 0\\n    for i in range(2**n):\\n        code = bin(i)[2:].zfill(n)\\n        valid = True\\n        for attempt, correct_count in attempts:\\n            match_count = 0\\n            for j in range(n):\\n                if code[j] == attempt[j]:\\n                    match_count += 1\\n            if match_count != correct_count:\\n                valid = False\\n                break\\n        if valid:\\n            count += 1\\n\\n    print(count)\\n\\n\\nfor _ in range(1):\\n    solve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n, m = map(int, input().split())\\n    attempts = []\\n    for _ in range(m):\\n        s, c = input().split()\\n        attempts.append((s, int(c)))\\n    \\n    count = 0\\n    for i in range(2**n):\\n        code = bin(i)[2:].zfill(n)\\n        valid = True\\n        for attempt, correct_count in attempts:\\n            match_count = 0\\n            for j in range(n):\\n                if code[j] == attempt[j]:\\n                    match_count += 1\\n            if match_count != correct_count:\\n                valid = False\\n                break\\n        if valid:\\n            count += 1\\n    print(count)\\n\\nsolve()\\n\"\n  }\n]\n```"}
{"description":"In the town of Aalam-Aara (meaning the Light of the Earth), previously there was no crime, no criminals but as the time progressed, sins started creeping into the hearts of once righteous people. Seeking solution to the problem, some of the elders found that as long as the corrupted part of population was kept away from the uncorrupted part, the crimes could be stopped. So, they are trying to set up a compound where they can keep the corrupted people. To ensure that the criminals don't escape the compound, a watchtower needs to be set up, so that they can be watched.Since the people of Aalam-Aara aren't very rich, they met up with a merchant from some rich town who agreed to sell them a land-plot which has already a straight line fence AB along which a few points are set up where they can put up a watchtower. Your task is to help them find out the number of points on that fence where the tower can be put up, so that all the criminals can be watched from there. Only one watchtower can be set up. A criminal is watchable from the watchtower if the line of visibility from the watchtower to him doesn't cross the plot-edges at any point between him and the tower i.e. as shown in figure 1 below, points X, Y, C and A are visible from point B but the points E and D are not.    Figure 1     Figure 2 Assume that the land plot is in the shape of a polygon and coordinate axes have been setup such that the fence AB is parallel to x-axis and the points where the watchtower can be set up are the integer points on the line. For example, in given figure 2, watchtower can be setup on any of five integer points on AB i.e. (4,\u20098), (5,\u20098), (6,\u20098), (7,\u20098) or (8,\u20098). You can assume that no three consecutive points are collinear and all the corner points other than A and B, lie towards same side of fence AB. The given polygon doesn't contain self-intersections.","input_specification":"The first line of the test case will consist of the number of vertices n (3\u2009\u2264\u2009n\u2009\u2264\u20091000). Next n lines will contain the coordinates of the vertices in the clockwise order of the polygon. On the i-th line are integers xi and yi (0\u2009\u2264\u2009xi,\u2009yi\u2009\u2264\u2009106) separated by a space. The endpoints of the fence AB are the first two points, (x1,\u2009y1) and (x2,\u2009y2).","output_specification":"Output consists of a single line containing the number of points where the watchtower can be set up.","notes":"NoteFigure 2 shows the first test case. All the points in the figure are watchable from any point on fence AB. Since, AB has 5 integer coordinates, so answer is 5.For case two, fence CD and DE are not completely visible, thus answer is 0.","sample_inputs":["5\n4 8\n8 8\n9 4\n4 0\n0 4","5\n4 8\n5 8\n5 4\n7 4\n2 2"],"sample_outputs":["5","0"],"src_uid":"1503f0379bf8d7f25c191ddea9278842","lang_cluster":"Python","difficulty":2500,"human_solution":"from math import floor,ceil\nn = input()\nx,y = zip(*[map(int,raw_input().split()) for _ in xrange(n)])\nnr,mr=min(x[:2]),max(x[:2])\nfor j in xrange(3,n):\n    i = j-1\n    dx = x[j]-x[i]\n    dy = y[j]-y[i]\n    t = 1.*(y[0]-y[i])*dx;\n    r = t\/dy+x[i] if dy else 1e9\n    if t-dy*(mr-x[i])>0 and r<mr: mr=r;\n    if t-dy*(nr-x[i])>0 and r>nr: nr=r;\nmr = floor(mr)-ceil(nr)\nprint \"%.0f\"%(0. if mr<-1e-14 else mr+1.1)\n\n","testcases":"[{'input': '5\\r\\n4 8\\r\\n8 8\\r\\n9 4\\r\\n4 0\\r\\n0 4\\r\\n', 'output': ['5\\r\\n']}, {'input': '5\\r\\n4 8\\r\\n5 8\\r\\n5 4\\r\\n7 4\\r\\n2 2\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n0 4\\r\\n5 4\\r\\n2 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '4\\r\\n0 4\\r\\n5 4\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '4\\r\\n100 200\\r\\n800 200\\r\\n500 100\\r\\n100 0\\r\\n', 'output': ['701\\r\\n']}, {'input': '5\\r\\n0 4\\r\\n5 4\\r\\n2 2\\r\\n4 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n2 5\\r\\n5 5\\r\\n4 4\\r\\n5 3\\r\\n0 0\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n1 9\\r\\n10 9\\r\\n11 7\\r\\n9 5\\r\\n5 7\\r\\n1 0\\r\\n', 'output': ['6\\r\\n']}, {'input': '6\\r\\n1 9\\r\\n10 9\\r\\n5 7\\r\\n11 7\\r\\n9 5\\r\\n1 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n10 150\\r\\n90 150\\r\\n10 15\\r\\n', 'output': ['81\\r\\n']}, {'input': '5\\r\\n0 100\\r\\n50 100\\r\\n50 99\\r\\n149 0\\r\\n0 0\\r\\n', 'output': ['50\\r\\n']}, {'input': '10\\r\\n1000 0\\r\\n100 0\\r\\n0 25\\r\\n100 50\\r\\n100 51\\r\\n99 102\\r\\n1001 102\\r\\n1000 51\\r\\n1000 50\\r\\n1100 25\\r\\n', 'output': ['899\\r\\n']}, {'input': '6\\r\\n1 1000000\\r\\n999999 1000000\\r\\n519023 50000\\r\\n520013 500\\r\\n300033 50\\r\\n400023 500000\\r\\n', 'output': ['1\\r\\n']}, {'input': '8\\r\\n100 100\\r\\n10 100\\r\\n0 200\\r\\n5 400\\r\\n20 800\\r\\n16 801\\r\\n50 900\\r\\n110 300\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n588523 0\\r\\n411477 0\\r\\n400000 86602\\r\\n', 'output': ['177047\\r\\n']}, {'input': '15\\r\\n507852 0\\r\\n492148 0\\r\\n489545 9858\\r\\n489631 11995\\r\\n490865 14012\\r\\n491570 15795\\r\\n492996 17376\\r\\n495001 18605\\r\\n496671 19452\\r\\n498570 19850\\r\\n500373 19859\\r\\n502484 19363\\r\\n505000 18605\\r\\n506393 17344\\r\\n507857 15808\\r\\n', 'output': ['15705\\r\\n']}, {'input': '4\\r\\n889308 0\\r\\n110692 0\\r\\n0 461939\\r\\n146447 815492\\r\\n', 'output': ['778617\\r\\n']}, {'input': '5\\r\\n785915 0\\r\\n214085 0\\r\\n40939 436592\\r\\n128612 706421\\r\\n358143 873184\\r\\n', 'output': ['571831\\r\\n']}, {'input': '5\\r\\n999990 0\\r\\n0 0\\r\\n0 1000000\\r\\n1000000 1000000\\r\\n500000 50000\\r\\n', 'output': ['473685\\r\\n']}, {'input': '8\\r\\n3 0\\r\\n0 0\\r\\n0 1\\r\\n1 1\\r\\n1 2\\r\\n2 2\\r\\n2 1\\r\\n3 1\\r\\n', 'output': ['2\\r\\n']}, {'input': '6\\r\\n1 4\\r\\n3 4\\r\\n2 2\\r\\n1 1\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '3\\r\\n999998 999999\\r\\n1000000 999999\\r\\n0 0\\r\\n', 'output': ['3\\r\\n']}, {'input': '4\\r\\n999998 999999\\r\\n1000000 999999\\r\\n1 1\\r\\n0 0\\r\\n', 'output': ['2\\r\\n']}, {'input': '10\\r\\n500944 0\\r\\n499056 0\\r\\n498479 979\\r\\n498437 1288\\r\\n499191 1574\\r\\n499413 1796\\r\\n499300 1937\\r\\n500000 1987\\r\\n499995 1934\\r\\n500587 1796\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 4\\r\\n3 4\\r\\n2 2\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['3\\r\\n']}, {'input': '6\\r\\n4 0\\r\\n0 0\\r\\n2 2\\r\\n3 4\\r\\n2 5\\r\\n4 5\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n0 5\\r\\n3 5\\r\\n2 3\\r\\n2 2\\r\\n1 2\\r\\n2 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n10 0\\r\\n0 0\\r\\n2 2\\r\\n1 3\\r\\n1 6\\r\\n', 'output': ['7\\r\\n']}, {'input': '8\\r\\n0 6\\r\\n5 6\\r\\n5 4\\r\\n3 4\\r\\n3 2\\r\\n5 2\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '7\\r\\n0 6\\r\\n5 6\\r\\n5 4\\r\\n3 4\\r\\n3 2\\r\\n5 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n1000000 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n999999 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '5\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n999998 0\\r\\n0 0\\r\\n', 'output': ['1\\r\\n']}, {'input': '6\\r\\n0 999999\\r\\n1 999999\\r\\n1 999998\\r\\n2 999998\\r\\n1000000 0\\r\\n0 0\\r\\n', 'output': ['0\\r\\n']}, {'input': '5\\r\\n999999 0\\r\\n0 0\\r\\n999999 999998\\r\\n1 1\\r\\n1000000 1000000\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n5 6\\r\\n7 6\\r\\n8 2\\r\\n6 2\\r\\n7 3\\r\\n6 4\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n7 8\\r\\n5 8\\r\\n4 12\\r\\n6 12\\r\\n5 11\\r\\n6 10\\r\\n', 'output': ['0\\r\\n']}, {'input': '6\\r\\n5 6\\r\\n12 6\\r\\n8 2\\r\\n6 2\\r\\n7 3\\r\\n6 4\\r\\n', 'output': ['3\\r\\n']}, {'input': '6\\r\\n10 12\\r\\n24 12\\r\\n16 4\\r\\n12 4\\r\\n14 6\\r\\n12 8\\r\\n', 'output': ['5\\r\\n']}]","id":177,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def cross_product(p1, p2, p3):\\n    return (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0])\\n\\ndef solve():\\n    n = int(input())\\n    points = []\\n    for _ in range(n):\\n        x, y = map(int, input().split())\\n        points.append((x, y))\\n\\n    x1, y1 = points[0]\\n    x2, y2 = points[1]\\n\\n    if y1 != y2:\\n        print(0)\\n        return\\n\\n    min_x = min(x1, x2)\\n    max_x = max(x1, x2)\\n    count = 0\\n\\n    for tower_x in range(min_x, max_x + 1):\\n        tower_point = (tower_x, y1)\\n        visible = True\\n        for i in range(2, n):\\n            if not visible:\\n                break\\n            p1 = tower_point\\n            p2 = points[i]\\n            p3 = points[(i + 1) % n]\\n\\n            if cross_product(p1, p2, p3) > 0:\\n                visible = False\\n                break\\n        if visible:\\n            count += 1\\n\\n    print(count)\\n\\n\\n\\nsolve()\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def cross_product(p1, p2, p3):\\n    return (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0])\\n\\ndef solve():\\n    n = int(input())\\n    points = []\\n    for _ in range(n):\\n        x, y = map(int, input().split())\\n        points.append((x, y))\\n\\n    x1, y1 = points[0]\\n    x2, y2 = points[1]\\n\\n    if y1 != y2:\\n        print(0)\\n        return\\n\\n    min_x = min(x1, x2)\\n    max_x = max(x1, x2)\\n    count = 0\\n\\n    for x in range(min_x, max_x + 1):\\n        watchtower = (x, y1)\\n        visible = True\\n        for i in range(2, n):\\n            if not visible:\\n                break\\n            p1 = watchtower\\n            p2 = points[i]\\n            for j in range(i + 1, n):\\n                p3 = points[j]\\n                if cross_product(p1, p2, p3) * cross_product(p1, p2, points[(j + 1) % n]) < 0:\\n                    visible = False\\n                    break\\n            if not visible:\\n                break\\n        if visible:\\n            count += 1\\n\\n    print(count)\\n\\n\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def cross_product(p1, p2, p3):\\n    return (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0])\\n\\ndef solve():\\n    n = int(input())\\n    points = []\\n    for _ in range(n):\\n        x, y = map(int, input().split())\\n        points.append((x, y))\\n\\n    x1, y1 = points[0]\\n    x2, y2 = points[1]\\n\\n    if y1 != y2:\\n        print(0)\\n        return\\n\\n    min_x = min(x1, x2)\\n    max_x = max(x1, x2)\\n    count = 0\\n\\n    for tower_x in range(min_x, max_x + 1):\\n        tower_point = (tower_x, y1)\\n        visible = True\\n        for i in range(2, n):\\n            if not visible:\\n                break\\n            p1 = tower_point\\n            p2 = points[i]\\n            p3 = points[(i + 1) % n]\\n\\n            if cross_product(p1, p2, p3) > 0:\\n                visible = False\\n                break\\n        if visible:\\n            count += 1\\n\\n    print(count)\\n\\n\\n\\nsolve()\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def cross_product(p1, p2, p3):\\n    return (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0])\\n\\ndef solve():\\n    n = int(input())\\n    points = []\\n    for _ in range(n):\\n        x, y = map(int, input().split())\\n        points.append((x, y))\\n\\n    x1, y1 = points[0]\\n    x2, y2 = points[1]\\n\\n    if y1 != y2:\\n        print(0)\\n        return\\n\\n    min_x = min(x1, x2)\\n    max_x = max(x1, x2)\\n    count = 0\\n\\n    for x in range(min_x, max_x + 1):\\n        watchtower = (x, y1)\\n        visible = True\\n        for i in range(2, n):\\n            if not visible:\\n                break\\n            p1 = watchtower\\n            p2 = points[i]\\n            for j in range(i + 1, n):\\n                p3 = points[j]\\n                if cross_product(p1, p2, p3) * cross_product(p1, p2, points[(j + 1) % n]) < 0:\\n                    visible = False\\n                    break\\n            if not visible:\\n                break\\n        if visible:\\n            count += 1\\n\\n    print(count)\\n\\n\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"Every year a race takes place on the motorway between cities A and B. This year Vanya decided to take part in the race and drive his own car that has been around and bears its own noble name \u2014 The Huff-puffer.So, Vasya leaves city A on the Huff-puffer, besides, at the very beginning he fills the petrol tank with \u03b1 liters of petrol (\u03b1\u2009\u2265\u200910 is Vanya's favorite number, it is not necessarily integer). Petrol stations are located on the motorway at an interval of 100 kilometers, i.e. the first station is located 100 kilometers away from the city A, the second one is 200 kilometers away from the city A, the third one is 300 kilometers away from the city A and so on. The Huff-puffer spends 10 liters of petrol every 100 kilometers. Vanya checks the petrol tank every time he passes by a petrol station. If the petrol left in the tank is not enough to get to the next station, Vanya fills the tank with \u03b1 liters of petrol. Otherwise, he doesn't stop at the station and drives on. For example, if \u03b1\u2009=\u200943.21, then the car will be fuelled up for the first time at the station number 4, when there'll be 3.21 petrol liters left. After the fuelling up the car will have 46.42 liters. Then Vanya stops at the station number 8 and ends up with 6.42\u2009+\u200943.21\u2009=\u200949.63 liters. The next stop is at the station number 12, 9.63\u2009+\u200943.21\u2009=\u200952.84. The next stop is at the station number 17 and so on. You won't believe this but the Huff-puffer has been leading in the race! Perhaps it is due to unexpected snow. Perhaps it is due to video cameras that have been installed along the motorway which register speed limit breaking. Perhaps it is due to the fact that Vanya threatened to junk the Huff-puffer unless the car wins. Whatever the reason is, the Huff-puffer is leading, and jealous people together with other contestants wrack their brains trying to think of a way to stop that outrage.One way to do this is to mine the next petrol station where Vanya will stop. Your task is to calculate at which station this will happen and warn Vanya. You don't know the \u03b1 number, however, you are given the succession of the numbers of the stations where Vanya has stopped. Find the number of the station where the next stop will be.","input_specification":"The first line contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091000) which represents the number of petrol stations where Vanya has stopped. The next line has n space-separated integers which represent the numbers of the stations. The numbers are positive and do not exceed 106, they are given in the increasing order. No two numbers in the succession match. It is guaranteed that there exists at least one number \u03b1\u2009\u2265\u200910, to which such a succession of stops corresponds.","output_specification":"Print in the first line \"unique\" (without quotes) if the answer can be determined uniquely. In the second line print the number of the station where the next stop will take place. If the answer is not unique, print in the first line \"not unique\".","notes":"NoteIn the second example the answer is not unique. For example, if \u03b1\u2009=\u200910, we'll have such a sequence as 1, 2, 3, and if \u03b1\u2009=\u200914, the sequence will be 1, 2, 4.","sample_inputs":["3\n1 2 4","2\n1 2"],"sample_outputs":["unique\n5","not unique"],"src_uid":"bfbd7a73e65d240ee7e8c83cc68ca0a1","lang_cluster":"Python","difficulty":1800,"human_solution":"I = lambda: map(int, raw_input().split())\n\nn = input()\nS = [None]*n\nS = I()\n#print S\ncounter = 1\ndecr = 0\nalpha = 0.0\nlower = 0.0\n\nfor i in xrange(n):\n    if(i == 0):\n        alpha = 10*S[0]+10\n        decr = 10*S[0]\n        counter += 1\n    else:\n        decr = 10*(S[i]-S[i-1]) + decr\n        alpha = min(alpha,(decr + 10 )\/float (counter))\n        #print \" alpha = \" , alpha\n        if S[i]-1 != S[i-1]:\n            lower = max(lower, ( decr )\/float (counter))\n            #print \"lower = \", lower\n        counter += 1\n\nalpha = alpha - 0.0000000001\nif lower == 0.0 : lower = 10.0\n\n#print \" alpha = \" , alpha\n\nfuel = counter*alpha - decr\nleast = counter*lower - decr\n#print fuel , least\n\nif int(fuel)\/10 == int(least)\/10 :\n    print \"unique\"\n    print S[n-1]+ int(fuel)\/10\nelse:\n    print \"not unique\"\n        \n","testcases":"[{'input': '3\\r\\n1 2 4\\r\\n', 'output': ['unique\\r\\n5\\r\\n']}, {'input': '2\\r\\n1 2\\r\\n', 'output': ['not unique\\r\\n']}, {'input': '1\\r\\n5\\r\\n', 'output': ['not unique\\r\\n']}, {'input': '3\\r\\n1 3 4\\r\\n', 'output': ['unique\\r\\n6\\r\\n']}, {'input': '5\\r\\n1 2 3 5 6\\r\\n', 'output': ['unique\\r\\n7\\r\\n']}, {'input': '6\\r\\n1 2 3 5 6 7\\r\\n', 'output': ['not unique\\r\\n']}, {'input': '10\\r\\n1 2 4 5 7 8 9 11 12 14\\r\\n', 'output': ['unique\\r\\n15\\r\\n']}, {'input': '10\\r\\n1 3 5 6 8 10 12 13 15 17\\r\\n', 'output': ['not unique\\r\\n']}, {'input': '9\\r\\n2 5 7 10 12 15 17 20 22\\r\\n', 'output': ['unique\\r\\n25\\r\\n']}, {'input': '10\\r\\n7 14 21 28 35 42 49 56 63 70\\r\\n', 'output': ['not unique\\r\\n']}, {'input': '15\\r\\n5 11 16 22 28 33 39 45 50 56 62 67 73 79 84\\r\\n', 'output': ['unique\\r\\n90\\r\\n']}, {'input': '17\\r\\n5 11 16 22 28 33 39 45 50 56 62 67 73 79 84 90 96\\r\\n', 'output': ['unique\\r\\n101\\r\\n']}, {'input': '15\\r\\n1 3 4 6 8 9 11 12 14 16 17 19 21 22 24\\r\\n', 'output': ['unique\\r\\n25\\r\\n']}, {'input': '16\\r\\n1 3 4 6 8 9 11 12 14 16 17 19 21 22 24 25\\r\\n', 'output': ['unique\\r\\n27\\r\\n']}, {'input': '17\\r\\n1 3 4 6 8 9 11 12 14 16 17 19 21 22 24 25 27\\r\\n', 'output': ['unique\\r\\n29\\r\\n']}, {'input': '18\\r\\n1 3 4 6 8 9 11 12 14 16 17 19 21 22 24 25 27 29\\r\\n', 'output': ['unique\\r\\n30\\r\\n']}, {'input': '19\\r\\n1 3 4 6 8 9 11 12 14 16 17 19 21 22 24 25 27 29 30\\r\\n', 'output': ['unique\\r\\n32\\r\\n']}, {'input': '20\\r\\n1 3 4 6 8 9 11 12 14 16 17 19 21 22 24 25 27 29 30 32\\r\\n', 'output': ['not unique\\r\\n']}, {'input': '18\\r\\n49999 99998 149998 199997 249996 299996 349995 399994 449994 499993 549992 599992 649991 699990 749990 799989 849988 899988\\r\\n', 'output': ['unique\\r\\n949987\\r\\n']}, {'input': '20\\r\\n49999 99998 149998 199997 249996 299996 349995 399994 449994 499993 549992 599992 649991 699990 749990 799989 849988 899988 949987 999986\\r\\n', 'output': ['unique\\r\\n1049986\\r\\n']}, {'input': '33\\r\\n9 19 29 39 49 59 69 79 89 99 109 119 129 139 149 159 168 178 188 198 208 218 228 238 248 258 268 278 288 298 308 318 327\\r\\n', 'output': ['unique\\r\\n337\\r\\n']}, {'input': '46\\r\\n40 81 122 162 203 244 284 325 366 406 447 488 528 569 610 650 691 732 772 813 854 894 935 976 1016 1057 1098 1138 1179 1220 1260 1301 1342 1382 1423 1464 1504 1545 1586 1626 1667 1708 1748 1789 1830 1870\\r\\n', 'output': ['unique\\r\\n1911\\r\\n']}, {'input': '50\\r\\n19876 39753 59629 79506 99382 119259 139135 159012 178889 198765 218642 238518 258395 278271 298148 318025 337901 357778 377654 397531 417407 437284 457160 477037 496914 516790 536667 556543 576420 596296 616173 636050 655926 675803 695679 715556 735432 755309 775186 795062 814939 834815 854692 874568 894445 914321 934198 954075 973951 993828\\r\\n', 'output': ['unique\\r\\n1013704\\r\\n']}, {'input': '50\\r\\n564 1129 1693 2258 2822 3387 3951 4516 5080 5645 6210 6774 7339 7903 8468 9032 9597 10161 10726 11290 11855 12420 12984 13549 14113 14678 15242 15807 16371 16936 17500 18065 18630 19194 19759 20323 20888 21452 22017 22581 23146 23710 24275 24840 25404 25969 26533 27098 27662 28227\\r\\n', 'output': ['unique\\r\\n28791\\r\\n']}, {'input': '76\\r\\n342 684 1027 1369 1711 2054 2396 2738 3081 3423 3765 4108 4450 4792 5135 5477 5819 6162 6504 6846 7189 7531 7873 8216 8558 8900 9243 9585 9927 10270 10612 10954 11297 11639 11981 12324 12666 13009 13351 13693 14036 14378 14720 15063 15405 15747 16090 16432 16774 17117 17459 17801 18144 18486 18828 19171 19513 19855 20198 20540 20882 21225 21567 21909 22252 22594 22936 23279 23621 23963 24306 24648 24991 25333 25675 26018\\r\\n', 'output': ['unique\\r\\n26360\\r\\n']}, {'input': '100\\r\\n1 3 4 6 8 9 11 12 14 16 17 19 21 22 24 25 27 29 30 32 33 35 37 38 40 42 43 45 46 48 50 51 53 55 56 58 59 61 63 64 66 67 69 71 72 74 76 77 79 80 82 84 85 87 88 90 92 93 95 97 98 100 101 103 105 106 108 110 111 113 114 116 118 119 121 122 124 126 127 129 131 132 134 135 137 139 140 142 144 145 147 148 150 152 153 155 156 158 160 161\\r\\n', 'output': ['unique\\r\\n163\\r\\n']}, {'input': '101\\r\\n3 7 10 14 18 21 25 28 32 36 39 43 46 50 54 57 61 64 68 72 75 79 82 86 90 93 97 100 104 108 111 115 118 122 126 129 133 137 140 144 147 151 155 158 162 165 169 173 176 180 183 187 191 194 198 201 205 209 212 216 219 223 227 230 234 237 241 245 248 252 255 259 263 266 270 274 277 281 284 288 292 295 299 302 306 310 313 317 320 324 328 331 335 338 342 346 349 353 356 360 364\\r\\n', 'output': ['unique\\r\\n367\\r\\n']}]","id":178,"lang":"python2","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    stops = list(map(int, input().split()))\\n    \\n    possible_next_stops = set()\\n    \\n    for i in range(10, 10000): # Iterate through possible alpha values\\n        alpha = i \/ 1.0\\n        current_petrol = alpha\\n        current_stops = []\\n        last_stop_index = -1\\n        \\n        for j in range(1, 100000): # Simulate stops\\n            if j % 10 == 0:\\n                continue\\n            \\n            if current_petrol < 10:\\n                current_stops.append(j)\\n                current_petrol += alpha\\n            \\n            current_petrol -= 10\\n            \\n            if len(current_stops) > n: \\n                break\\n            \\n            if len(current_stops) == n:\\n                if current_stops == stops:\\n                  next_stop = -1\\n                  if current_petrol < 10 and j+1 not in current_stops and (j + 1) % 10 != 0: \\n                    next_stop = j+1\\n                  elif current_petrol < 10 and (j+1) % 10 == 0:\\n                    next_stop = j+1\\n                  elif current_petrol >= 10:\\n                    next_stop = -1\\n                  \\n                  if next_stop != -1:\\n                    possible_next_stops.add(next_stop)\\n                break\\n\\n    if len(possible_next_stops) == 1:\\n        print(\\\"unique\\\")\\n        print(possible_next_stops.pop())\\n    else:\\n        print(\\\"not unique\\\")\\n\\nsolve()\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    stops = list(map(int, input().split()))\\n\\n    possible_next_stops = set()\\n    for alpha_decimal in range(1, 1001):  # Iterate through possible decimal parts of alpha\\n        alpha = 10 + alpha_decimal \/ 100.0\\n        current_fuel = alpha\\n        current_stop_index = 0\\n        current_station = 0\\n        stop_indices = []\\n\\n        while current_station <= stops[-1] + 100:\\n            if current_fuel < 10:\\n                if current_station > stops[-1]:\\n                    stop_indices.append(current_station)\\n                    break\\n                else:\\n                    current_stop_index = -1\\n                    break\\n            else:\\n                current_fuel -= 10\\n                current_station += 1\\n                if current_station % 10 == 0:\\n                    if current_station in stops:\\n                        if current_station == stops[current_stop_index]:\\n                            current_fuel += alpha\\n                            current_stop_index += 1\\n                        else:\\n                            current_stop_index = -1\\n                            break\\n                    elif current_station > stops[-1]:\\n                        stop_indices.append(current_station)\\n                        break\\n                    \\n    \\n    if len(stop_indices) == 0: continue\\n    if len(stop_indices) > 0: possible_next_stops.add(stop_indices[0])\\n\\n    if len(possible_next_stops) == 1:\\n        print(\\\"unique\\\")\\n        print(possible_next_stops.pop())\\n    else:\\n        print(\\\"not unique\\\")\\n\\nsolve()\\n\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    stops = list(map(int, input().split()))\\n    \\n    possible_next_stops = set()\\n    \\n    for i in range(10, 10000): # Iterate through possible alpha values\\n        alpha = i \/ 1.0\\n        current_petrol = alpha\\n        current_stops = []\\n        last_stop_index = -1\\n        \\n        for j in range(1, 100000): # Simulate stops\\n            if j % 10 == 0:\\n                continue\\n            \\n            if current_petrol < 10:\\n                current_stops.append(j)\\n                current_petrol += alpha\\n            \\n            current_petrol -= 10\\n            \\n            if len(current_stops) > n: \\n                break\\n            \\n            if len(current_stops) == n:\\n                if current_stops == stops:\\n                  next_stop = -1\\n                  if current_petrol < 10 and j+1 not in current_stops and (j + 1) % 10 != 0: \\n                    next_stop = j+1\\n                  elif current_petrol < 10 and (j+1) % 10 == 0:\\n                    next_stop = j+1\\n                  elif current_petrol >= 10:\\n                    next_stop = -1\\n                  \\n                  if next_stop != -1:\\n                    possible_next_stops.add(next_stop)\\n                break\\n\\n    if len(possible_next_stops) == 1:\\n        print(\\\"unique\\\")\\n        print(possible_next_stops.pop())\\n    else:\\n        print(\\\"not unique\\\")\\n\\nsolve()\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    stops = list(map(int, input().split()))\\n\\n    possible_next_stops = set()\\n    for alpha_decimal in range(1, 1001):  # Iterate through possible decimal parts of alpha\\n        alpha = 10 + alpha_decimal \/ 100.0\\n        current_fuel = alpha\\n        current_stop_index = 0\\n        current_station = 0\\n        stop_indices = []\\n\\n        while current_station <= stops[-1] + 100:\\n            if current_fuel < 10:\\n                if current_station > stops[-1]:\\n                    stop_indices.append(current_station)\\n                    break\\n                else:\\n                    current_stop_index = -1\\n                    break\\n            else:\\n                current_fuel -= 10\\n                current_station += 1\\n                if current_station % 10 == 0:\\n                    if current_station in stops:\\n                        if current_station == stops[current_stop_index]:\\n                            current_fuel += alpha\\n                            current_stop_index += 1\\n                        else:\\n                            current_stop_index = -1\\n                            break\\n                    elif current_station > stops[-1]:\\n                        stop_indices.append(current_station)\\n                        break\\n                    \\n    \\n    if len(stop_indices) == 0: continue\\n    if len(stop_indices) > 0: possible_next_stops.add(stop_indices[0])\\n\\n    if len(possible_next_stops) == 1:\\n        print(\\\"unique\\\")\\n        print(possible_next_stops.pop())\\n    else:\\n        print(\\\"not unique\\\")\\n\\nsolve()\\n\"\n  }\n]\n```"}
{"description":"You already know that Valery's favorite sport is biathlon. Due to your help, he learned to shoot without missing, and his skills are unmatched at the shooting range. But now a smaller task is to be performed, he should learn to complete the path fastest.The track's map is represented by a rectangle n\u2009\u00d7\u2009m in size divided into squares. Each square is marked with a lowercase Latin letter (which means the type of the plot), with the exception of the starting square (it is marked with a capital Latin letters S) and the terminating square (it is marked with a capital Latin letter T). The time of movement from one square to another is equal to 1 minute. The time of movement within the cell can be neglected. We can move from the cell only to side-adjacent ones, but it is forbidden to go beyond the map edges. Also the following restriction is imposed on the path: it is not allowed to visit more than k different types of squares (squares of one type can be visited an infinite number of times). Squares marked with S and T have no type, so they are not counted. But S must be visited exactly once \u2014 at the very beginning, and T must be visited exactly once \u2014 at the very end.Your task is to find the path from the square S to the square T that takes minimum time. Among all shortest paths you should choose the lexicographically minimal one. When comparing paths you should lexicographically represent them as a sequence of characters, that is, of plot types.","input_specification":"The first input line contains three integers n, m and k (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u200950,\u2009n\u00b7m\u2009\u2265\u20092,\u20091\u2009\u2264\u2009k\u2009\u2264\u20094). Then n lines contain the map. Each line has the length of exactly m characters and consists of lowercase Latin letters and characters S and T. It is guaranteed that the map contains exactly one character S and exactly one character T. Pretest 12 is one of the maximal tests for this problem.","output_specification":"If there is a path that satisfies the condition, print it as a sequence of letters \u2014 the plot types. Otherwise, print \"-1\" (without quotes). You shouldn't print the character S in the beginning and T in the end. Note that this sequence may be empty. This case is present in pretests. You can just print nothing or print one \"End of line\"-character. Both will be accepted.","notes":null,"sample_inputs":["5 3 2\nSba\nccc\naac\nccc\nabT","3 4 1\nSxyy\nyxxx\nyyyT","1 3 3\nTyS","1 4 1\nSxyT"],"sample_outputs":["bcccc","xxxx","y","-1"],"src_uid":"1d73b315694f2ebbf796654193372730","lang_cluster":"Python","difficulty":2400,"human_solution":"import sys\nfrom array import array  # noqa: F401\nfrom itertools import combinations\nfrom collections import deque\n\n\ndef input():\n    return sys.stdin.buffer.readline().decode('utf-8')\n\n\nn, m, k = map(int, input().split())\nchars = (\n    ['}' * (m + 2)]\n    + ['}' + ''.join('{' if c == 'S' else '|' if c == 'T' else c for c in input().rstrip()) + '}' for _ in range(n)]\n    + ['}' * (m + 2)]\n)\ncbit = [[1 << (ord(c) - 97) for c in chars[i]] for i in range(n + 2)]\n\nsi, sj, ti, tj = 0, 0, 0, 0\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if chars[i][j] == '{':\n            si, sj = i, j\n            cbit[i][j] = 0\n        if chars[i][j] == '|':\n            ti, tj = i, j\n\n\nans = inf = '*' * (n * m)\n\nfor comb in combinations([1 << i for i in range(26)], r=k):\n    enabled = sum(comb)\n\n    dp = [[inf] * (m + 2) for _ in range(n + 2)]\n    dp[ti][tj] = ''\n    dq = deque([(ti, tj, '')])\n    while dq:\n        i, j, s = dq.popleft()\n        if dp[i][j] < s:\n            continue\n        for di, dj in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):\n            if (cbit[di][dj] & enabled) != cbit[di][dj]:\n                continue\n            pre = chars[di][dj] if cbit[di][dj] else ''\n            l = 1 if cbit[di][dj] else 0\n            if (len(dp[di][dj]) > len(s) + l or len(dp[di][dj]) == len(s) + l and dp[di][dj] > pre + s):\n                dp[di][dj] = pre + s\n                if l:\n                    dq.append((di, dj, pre + s))\n\n    if len(ans) > len(dp[si][sj]) or len(ans) == len(dp[si][sj]) and ans > dp[si][sj]:\n        ans = dp[si][sj]\n\nprint(ans if ans != inf else -1)\n","testcases":"[{'input': '5 3 2\\r\\nSba\\r\\nccc\\r\\naac\\r\\nccc\\r\\nabT\\r\\n', 'output': ['bcccc\\r\\n']}, {'input': '3 4 1\\r\\nSxyy\\r\\nyxxx\\r\\nyyyT\\r\\n', 'output': ['xxxx\\r\\n']}, {'input': '1 3 3\\r\\nTyS\\r\\n', 'output': ['y\\r\\n']}, {'input': '1 4 1\\r\\nSxyT\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 3 3\\r\\nSaT\\r\\n', 'output': ['a\\r\\n']}, {'input': '3 4 1\\r\\nSbbT\\r\\naaaa\\r\\nabba\\r\\n', 'output': ['bb\\r\\n']}, {'input': '3 5 2\\r\\nSbcaT\\r\\nacbab\\r\\nacccb\\r\\n', 'output': ['aacccaa\\r\\n']}, {'input': '3 4 1\\r\\nSbbb\\r\\naaaT\\r\\nabbc\\r\\n', 'output': ['aaa\\r\\n']}, {'input': '3 4 2\\r\\nSbbb\\r\\naabT\\r\\nabbc\\r\\n', 'output': ['aab\\r\\n']}, {'input': '1 2 1\\r\\nST\\r\\n', 'output': ['\\r\\n']}, {'input': '4 5 3\\r\\nabaaa\\r\\nbabaT\\r\\nSabba\\r\\naaaaa\\r\\n', 'output': ['aaba\\r\\n']}, {'input': '6 6 3\\r\\npkhipk\\r\\nmlfmak\\r\\naqmbae\\r\\ndlbfSj\\r\\ndpbjcr\\r\\naTbqbm\\r\\n', 'output': ['cbqb\\r\\n']}, {'input': '1 20 3\\r\\nacbccbbddbffScTadffd\\r\\n', 'output': ['c\\r\\n']}, {'input': '1 30 2\\r\\nbmjcfldkloleiqqiTnmdjpaSckkijf\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 40 1\\r\\nfaSfgfTcfadcdfagfbccbffbeaaebagbfcfcgdfd\\r\\n', 'output': ['-1\\r\\n']}, {'input': '1 50 3\\r\\nSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaTaaaaaaaaaaa\\r\\n', 'output': ['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n']}, {'input': '5 10 4\\r\\naaaaaaaaaa\\r\\naaaaaTaaaa\\r\\naaaaaaaSaa\\r\\naaaaaaaaaa\\r\\naaaaaaaaaa\\r\\n', 'output': ['aa\\r\\n']}, {'input': '5 3 4\\r\\naaT\\r\\nacc\\r\\nbbb\\r\\nbbc\\r\\ncSb\\r\\n', 'output': ['bbbc\\r\\n']}, {'input': '5 5 1\\r\\ncaTbc\\r\\ndccac\\r\\ndacda\\r\\naacaS\\r\\ncdcab\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 8 2\\r\\nbdcdcbfa\\r\\ndecffcce\\r\\ndTffdacb\\r\\neeedcdbb\\r\\nfdbbbcba\\r\\nddabfcda\\r\\nabdbSeed\\r\\nbdcdcffa\\r\\ncadbaffa\\r\\nfcccddad\\r\\n', 'output': ['bbbbee\\r\\n']}, {'input': '20 10 3\\r\\nebebccacdb\\r\\neeebccddeT\\r\\neadebecaac\\r\\nadeeeaccbc\\r\\nbaccccdaed\\r\\ndeabceabba\\r\\ndadbecbaaa\\r\\neacbbcedcb\\r\\naeeScdbbab\\r\\nbabaecaead\\r\\nbacdbebeae\\r\\naacbadbeec\\r\\nacddceecca\\r\\nacaeaebaba\\r\\ncdddeaaeae\\r\\neabddadade\\r\\nddddaeaeed\\r\\nbccbaacadd\\r\\ndccccbabdc\\r\\necdaebeccc\\r\\n', 'output': ['bbbcccaccaac\\r\\n']}, {'input': '15 10 4\\r\\nsejwprqjku\\r\\npnjsiopxft\\r\\nrsplgvwixq\\r\\nendglkchxl\\r\\nftihbbexgh\\r\\nsxtxbbavge\\r\\njcdkusfnmr\\r\\nskgsqvflia\\r\\nkcxmcxjpae\\r\\namaiwcfile\\r\\nnjgjSunmwd\\r\\nldxvahgreu\\r\\necmrajbjuT\\r\\nnaioqigols\\r\\npbwrmxkltj\\r\\n', 'output': ['aajbju\\r\\n']}, {'input': '15 3 4\\r\\nllv\\r\\nttT\\r\\nhbo\\r\\nogc\\r\\nkfe\\r\\ngli\\r\\nfbx\\r\\nkfp\\r\\nspm\\r\\ncxc\\r\\nndw\\r\\nSoa\\r\\npfh\\r\\nedr\\r\\nxmv\\r\\n', 'output': ['-1\\r\\n']}, {'input': '15 15 3\\r\\ncbbdccabdcbacbd\\r\\nbcabdcacadacdbc\\r\\ncbcddbbcdbddcad\\r\\nddcabdbbdcabbdc\\r\\naabadcccTcabdbb\\r\\ncbacaaacaabdbbd\\r\\ndbdcbSdabaadbdb\\r\\ndbbaddcdddaadbb\\r\\nbbddcdcbaccbbaa\\r\\nadadadbdbbddccc\\r\\ncddbbdaddcbbdcc\\r\\nbbaadcdbbcaacca\\r\\nadbdcdbbcbddbcd\\r\\ncdadbcccddcdbda\\r\\ncbcdaabdcabccbc\\r\\n', 'output': ['aaca\\r\\n']}, {'input': '20 20 2\\r\\nddadfcdeTaeccbedeaec\\r\\nacafdfdeaffdeabdcefe\\r\\nabbcbefcdbbbcdebafef\\r\\nfdafdcccbcdeeaedeffc\\r\\ndfdaabdefdafabaabcef\\r\\nfebdcabacaaaabfacbbe\\r\\nabfcaacadfdbfdbaaefd\\r\\ndacceeccddccaccdbbce\\r\\ncacebecabedbddfbfdad\\r\\ndacbfcabbebfddcedffd\\r\\ncfcdfacfadcfbcebebaa\\r\\nddfbebafaccbebeefbac\\r\\nebfaebacbbebdfcbcbea\\r\\ndfbaebcfccacfeaccaad\\r\\nedeedeceebcbfdbcdbbe\\r\\nafaacccfbdecebfdabed\\r\\nddbdcedacedadeccaeec\\r\\necbSeacbdcccbcedafef\\r\\ncfdbeeffbeeafccfdddb\\r\\ncefdbdfbabccfdaaadbf\\r\\n', 'output': ['-1\\r\\n']}, {'input': '10 10 2\\r\\nbaaaaaaaaa\\r\\nbffacffffa\\r\\nbggaccggga\\r\\nbbbSccchha\\r\\nbdddddccia\\r\\nbjddccccca\\r\\nbkkdddTaaa\\r\\nblllddblla\\r\\nbmmmmdbmma\\r\\nbbbbbbbbbb\\r\\n', 'output': ['ccccc\\r\\n']}, {'input': '10 20 3\\r\\nbaaaaaaaaaaaaaaaaaaa\\r\\nbfffffffacfffffffffa\\r\\nbgggggggaccgggggggga\\r\\nbbbbbbbbSccchhhhhhha\\r\\nbiiiiidddddcciiiiiia\\r\\nbjjjjjjddcccccjjjjja\\r\\nbkkkkkkkdddTaaaaaaaa\\r\\nbllllllllddbllllllla\\r\\nbmmmmmmmmmdbmmmmmmma\\r\\nbbbbbbbbbbbbbbbbbbbb\\r\\n', 'output': ['ccccc\\r\\n']}, {'input': '20 10 4\\r\\nbaaaaaaaaa\\r\\nbffacffffa\\r\\nbggaccggga\\r\\nbhhaccchha\\r\\nbiiaccccia\\r\\nbjjaccccca\\r\\nbkkakkkkka\\r\\nbllallllla\\r\\nbbbSmmmmma\\r\\nbnnnnnnnna\\r\\nbooooooooa\\r\\nbpppppTaaa\\r\\nbqqqqqbqqa\\r\\nbrrrrrbrra\\r\\nbdddddbssa\\r\\nbtddddbtta\\r\\nbuudddbuua\\r\\nbvvvddbvva\\r\\nbwwwwdbwwa\\r\\nbbbbbbbbbb\\r\\n', 'output': ['mmmno\\r\\n']}, {'input': '20 20 2\\r\\nbaaaaaaaaaaaaaaaaaaa\\r\\nbfffffffacfffffffffa\\r\\nbgggggggaccgggggggga\\r\\nbhhhhhhhaccchhhhhhha\\r\\nbiiiiiiiacccciiiiiia\\r\\nbjjjjjjjacccccjjjjja\\r\\nbkkkkkkkacccccckkkka\\r\\nblllllllacccccccllla\\r\\nbbbbbbbbSccccccccmma\\r\\nbddddddddddcccccccna\\r\\nbodddddddcccccccccca\\r\\nbppddddddddTaaaaaaaa\\r\\nbqqqdddddddbqqqqqqqa\\r\\nbrrrrddddddbrrrrrrra\\r\\nbsssssdddddbsssssssa\\r\\nbttttttddddbttttttta\\r\\nbuuuuuuudddbuuuuuuua\\r\\nbvvvvvvvvddbvvvvvvva\\r\\nbwwwwwwwwwdbwwwwwwwa\\r\\nbbbbbbbbbbbbbbbbbbbb\\r\\n', 'output': ['ccccc\\r\\n']}, {'input': '1 2 4\\r\\nST\\r\\n', 'output': ['\\r\\n']}, {'input': '3 3 1\\r\\naaa\\r\\naaa\\r\\nTSa\\r\\n', 'output': ['\\r\\n']}, {'input': '2 1 1\\r\\nS\\r\\nT\\r\\n', 'output': ['\\r\\n']}, {'input': '1 10 2\\r\\nbaaSaaTacb\\r\\n', 'output': ['aa\\r\\n']}, {'input': '2 1 4\\r\\nS\\r\\nT\\r\\n', 'output': ['\\r\\n']}]","id":179,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"from collections import deque\\n\\ndef solve():\\n    n, m, k = map(int, input().split())\\n    grid = [input() for _ in range(n)]\\n    start_row, start_col = -1, -1\\n    end_row, end_col = -1, -1\\n    for r in range(n):\\n        for c in range(m):\\n            if grid[r][c] == 'S':\\n                start_row, start_col = r, c\\n            elif grid[r][c] == 'T':\\n                end_row, end_col = r, c\\n\\n    def get_neighbors(r, c):\\n        neighbors = []\\n        for dr, dc in [(0, 1), (0, -1), (1, 0), ( -1, 0)]:\\n            nr, nc = r + dr, c + dc\\n            if 0 <= nr < n and 0 <= nc < m:\\n                neighbors.append((nr, nc))\\n        return neighbors\\n\\n    q = deque([(start_row, start_col, '', set())])\\n    visited = set()\\n    shortest_path = None\\n    min_dist = float('inf')\\n\\n    while q:\\n        r, c, path, types = q.popleft()\\n\\n        if (r, c) == (end_row, end_col):\\n            if len(types) <= k:\\n                if len(path) < min_dist:\\n                    min_dist = len(path)\\n                    shortest_path = path\\n                elif len(path) == min_dist and (shortest_path is None or path < shortest_path):\\n                    shortest_path = path\\n            continue\\n\\n        if (r, c, tuple(sorted(types))) in visited: # Optimization to avoid revisiting states\\n            continue\\n        visited.add((r, c, tuple(sorted(types))))\\n\\n        for nr, nc in get_neighbors(r, c):\\n            cell_type = grid[nr][nc]\\n            new_types = set(types)\\n            if cell_type != 'S' and cell_type != 'T':\\n                new_types.add(cell_type)\\n            \\n            if len(new_types) <= k:\\n                q.append((nr, nc, path + (cell_type if cell_type != 'S' and cell_type != 'T' else ''), new_types))\\n\\n    if shortest_path is None:\\n        print(\\\"-1\\\")\\n    else:\\n        print(shortest_path)\\n\\n\\nsolve()\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"from collections import deque\\n\\ndef solve():\\n    n, m, k = map(int, input().split())\\n    grid = [input() for _ in range(n)]\\n    start_row, start_col = -1, -1\\n    end_row, end_col = -1, -1\\n    for r in range(n):\\n        for c in range(m):\\n            if grid[r][c] == 'S':\\n                start_row, start_col = r, c\\n            elif grid[r][c] == 'T':\\n                end_row, end_col = r, c\\n\\n    def is_valid(r, c):\\n        return 0 <= r < n and 0 <= c < m\\n\\n    q = deque([(start_row, start_col, '', set())])\\n    visited = set()\\n    shortest_path = None\\n    min_dist = float('inf')\\n\\n    while q:\\n        row, col, path, types = q.popleft()\\n        if (row, col, tuple(sorted(types))) in visited:  # Optimization to avoid revisiting states\\n            continue\\n        visited.add((row, col, tuple(sorted(types))))\\n\\n        if row == end_row and col == end_col:\\n            if len(path) < min_dist:\\n                min_dist = len(path)\\n                shortest_path = path\\n            elif len(path) == min_dist and (shortest_path is None or path < shortest_path):\\n                shortest_path = path\\n            continue\\n\\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\\n            nr, nc = row + dr, col + dc\\n            if is_valid(nr, nc):\\n                cell_type = grid[nr][nc]\\n                new_types = set(types)\\n                if 'a' <= cell_type <= 'z':\\n                    new_types.add(cell_type)\\n                if len(new_types) <= k:\\n                    q.append((nr, nc, path + (cell_type if 'a' <= cell_type <= 'z' else ''), new_types))\\n\\n    print(shortest_path if shortest_path is not None else -1)\\n\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"from collections import deque\\n\\ndef solve():\\n    n, m, k = map(int, input().split())\\n    grid = [input() for _ in range(n)]\\n    start_row, start_col = -1, -1\\n    end_row, end_col = -1, -1\\n    for r in range(n):\\n        for c in range(m):\\n            if grid[r][c] == 'S':\\n                start_row, start_col = r, c\\n            elif grid[r][c] == 'T':\\n                end_row, end_col = r, c\\n\\n    def get_neighbors(r, c):\\n        neighbors = []\\n        for dr, dc in [(0, 1), (0, -1), (1, 0), ( -1, 0)]:\\n            nr, nc = r + dr, c + dc\\n            if 0 <= nr < n and 0 <= nc < m:\\n                neighbors.append((nr, nc))\\n        return neighbors\\n\\n    q = deque([(start_row, start_col, '', set())])\\n    visited = set()\\n    shortest_path = None\\n    min_dist = float('inf')\\n\\n    while q:\\n        r, c, path, types = q.popleft()\\n\\n        if (r, c) == (end_row, end_col):\\n            if len(types) <= k:\\n                if len(path) < min_dist:\\n                    min_dist = len(path)\\n                    shortest_path = path\\n                elif len(path) == min_dist and (shortest_path is None or path < shortest_path):\\n                    shortest_path = path\\n            continue\\n\\n        if (r, c, tuple(sorted(types))) in visited: # Optimization to avoid revisiting states\\n            continue\\n        visited.add((r, c, tuple(sorted(types))))\\n\\n        for nr, nc in get_neighbors(r, c):\\n            cell_type = grid[nr][nc]\\n            new_types = set(types)\\n            if cell_type != 'S' and cell_type != 'T':\\n                new_types.add(cell_type)\\n            \\n            if len(new_types) <= k:\\n                q.append((nr, nc, path + (cell_type if cell_type != 'S' and cell_type != 'T' else ''), new_types))\\n\\n    if shortest_path is None:\\n        print(\\\"-1\\\")\\n    else:\\n        print(shortest_path)\\n\\n\\nsolve()\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"from collections import deque\\n\\ndef solve():\\n    n, m, k = map(int, input().split())\\n    grid = [input() for _ in range(n)]\\n    start_row, start_col = -1, -1\\n    end_row, end_col = -1, -1\\n    for r in range(n):\\n        for c in range(m):\\n            if grid[r][c] == 'S':\\n                start_row, start_col = r, c\\n            elif grid[r][c] == 'T':\\n                end_row, end_col = r, c\\n\\n    def is_valid(r, c):\\n        return 0 <= r < n and 0 <= c < m\\n\\n    q = deque([(start_row, start_col, '', set())])\\n    visited = set()\\n    shortest_path = None\\n    min_dist = float('inf')\\n\\n    while q:\\n        row, col, path, types = q.popleft()\\n        if (row, col, tuple(sorted(types))) in visited:  # Optimization to avoid revisiting states\\n            continue\\n        visited.add((row, col, tuple(sorted(types))))\\n\\n        if row == end_row and col == end_col:\\n            if len(path) < min_dist:\\n                min_dist = len(path)\\n                shortest_path = path\\n            elif len(path) == min_dist and (shortest_path is None or path < shortest_path):\\n                shortest_path = path\\n            continue\\n\\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\\n            nr, nc = row + dr, col + dc\\n            if is_valid(nr, nc):\\n                cell_type = grid[nr][nc]\\n                new_types = set(types)\\n                if 'a' <= cell_type <= 'z':\\n                    new_types.add(cell_type)\\n                if len(new_types) <= k:\\n                    q.append((nr, nc, path + (cell_type if 'a' <= cell_type <= 'z' else ''), new_types))\\n\\n    print(shortest_path if shortest_path is not None else -1)\\n\\n\\nsolve()\"\n  }\n]\n```"}
{"description":"Everyone knows that long ago on the territory of present-day Berland there lived Bindian tribes. Their capital was surrounded by n hills, forming a circle. On each hill there was a watchman, who watched the neighbourhood day and night.In case of any danger the watchman could make a fire on the hill. One watchman could see the signal of another watchman, if on the circle arc connecting the two hills there was no hill higher than any of the two. As for any two hills there are two different circle arcs connecting them, the signal was seen if the above mentioned condition was satisfied on at least one of the arcs. For example, for any two neighbouring watchmen it is true that the signal of one will be seen by the other.An important characteristics of this watch system was the amount of pairs of watchmen able to see each other's signals. You are to find this amount by the given heights of the hills.","input_specification":"The first line of the input data contains an integer number n (3\u2264n\u226410^6), n \u2014 the amount of hills around the capital. The second line contains n numbers \u2014 heights of the hills in clockwise order. All height numbers are integer and lie between 1 and 10^9.\n","output_specification":"Print the required amount of pairs.\n","notes":null,"sample_inputs":["5\n1 2 4 5 3\n"],"sample_outputs":["7\n"],"src_uid":"5_E","lang_cluster":"Python","difficulty":2400,"human_solution":"get_nums = lambda : [int(w) for w in input().split()]\n    \nN = int(input())\nnums = get_nums()\nidx = nums.index(max(nums))\nnums = nums[idx:] + nums[:idx]\n    \n# nums.append(nums[0])\n# left = [0] * len(N)\nstk = []\nresult = 0\nfor i,n in enumerate(nums):\n    if not stk or n < stk[-1][0]:\n        stk.append([n, 1])\n    elif n == stk[-1][0]:\n        stk[-1][1] += 1\n    else:\n        while stk and stk[-1][0] < n:\n            result += stk[-1][1] * (stk[-1][1] - 1) \/\/ 2 + stk[-1][1] * 2\n            stk.pop()\n        if n == stk[-1][0]:\n            stk[-1][1] += 1\n        else:\n            stk.append([n, 1])\n    \n# if len(stk) > 1:\n#     result -= stk[-1][1]\n    \nwhile len(stk) > 1:\n    result += stk[-1][1] * 2 + stk[-1][1] * (stk[-1][1] - 1) \/\/ 2\n    if len(stk) == 2 and stk[0][1] == 1:\n        result -= stk[-1][1]\n    stk.pop()\nif stk:\n    result += stk[0][1] * (stk[0][1] - 1) \/\/2\nprint(result)","testcases":"[{'input': ['5\\r\\n1 2 4 5 3\\r\\n'], 'output': ['7\\r\\n']}, {'input': ['3\\r\\n2118 2118 2118\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['3\\r\\n2221 1976 2221\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['3\\r\\n140 989 2895\\r\\n'], 'output': ['3\\r\\n']}, {'input': ['4\\r\\n2440 2440 2440 2440\\r\\n'], 'output': ['6\\r\\n']}, {'input': ['4\\r\\n1178 1178 2577 2577\\r\\n'], 'output': ['6\\r\\n']}, {'input': ['4\\r\\n332 2714 2420 2714\\r\\n'], 'output': ['5\\r\\n']}, {'input': ['5\\r\\n763 763 763 763 763\\r\\n'], 'output': ['10\\r\\n']}, {'input': ['5\\r\\n4136 1826 4136 1826 1826\\r\\n'], 'output': ['8\\r\\n']}, {'input': ['5\\r\\n3581 3581 305 305 3581\\r\\n'], 'output': ['8\\r\\n']}, {'input': ['10\\r\\n8097 8097 8097 8097 8097 8097 8097 8097 8097 8097\\r\\n'], 'output': ['45\\r\\n']}, {'input': ['10\\r\\n4972 4972 4972 4858 4858 4972 4972 4972 4858 4972\\r\\n'], 'output': ['28\\r\\n']}, {'input': ['10\\r\\n1620 8260 1620 3994 3994 8260 8260 1620 1620 3994\\r\\n'], 'output': ['19\\r\\n']}, {'input': ['10\\r\\n5938 4836 5938 5938 4836 4836 2780 2780 1495 4836\\r\\n'], 'output': ['21\\r\\n']}, {'input': ['10\\r\\n6090 3360 6090 6313 1608 6313 4087 3360 1608 1608\\r\\n'], 'output': ['19\\r\\n']}]","id":803,"lang":"python3","program_synthesis":["```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    heights = list(map(int, input().split()))\\n    count = 0\\n    for i in range(n):\\n        for j in range(i + 1, n):\\n            # Check arc 1 (clockwise)\\n            valid1 = True\\n            max_height1 = 0\\n            for k in range(i + 1, j):\\n                max_height1 = max(max_height1, heights[k])\\n            if max_height1 > heights[i] or max_height1 > heights[j]:\\n                valid1 = False\\n\\n            # Check arc 2 (counter-clockwise)\\n            valid2 = True\\n            max_height2 = 0\\n            for k in range(j + 1, n) + list(range(0, i)):\\n                max_height2 = max(max_height2, heights[k])\\n            if max_height2 > heights[i] or max_height2 > heights[j]:\\n                valid2 = False\\n\\n            if valid1 or valid2:\\n                count += 1\\n    print(count)\\n\\nsolve()\\n\"\n  }\n]\n```","```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    heights = list(map(int, input().split()))\\n    count = 0\\n    for i in range(n):\\n        for j in range(i + 1, n):\\n            # Check arc 1 (clockwise)\\n            max_height_arc1 = 0\\n            valid_arc1 = True\\n            for k in range(i + 1, j):\\n                max_height_arc1 = max(max_height_arc1, heights[k])\\n            if max_height_arc1 > heights[i] or max_height_arc1 > heights[j]:\\n                valid_arc1 = False\\n\\n            # Check arc 2 (counter-clockwise)\\n            max_height_arc2 = 0\\n            valid_arc2 = True\\n            for k in range(j + 1, n):\\n                max_height_arc2 = max(max_height_arc2, heights[k])\\n            for k in range(0, i):\\n                max_height_arc2 = max(max_height_arc2, heights[k])\\n            if max_height_arc2 > heights[i] or max_height_arc2 > heights[j]:\\n                valid_arc2 = False\\n\\n            if valid_arc1 or valid_arc2:\\n                count += 1\\n    print(count)\\n\\nsolve()\"\n  }\n]\n```"],"program_synthesis_0":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    heights = list(map(int, input().split()))\\n    count = 0\\n    for i in range(n):\\n        for j in range(i + 1, n):\\n            # Check arc 1 (clockwise)\\n            valid1 = True\\n            max_height1 = 0\\n            for k in range(i + 1, j):\\n                max_height1 = max(max_height1, heights[k])\\n            if max_height1 > heights[i] or max_height1 > heights[j]:\\n                valid1 = False\\n\\n            # Check arc 2 (counter-clockwise)\\n            valid2 = True\\n            max_height2 = 0\\n            for k in range(j + 1, n) + list(range(0, i)):\\n                max_height2 = max(max_height2, heights[k])\\n            if max_height2 > heights[i] or max_height2 > heights[j]:\\n                valid2 = False\\n\\n            if valid1 or valid2:\\n                count += 1\\n    print(count)\\n\\nsolve()\\n\"\n  }\n]\n```","program_synthesis_1":"```json\n[\n  {\n    \"version\": \"python3\",\n    \"target code\": \"def solve():\\n    n = int(input())\\n    heights = list(map(int, input().split()))\\n    count = 0\\n    for i in range(n):\\n        for j in range(i + 1, n):\\n            # Check arc 1 (clockwise)\\n            max_height_arc1 = 0\\n            valid_arc1 = True\\n            for k in range(i + 1, j):\\n                max_height_arc1 = max(max_height_arc1, heights[k])\\n            if max_height_arc1 > heights[i] or max_height_arc1 > heights[j]:\\n                valid_arc1 = False\\n\\n            # Check arc 2 (counter-clockwise)\\n            max_height_arc2 = 0\\n            valid_arc2 = True\\n            for k in range(j + 1, n):\\n                max_height_arc2 = max(max_height_arc2, heights[k])\\n            for k in range(0, i):\\n                max_height_arc2 = max(max_height_arc2, heights[k])\\n            if max_height_arc2 > heights[i] or max_height_arc2 > heights[j]:\\n                valid_arc2 = False\\n\\n            if valid_arc1 or valid_arc2:\\n                count += 1\\n    print(count)\\n\\nsolve()\"\n  }\n]\n```"}
